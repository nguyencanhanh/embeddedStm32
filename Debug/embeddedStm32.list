
embeddedStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001704  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08001834  08001834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001910  08001910  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08001910  08001910  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001910  08001910  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001910  08001910  00011910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001914  08001914  00011914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08001918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000006c  08001984  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08001984  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bed  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000049a  00000000  00000000  00020c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000148  00000000  00000000  00021120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  00021268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000508  00000000  00000000  00021378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014ec  00000000  00000000  00021880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058c55  00000000  00000000  00022d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007b9c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cd4  00000000  00000000  0007ba14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  0007c6e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  0007c784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000006c 	.word	0x2000006c
 800014c:	00000000 	.word	0x00000000
 8000150:	0800181c 	.word	0x0800181c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000070 	.word	0x20000070
 800016c:	0800181c 	.word	0x0800181c

08000170 <GPIO_configureRCC>:
 *  Created on: Jun 5, 2023
 *      Author: nguye
 */
#include "GPIO_configure.h"

void GPIO_configureRCC(char* GPIOx){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	while(*GPIOx){
 8000178:	e020      	b.n	80001bc <GPIO_configureRCC+0x4c>
		if(*GPIOx == 'C') RCC->APB2ENR |= (1 << 4);
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	2b43      	cmp	r3, #67	; 0x43
 8000180:	d105      	bne.n	800018e <GPIO_configureRCC+0x1e>
 8000182:	4b13      	ldr	r3, [pc, #76]	; (80001d0 <GPIO_configureRCC+0x60>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a12      	ldr	r2, [pc, #72]	; (80001d0 <GPIO_configureRCC+0x60>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'B') RCC->APB2ENR |= (1 << 3);
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	2b42      	cmp	r3, #66	; 0x42
 8000194:	d105      	bne.n	80001a2 <GPIO_configureRCC+0x32>
 8000196:	4b0e      	ldr	r3, [pc, #56]	; (80001d0 <GPIO_configureRCC+0x60>)
 8000198:	699b      	ldr	r3, [r3, #24]
 800019a:	4a0d      	ldr	r2, [pc, #52]	; (80001d0 <GPIO_configureRCC+0x60>)
 800019c:	f043 0308 	orr.w	r3, r3, #8
 80001a0:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'A') RCC->APB2ENR |= (1 << 2);
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	2b41      	cmp	r3, #65	; 0x41
 80001a8:	d105      	bne.n	80001b6 <GPIO_configureRCC+0x46>
 80001aa:	4b09      	ldr	r3, [pc, #36]	; (80001d0 <GPIO_configureRCC+0x60>)
 80001ac:	699b      	ldr	r3, [r3, #24]
 80001ae:	4a08      	ldr	r2, [pc, #32]	; (80001d0 <GPIO_configureRCC+0x60>)
 80001b0:	f043 0304 	orr.w	r3, r3, #4
 80001b4:	6193      	str	r3, [r2, #24]
		GPIOx++;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	3301      	adds	r3, #1
 80001ba:	607b      	str	r3, [r7, #4]
	while(*GPIOx){
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d1da      	bne.n	800017a <GPIO_configureRCC+0xa>
	}
}
 80001c4:	bf00      	nop
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40021000 	.word	0x40021000

080001d4 <GPIO_configure>:
void GPIO_configure(GPIO_TypeDef*GPIOx, uint8_t* Pin, uint8_t* mode){
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
	while(*Pin){
 80001e0:	e03e      	b.n	8000260 <GPIO_configure+0x8c>
		if(*Pin > 7){
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	2b07      	cmp	r3, #7
 80001e8:	d91b      	bls.n	8000222 <GPIO_configure+0x4e>
			GPIOx->CRH &= ~(15<<(*Pin * 4 - 32));
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	68ba      	ldr	r2, [r7, #8]
 80001f0:	7812      	ldrb	r2, [r2, #0]
 80001f2:	3a08      	subs	r2, #8
 80001f4:	0092      	lsls	r2, r2, #2
 80001f6:	210f      	movs	r1, #15
 80001f8:	fa01 f202 	lsl.w	r2, r1, r2
 80001fc:	43d2      	mvns	r2, r2
 80001fe:	401a      	ands	r2, r3
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	605a      	str	r2, [r3, #4]
			GPIOx->CRH |= *mode << (*Pin * 4 - 32);
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	687a      	ldr	r2, [r7, #4]
 800020a:	7812      	ldrb	r2, [r2, #0]
 800020c:	4611      	mov	r1, r2
 800020e:	68ba      	ldr	r2, [r7, #8]
 8000210:	7812      	ldrb	r2, [r2, #0]
 8000212:	3a08      	subs	r2, #8
 8000214:	0092      	lsls	r2, r2, #2
 8000216:	fa01 f202 	lsl.w	r2, r1, r2
 800021a:	431a      	orrs	r2, r3
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	e018      	b.n	8000254 <GPIO_configure+0x80>
		}else{
			GPIOx->CRL &= ~(15<<(*Pin * 4));
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	7812      	ldrb	r2, [r2, #0]
 800022a:	0092      	lsls	r2, r2, #2
 800022c:	210f      	movs	r1, #15
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	43d2      	mvns	r2, r2
 8000234:	401a      	ands	r2, r3
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	601a      	str	r2, [r3, #0]
			GPIOx->CRL |= *mode << (*Pin * 4);
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	7812      	ldrb	r2, [r2, #0]
 8000242:	4611      	mov	r1, r2
 8000244:	68ba      	ldr	r2, [r7, #8]
 8000246:	7812      	ldrb	r2, [r2, #0]
 8000248:	0092      	lsls	r2, r2, #2
 800024a:	fa01 f202 	lsl.w	r2, r1, r2
 800024e:	431a      	orrs	r2, r3
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	601a      	str	r2, [r3, #0]
		}
		Pin++;
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	3301      	adds	r3, #1
 8000258:	60bb      	str	r3, [r7, #8]
		mode++;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	3301      	adds	r3, #1
 800025e:	607b      	str	r3, [r7, #4]
	while(*Pin){
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d1bc      	bne.n	80001e2 <GPIO_configure+0xe>
	}
}
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	3714      	adds	r7, #20
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr

08000274 <main>:

uint32_t g_tick_count = 0;
uint8_t curent_task = 1;

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	GPIO_configureRCC("B");
 8000278:	480b      	ldr	r0, [pc, #44]	; (80002a8 <main+0x34>)
 800027a:	f7ff ff79 	bl	8000170 <GPIO_configureRCC>
	GPIO_configure((GPIO_TypeDef*)GPIOB, (uint8_t*)GPIOB_Pin ,(uint8_t*)GPIOB_mode);
 800027e:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <main+0x38>)
 8000280:	490b      	ldr	r1, [pc, #44]	; (80002b0 <main+0x3c>)
 8000282:	480c      	ldr	r0, [pc, #48]	; (80002b4 <main+0x40>)
 8000284:	f7ff ffa6 	bl	80001d4 <GPIO_configure>
	enable_rpocessor_faults();
 8000288:	f000 f8f8 	bl	800047c <enable_rpocessor_faults>
	init_scheduler_stack(SCHED_STACK_START);
 800028c:	480a      	ldr	r0, [pc, #40]	; (80002b8 <main+0x44>)
 800028e:	f000 f85f 	bl	8000350 <init_scheduler_stack>

	init_task_stack();
 8000292:	f000 f863 	bl	800035c <init_task_stack>
	init_systick_timer(TICK_HZ);
 8000296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800029a:	f000 f83f 	bl	800031c <init_systick_timer>
	swich_sp_to_psp();
 800029e:	f000 f97b 	bl	8000598 <swich_sp_to_psp>
	task1_handler();
 80002a2:	f000 f80f 	bl	80002c4 <task1_handler>

	 while (1)
 80002a6:	e7fe      	b.n	80002a6 <main+0x32>
 80002a8:	08001834 	.word	0x08001834
 80002ac:	20000004 	.word	0x20000004
 80002b0:	20000000 	.word	0x20000000
 80002b4:	40010c00 	.word	0x40010c00
 80002b8:	20004600 	.word	0x20004600

080002bc <idle_task>:
	  {

	  }
}

void idle_task(void){
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	while(1);
 80002c0:	e7fe      	b.n	80002c0 <idle_task+0x4>
	...

080002c4 <task1_handler>:
}

void task1_handler(void){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	while(1){
		printf("oke");
 80002c8:	4801      	ldr	r0, [pc, #4]	; (80002d0 <task1_handler+0xc>)
 80002ca:	f000 fa5f 	bl	800078c <iprintf>
 80002ce:	e7fb      	b.n	80002c8 <task1_handler+0x4>
 80002d0:	08001838 	.word	0x08001838

080002d4 <task2_handler>:
	}
}
void task2_handler(void){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	while(1){
		printf("oke");
 80002d8:	4801      	ldr	r0, [pc, #4]	; (80002e0 <task2_handler+0xc>)
 80002da:	f000 fa57 	bl	800078c <iprintf>
 80002de:	e7fb      	b.n	80002d8 <task2_handler+0x4>
 80002e0:	08001838 	.word	0x08001838

080002e4 <task3_handler>:
	}
}
void task3_handler(void){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	while(1){
		LED12_TOGGLE;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <task3_handler+0x20>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <task3_handler+0x20>)
 80002ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80002f2:	60d3      	str	r3, [r2, #12]
		task_delay(1000);
 80002f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f8:	f000 f95c 	bl	80005b4 <task_delay>
		printf("oke");
 80002fc:	4802      	ldr	r0, [pc, #8]	; (8000308 <task3_handler+0x24>)
 80002fe:	f000 fa45 	bl	800078c <iprintf>
		LED12_TOGGLE;
 8000302:	e7f1      	b.n	80002e8 <task3_handler+0x4>
 8000304:	40010c00 	.word	0x40010c00
 8000308:	08001838 	.word	0x08001838

0800030c <task4_handler>:
	}
}
void task4_handler(void){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	while(1){
		printf("oke");
 8000310:	4801      	ldr	r0, [pc, #4]	; (8000318 <task4_handler+0xc>)
 8000312:	f000 fa3b 	bl	800078c <iprintf>
 8000316:	e7fb      	b.n	8000310 <task4_handler+0x4>
 8000318:	08001838 	.word	0x08001838

0800031c <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz){
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	SysTick->LOAD |= ((SYSTICK_TIM_CLK / TICK_HZ) - 1) & 0x00FFFFFF;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <init_systick_timer+0x30>)
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	4a08      	ldr	r2, [pc, #32]	; (800034c <init_systick_timer+0x30>)
 800032a:	f443 53f9 	orr.w	r3, r3, #7968	; 0x1f20
 800032e:	f043 031f 	orr.w	r3, r3, #31
 8000332:	6053      	str	r3, [r2, #4]
	SysTick->CTRL |= (7 << 0);
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <init_systick_timer+0x30>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <init_systick_timer+0x30>)
 800033a:	f043 0307 	orr.w	r3, r3, #7
 800033e:	6013      	str	r3, [r2, #0]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	e000e010 	.word	0xe000e010

08000350 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack){
 8000350:	4603      	mov	r3, r0
	__asm volatile ("MSR MSP, %0": : "r"(sched_top_of_stack));
 8000352:	f383 8808 	msr	MSP, r3
	__asm volatile ("BX LR");
 8000356:	4770      	bx	lr
}
 8000358:	bf00      	nop
	...

0800035c <init_task_stack>:

void init_task_stack(void){
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0

	user_task[0].curent_state = TASK_RUNNING_STATE;
 8000362:	4b3b      	ldr	r3, [pc, #236]	; (8000450 <init_task_stack+0xf4>)
 8000364:	2200      	movs	r2, #0
 8000366:	721a      	strb	r2, [r3, #8]
	user_task[1].curent_state = TASK_RUNNING_STATE;
 8000368:	4b39      	ldr	r3, [pc, #228]	; (8000450 <init_task_stack+0xf4>)
 800036a:	2200      	movs	r2, #0
 800036c:	761a      	strb	r2, [r3, #24]
	user_task[2].curent_state = TASK_RUNNING_STATE;
 800036e:	4b38      	ldr	r3, [pc, #224]	; (8000450 <init_task_stack+0xf4>)
 8000370:	2200      	movs	r2, #0
 8000372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_task[3].curent_state = TASK_RUNNING_STATE;
 8000376:	4b36      	ldr	r3, [pc, #216]	; (8000450 <init_task_stack+0xf4>)
 8000378:	2200      	movs	r2, #0
 800037a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_task[4].curent_state = TASK_RUNNING_STATE;
 800037e:	4b34      	ldr	r3, [pc, #208]	; (8000450 <init_task_stack+0xf4>)
 8000380:	2200      	movs	r2, #0
 8000382:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_task[0].psp_value = IDLE_STACK_START;
 8000386:	4b32      	ldr	r3, [pc, #200]	; (8000450 <init_task_stack+0xf4>)
 8000388:	4a32      	ldr	r2, [pc, #200]	; (8000454 <init_task_stack+0xf8>)
 800038a:	601a      	str	r2, [r3, #0]
	user_task[1].psp_value = T1_STACK_START;
 800038c:	4b30      	ldr	r3, [pc, #192]	; (8000450 <init_task_stack+0xf4>)
 800038e:	4a32      	ldr	r2, [pc, #200]	; (8000458 <init_task_stack+0xfc>)
 8000390:	611a      	str	r2, [r3, #16]
	user_task[2].psp_value = T2_STACK_START;
 8000392:	4b2f      	ldr	r3, [pc, #188]	; (8000450 <init_task_stack+0xf4>)
 8000394:	4a31      	ldr	r2, [pc, #196]	; (800045c <init_task_stack+0x100>)
 8000396:	621a      	str	r2, [r3, #32]
	user_task[3].psp_value = T3_STACK_START;
 8000398:	4b2d      	ldr	r3, [pc, #180]	; (8000450 <init_task_stack+0xf4>)
 800039a:	4a31      	ldr	r2, [pc, #196]	; (8000460 <init_task_stack+0x104>)
 800039c:	631a      	str	r2, [r3, #48]	; 0x30
	user_task[4].psp_value = T4_STACK_START;
 800039e:	4b2c      	ldr	r3, [pc, #176]	; (8000450 <init_task_stack+0xf4>)
 80003a0:	4a30      	ldr	r2, [pc, #192]	; (8000464 <init_task_stack+0x108>)
 80003a2:	641a      	str	r2, [r3, #64]	; 0x40

	user_task[0].task_handler = idle_task;
 80003a4:	4b2a      	ldr	r3, [pc, #168]	; (8000450 <init_task_stack+0xf4>)
 80003a6:	4a30      	ldr	r2, [pc, #192]	; (8000468 <init_task_stack+0x10c>)
 80003a8:	60da      	str	r2, [r3, #12]
	user_task[1].task_handler = task1_handler;
 80003aa:	4b29      	ldr	r3, [pc, #164]	; (8000450 <init_task_stack+0xf4>)
 80003ac:	4a2f      	ldr	r2, [pc, #188]	; (800046c <init_task_stack+0x110>)
 80003ae:	61da      	str	r2, [r3, #28]
	user_task[2].task_handler = task2_handler;
 80003b0:	4b27      	ldr	r3, [pc, #156]	; (8000450 <init_task_stack+0xf4>)
 80003b2:	4a2f      	ldr	r2, [pc, #188]	; (8000470 <init_task_stack+0x114>)
 80003b4:	62da      	str	r2, [r3, #44]	; 0x2c
	user_task[3].task_handler = task3_handler;
 80003b6:	4b26      	ldr	r3, [pc, #152]	; (8000450 <init_task_stack+0xf4>)
 80003b8:	4a2e      	ldr	r2, [pc, #184]	; (8000474 <init_task_stack+0x118>)
 80003ba:	63da      	str	r2, [r3, #60]	; 0x3c
	user_task[4].task_handler = task4_handler;
 80003bc:	4b24      	ldr	r3, [pc, #144]	; (8000450 <init_task_stack+0xf4>)
 80003be:	4a2e      	ldr	r2, [pc, #184]	; (8000478 <init_task_stack+0x11c>)
 80003c0:	64da      	str	r2, [r3, #76]	; 0x4c

	uint32_t *pPSP;
	for(int i = 0; i < MAX_TASK; i++){
 80003c2:	2300      	movs	r3, #0
 80003c4:	60bb      	str	r3, [r7, #8]
 80003c6:	e039      	b.n	800043c <init_task_stack+0xe0>
		pPSP = (uint32_t*) user_task[i].psp_value;
 80003c8:	4a21      	ldr	r2, [pc, #132]	; (8000450 <init_task_stack+0xf4>)
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	011b      	lsls	r3, r3, #4
 80003ce:	4413      	add	r3, r2
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	60fb      	str	r3, [r7, #12]
		pPSP--;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	3b04      	subs	r3, #4
 80003d8:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003e0:	601a      	str	r2, [r3, #0]
		pPSP--;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	3b04      	subs	r3, #4
 80003e6:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_task[i].task_handler;
 80003e8:	4a19      	ldr	r2, [pc, #100]	; (8000450 <init_task_stack+0xf4>)
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	011b      	lsls	r3, r3, #4
 80003ee:	4413      	add	r3, r2
 80003f0:	330c      	adds	r3, #12
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	601a      	str	r2, [r3, #0]
		pPSP--;
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	3b04      	subs	r3, #4
 80003fe:	60fb      	str	r3, [r7, #12]
		*pPSP |= 0xFFFFFFFD;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f063 0202 	orn	r2, r3, #2
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	601a      	str	r2, [r3, #0]
		for (int j = 0; j<13; j++){
 800040c:	2300      	movs	r3, #0
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	e008      	b.n	8000424 <init_task_stack+0xc8>
			pPSP--;
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	3b04      	subs	r3, #4
 8000416:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j<13; j++){
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	3301      	adds	r3, #1
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2b0c      	cmp	r3, #12
 8000428:	ddf3      	ble.n	8000412 <init_task_stack+0xb6>

		}
		user_task[i].psp_value = (uint32_t)pPSP;
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	4908      	ldr	r1, [pc, #32]	; (8000450 <init_task_stack+0xf4>)
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	011b      	lsls	r3, r3, #4
 8000432:	440b      	add	r3, r1
 8000434:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_TASK; i++){
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	3301      	adds	r3, #1
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	2b04      	cmp	r3, #4
 8000440:	ddc2      	ble.n	80003c8 <init_task_stack+0x6c>
	}
}
 8000442:	bf00      	nop
 8000444:	bf00      	nop
 8000446:	3714      	adds	r7, #20
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	20000088 	.word	0x20000088
 8000454:	20004800 	.word	0x20004800
 8000458:	20005000 	.word	0x20005000
 800045c:	20004e00 	.word	0x20004e00
 8000460:	20004c00 	.word	0x20004c00
 8000464:	20004a00 	.word	0x20004a00
 8000468:	080002bd 	.word	0x080002bd
 800046c:	080002c5 	.word	0x080002c5
 8000470:	080002d5 	.word	0x080002d5
 8000474:	080002e5 	.word	0x080002e5
 8000478:	0800030d 	.word	0x0800030d

0800047c <enable_rpocessor_faults>:

void enable_rpocessor_faults(void){
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
	SCB->SHCSR |= (7 << 16);
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <enable_rpocessor_faults+0x18>)
 8000482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000484:	4a03      	ldr	r2, [pc, #12]	; (8000494 <enable_rpocessor_faults+0x18>)
 8000486:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800048a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	e000ed00 	.word	0xe000ed00

08000498 <HardFault_Handler>:

void HardFault_Handler(void){
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	printf("HardFault_Handler\n");
 800049c:	4801      	ldr	r0, [pc, #4]	; (80004a4 <HardFault_Handler+0xc>)
 800049e:	f000 f9fb 	bl	8000898 <puts>
	while(1);
 80004a2:	e7fe      	b.n	80004a2 <HardFault_Handler+0xa>
 80004a4:	0800183c 	.word	0x0800183c

080004a8 <MemManage_Handler>:
}

void MemManage_Handler(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	printf("MemManage_Handler\n");
 80004ac:	4801      	ldr	r0, [pc, #4]	; (80004b4 <MemManage_Handler+0xc>)
 80004ae:	f000 f9f3 	bl	8000898 <puts>
	while(1);
 80004b2:	e7fe      	b.n	80004b2 <MemManage_Handler+0xa>
 80004b4:	08001850 	.word	0x08001850

080004b8 <BusFault_Handler>:
}

void BusFault_Handler(){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	printf("BusFault_Handler\n");
 80004bc:	4801      	ldr	r0, [pc, #4]	; (80004c4 <BusFault_Handler+0xc>)
 80004be:	f000 f9eb 	bl	8000898 <puts>
	while(1);
 80004c2:	e7fe      	b.n	80004c2 <BusFault_Handler+0xa>
 80004c4:	08001864 	.word	0x08001864

080004c8 <get_psp_value>:
}

uint32_t get_psp_value(void){
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	return user_task[curent_task].psp_value;
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <get_psp_value+0x18>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <get_psp_value+0x1c>)
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	4413      	add	r3, r2
 80004d6:	681b      	ldr	r3, [r3, #0]
}
 80004d8:	4618      	mov	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	20000006 	.word	0x20000006
 80004e4:	20000088 	.word	0x20000088

080004e8 <save_psp_value>:

void save_psp_value(uint32_t curent_psp_value){
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	user_task[curent_task].psp_value = curent_psp_value;
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <save_psp_value+0x20>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4a05      	ldr	r2, [pc, #20]	; (800050c <save_psp_value+0x24>)
 80004f6:	011b      	lsls	r3, r3, #4
 80004f8:	4413      	add	r3, r2
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	20000006 	.word	0x20000006
 800050c:	20000088 	.word	0x20000088

08000510 <update_next_task>:

void update_next_task(void){
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
	int state = TASK_BLOCK_STATE;
 8000516:	2301      	movs	r3, #1
 8000518:	607b      	str	r3, [r7, #4]
	for (int i =0; i < MAX_TASK; i++){
 800051a:	2300      	movs	r3, #0
 800051c:	603b      	str	r3, [r7, #0]
 800051e:	e024      	b.n	800056a <update_next_task+0x5a>
		curent_task ++;
 8000520:	4b1a      	ldr	r3, [pc, #104]	; (800058c <update_next_task+0x7c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b18      	ldr	r3, [pc, #96]	; (800058c <update_next_task+0x7c>)
 800052a:	701a      	strb	r2, [r3, #0]
		curent_task %= MAX_TASK;
 800052c:	4b17      	ldr	r3, [pc, #92]	; (800058c <update_next_task+0x7c>)
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <update_next_task+0x80>)
 8000532:	fba3 1302 	umull	r1, r3, r3, r2
 8000536:	0899      	lsrs	r1, r3, #2
 8000538:	460b      	mov	r3, r1
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	440b      	add	r3, r1
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <update_next_task+0x7c>)
 8000544:	701a      	strb	r2, [r3, #0]
		state = user_task[curent_task].curent_state;
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <update_next_task+0x7c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <update_next_task+0x84>)
 800054c:	011b      	lsls	r3, r3, #4
 800054e:	4413      	add	r3, r2
 8000550:	3308      	adds	r3, #8
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	607b      	str	r3, [r7, #4]
		if((state == TASK_RUNNING_STATE) && (curent_task != 0)){
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d103      	bne.n	8000564 <update_next_task+0x54>
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <update_next_task+0x7c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d106      	bne.n	8000572 <update_next_task+0x62>
	for (int i =0; i < MAX_TASK; i++){
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b04      	cmp	r3, #4
 800056e:	ddd7      	ble.n	8000520 <update_next_task+0x10>
 8000570:	e000      	b.n	8000574 <update_next_task+0x64>
			break;
 8000572:	bf00      	nop
		}
	}
	if (state != TASK_RUNNING_STATE){
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <update_next_task+0x70>
		curent_task = 0;
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <update_next_task+0x7c>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
	}
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000006 	.word	0x20000006
 8000590:	cccccccd 	.word	0xcccccccd
 8000594:	20000088 	.word	0x20000088

08000598 <swich_sp_to_psp>:

__attribute__((naked)) void swich_sp_to_psp(void){
	__asm volatile ("PUSH {LR}");
 8000598:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 800059a:	f7ff ff95 	bl	80004c8 <get_psp_value>
	__asm volatile ("MSR PSP, R0");
 800059e:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");
 80005a2:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile ("MOV R0, #0x02");
 80005a6:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 80005aa:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 80005ae:	4770      	bx	lr

}
 80005b0:	bf00      	nop
	...

080005b4 <task_delay>:


void task_delay(uint32_t tick_count){
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	DISABLE_IRQ();
 80005bc:	f04f 0001 	mov.w	r0, #1
 80005c0:	f380 8810 	msr	PRIMASK, r0
	g_tick_count = 0;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <task_delay+0x5c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
	if(curent_task){
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <task_delay+0x60>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d015      	beq.n	80005fe <task_delay+0x4a>
		user_task[curent_task].block_count = tick_count;
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <task_delay+0x60>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4a10      	ldr	r2, [pc, #64]	; (8000618 <task_delay+0x64>)
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	4413      	add	r3, r2
 80005dc:	3304      	adds	r3, #4
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
		user_task[curent_task].curent_state = TASK_BLOCK_STATE;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <task_delay+0x60>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <task_delay+0x64>)
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	4413      	add	r3, r2
 80005ec:	3308      	adds	r3, #8
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <task_delay+0x68>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	4a09      	ldr	r2, [pc, #36]	; (800061c <task_delay+0x68>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fc:	6053      	str	r3, [r2, #4]
	}
	ENABLE_IRQ();
 80005fe:	f04f 0000 	mov.w	r0, #0
 8000602:	f380 8810 	msr	PRIMASK, r0
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	200000d8 	.word	0x200000d8
 8000614:	20000006 	.word	0x20000006
 8000618:	20000088 	.word	0x20000088
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void){
    // Save the current task's context
    __asm volatile ("MRS R0, PSP");
 8000620:	f3ef 8009 	mrs	r0, PSP
    __asm volatile ("STMDB R0!, {R4-R11}");
 8000624:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    __asm volatile ("PUSH {LR}");
 8000628:	b500      	push	{lr}
    __asm volatile ("BL save_psp_value");
 800062a:	f7ff ff5d 	bl	80004e8 <save_psp_value>
    __asm volatile ("BL update_next_task");
 800062e:	f7ff ff6f 	bl	8000510 <update_next_task>

    // Load the next task's context
    __asm volatile ("BL get_psp_value");
 8000632:	f7ff ff49 	bl	80004c8 <get_psp_value>
    __asm volatile ("LDMIA R0!, {R4-R11}");
 8000636:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    __asm volatile ("MSR PSP, R0");
 800063a:	f380 8809 	msr	PSP, r0

    __asm volatile ("POP {LR}");
 800063e:	f85d eb04 	ldr.w	lr, [sp], #4
    __asm volatile ("BX LR");
 8000642:	4770      	bx	lr
}
 8000644:	bf00      	nop
	...

08000648 <unblock_task>:

void unblock_task(void){
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
	for (int i = 1; i < MAX_TASK; i++){
 800064e:	2301      	movs	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	e01b      	b.n	800068c <unblock_task+0x44>
		if (user_task[i].curent_state != TASK_RUNNING_STATE){
 8000654:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <unblock_task+0x58>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	011b      	lsls	r3, r3, #4
 800065a:	4413      	add	r3, r2
 800065c:	3308      	adds	r3, #8
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d010      	beq.n	8000686 <unblock_task+0x3e>
			if(user_task[i].block_count == g_tick_count){
 8000664:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <unblock_task+0x58>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	4413      	add	r3, r2
 800066c:	3304      	adds	r3, #4
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <unblock_task+0x5c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	429a      	cmp	r2, r3
 8000676:	d106      	bne.n	8000686 <unblock_task+0x3e>
				user_task[i].curent_state = TASK_RUNNING_STATE;
 8000678:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <unblock_task+0x58>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	011b      	lsls	r3, r3, #4
 800067e:	4413      	add	r3, r2
 8000680:	3308      	adds	r3, #8
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < MAX_TASK; i++){
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3301      	adds	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b04      	cmp	r3, #4
 8000690:	dde0      	ble.n	8000654 <unblock_task+0xc>
			}
		}
	}
}
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000088 	.word	0x20000088
 80006a4:	200000d8 	.word	0x200000d8

080006a8 <SysTick_Handler>:

void SysTick_Handler(){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	g_tick_count++;
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <SysTick_Handler+0x24>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a06      	ldr	r2, [pc, #24]	; (80006cc <SysTick_Handler+0x24>)
 80006b4:	6013      	str	r3, [r2, #0]
	unblock_task();
 80006b6:	f7ff ffc7 	bl	8000648 <unblock_task>
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <SysTick_Handler+0x28>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <SysTick_Handler+0x28>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6053      	str	r3, [r2, #4]
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000d8 	.word	0x200000d8
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e4:	f7ff fff6 	bl	80006d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <LoopForever+0x6>)
  ldr r1, =_edata
 80006ea:	490d      	ldr	r1, [pc, #52]	; (8000720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <LoopForever+0xe>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000700:	4c0a      	ldr	r4, [pc, #40]	; (800072c <LoopForever+0x16>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800070e:	f000 f811 	bl	8000734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000712:	f7ff fdaf 	bl	8000274 <main>

08000716 <LoopForever>:

LoopForever:
  b LoopForever
 8000716:	e7fe      	b.n	8000716 <LoopForever>
  ldr   r0, =_estack
 8000718:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000724:	08001918 	.word	0x08001918
  ldr r2, =_sbss
 8000728:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800072c:	200000f0 	.word	0x200000f0

08000730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_2_IRQHandler>
	...

08000734 <__libc_init_array>:
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	2600      	movs	r6, #0
 8000738:	4d0c      	ldr	r5, [pc, #48]	; (800076c <__libc_init_array+0x38>)
 800073a:	4c0d      	ldr	r4, [pc, #52]	; (8000770 <__libc_init_array+0x3c>)
 800073c:	1b64      	subs	r4, r4, r5
 800073e:	10a4      	asrs	r4, r4, #2
 8000740:	42a6      	cmp	r6, r4
 8000742:	d109      	bne.n	8000758 <__libc_init_array+0x24>
 8000744:	f001 f86a 	bl	800181c <_init>
 8000748:	2600      	movs	r6, #0
 800074a:	4d0a      	ldr	r5, [pc, #40]	; (8000774 <__libc_init_array+0x40>)
 800074c:	4c0a      	ldr	r4, [pc, #40]	; (8000778 <__libc_init_array+0x44>)
 800074e:	1b64      	subs	r4, r4, r5
 8000750:	10a4      	asrs	r4, r4, #2
 8000752:	42a6      	cmp	r6, r4
 8000754:	d105      	bne.n	8000762 <__libc_init_array+0x2e>
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f855 3b04 	ldr.w	r3, [r5], #4
 800075c:	4798      	blx	r3
 800075e:	3601      	adds	r6, #1
 8000760:	e7ee      	b.n	8000740 <__libc_init_array+0xc>
 8000762:	f855 3b04 	ldr.w	r3, [r5], #4
 8000766:	4798      	blx	r3
 8000768:	3601      	adds	r6, #1
 800076a:	e7f2      	b.n	8000752 <__libc_init_array+0x1e>
 800076c:	08001910 	.word	0x08001910
 8000770:	08001910 	.word	0x08001910
 8000774:	08001910 	.word	0x08001910
 8000778:	08001914 	.word	0x08001914

0800077c <memset>:
 800077c:	4603      	mov	r3, r0
 800077e:	4402      	add	r2, r0
 8000780:	4293      	cmp	r3, r2
 8000782:	d100      	bne.n	8000786 <memset+0xa>
 8000784:	4770      	bx	lr
 8000786:	f803 1b01 	strb.w	r1, [r3], #1
 800078a:	e7f9      	b.n	8000780 <memset+0x4>

0800078c <iprintf>:
 800078c:	b40f      	push	{r0, r1, r2, r3}
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <iprintf+0x2c>)
 8000790:	b513      	push	{r0, r1, r4, lr}
 8000792:	681c      	ldr	r4, [r3, #0]
 8000794:	b124      	cbz	r4, 80007a0 <iprintf+0x14>
 8000796:	69a3      	ldr	r3, [r4, #24]
 8000798:	b913      	cbnz	r3, 80007a0 <iprintf+0x14>
 800079a:	4620      	mov	r0, r4
 800079c:	f000 fa5a 	bl	8000c54 <__sinit>
 80007a0:	ab05      	add	r3, sp, #20
 80007a2:	4620      	mov	r0, r4
 80007a4:	9a04      	ldr	r2, [sp, #16]
 80007a6:	68a1      	ldr	r1, [r4, #8]
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	f000 fc5d 	bl	8001068 <_vfiprintf_r>
 80007ae:	b002      	add	sp, #8
 80007b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007b4:	b004      	add	sp, #16
 80007b6:	4770      	bx	lr
 80007b8:	20000008 	.word	0x20000008

080007bc <_puts_r>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	460e      	mov	r6, r1
 80007c0:	4605      	mov	r5, r0
 80007c2:	b118      	cbz	r0, 80007cc <_puts_r+0x10>
 80007c4:	6983      	ldr	r3, [r0, #24]
 80007c6:	b90b      	cbnz	r3, 80007cc <_puts_r+0x10>
 80007c8:	f000 fa44 	bl	8000c54 <__sinit>
 80007cc:	69ab      	ldr	r3, [r5, #24]
 80007ce:	68ac      	ldr	r4, [r5, #8]
 80007d0:	b913      	cbnz	r3, 80007d8 <_puts_r+0x1c>
 80007d2:	4628      	mov	r0, r5
 80007d4:	f000 fa3e 	bl	8000c54 <__sinit>
 80007d8:	4b2c      	ldr	r3, [pc, #176]	; (800088c <_puts_r+0xd0>)
 80007da:	429c      	cmp	r4, r3
 80007dc:	d120      	bne.n	8000820 <_puts_r+0x64>
 80007de:	686c      	ldr	r4, [r5, #4]
 80007e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007e2:	07db      	lsls	r3, r3, #31
 80007e4:	d405      	bmi.n	80007f2 <_puts_r+0x36>
 80007e6:	89a3      	ldrh	r3, [r4, #12]
 80007e8:	0598      	lsls	r0, r3, #22
 80007ea:	d402      	bmi.n	80007f2 <_puts_r+0x36>
 80007ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007ee:	f000 facf 	bl	8000d90 <__retarget_lock_acquire_recursive>
 80007f2:	89a3      	ldrh	r3, [r4, #12]
 80007f4:	0719      	lsls	r1, r3, #28
 80007f6:	d51d      	bpl.n	8000834 <_puts_r+0x78>
 80007f8:	6923      	ldr	r3, [r4, #16]
 80007fa:	b1db      	cbz	r3, 8000834 <_puts_r+0x78>
 80007fc:	3e01      	subs	r6, #1
 80007fe:	68a3      	ldr	r3, [r4, #8]
 8000800:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000804:	3b01      	subs	r3, #1
 8000806:	60a3      	str	r3, [r4, #8]
 8000808:	bb39      	cbnz	r1, 800085a <_puts_r+0x9e>
 800080a:	2b00      	cmp	r3, #0
 800080c:	da38      	bge.n	8000880 <_puts_r+0xc4>
 800080e:	4622      	mov	r2, r4
 8000810:	210a      	movs	r1, #10
 8000812:	4628      	mov	r0, r5
 8000814:	f000 f848 	bl	80008a8 <__swbuf_r>
 8000818:	3001      	adds	r0, #1
 800081a:	d011      	beq.n	8000840 <_puts_r+0x84>
 800081c:	250a      	movs	r5, #10
 800081e:	e011      	b.n	8000844 <_puts_r+0x88>
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <_puts_r+0xd4>)
 8000822:	429c      	cmp	r4, r3
 8000824:	d101      	bne.n	800082a <_puts_r+0x6e>
 8000826:	68ac      	ldr	r4, [r5, #8]
 8000828:	e7da      	b.n	80007e0 <_puts_r+0x24>
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <_puts_r+0xd8>)
 800082c:	429c      	cmp	r4, r3
 800082e:	bf08      	it	eq
 8000830:	68ec      	ldreq	r4, [r5, #12]
 8000832:	e7d5      	b.n	80007e0 <_puts_r+0x24>
 8000834:	4621      	mov	r1, r4
 8000836:	4628      	mov	r0, r5
 8000838:	f000 f888 	bl	800094c <__swsetup_r>
 800083c:	2800      	cmp	r0, #0
 800083e:	d0dd      	beq.n	80007fc <_puts_r+0x40>
 8000840:	f04f 35ff 	mov.w	r5, #4294967295
 8000844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000846:	07da      	lsls	r2, r3, #31
 8000848:	d405      	bmi.n	8000856 <_puts_r+0x9a>
 800084a:	89a3      	ldrh	r3, [r4, #12]
 800084c:	059b      	lsls	r3, r3, #22
 800084e:	d402      	bmi.n	8000856 <_puts_r+0x9a>
 8000850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000852:	f000 fa9e 	bl	8000d92 <__retarget_lock_release_recursive>
 8000856:	4628      	mov	r0, r5
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	2b00      	cmp	r3, #0
 800085c:	da04      	bge.n	8000868 <_puts_r+0xac>
 800085e:	69a2      	ldr	r2, [r4, #24]
 8000860:	429a      	cmp	r2, r3
 8000862:	dc06      	bgt.n	8000872 <_puts_r+0xb6>
 8000864:	290a      	cmp	r1, #10
 8000866:	d004      	beq.n	8000872 <_puts_r+0xb6>
 8000868:	6823      	ldr	r3, [r4, #0]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	6022      	str	r2, [r4, #0]
 800086e:	7019      	strb	r1, [r3, #0]
 8000870:	e7c5      	b.n	80007fe <_puts_r+0x42>
 8000872:	4622      	mov	r2, r4
 8000874:	4628      	mov	r0, r5
 8000876:	f000 f817 	bl	80008a8 <__swbuf_r>
 800087a:	3001      	adds	r0, #1
 800087c:	d1bf      	bne.n	80007fe <_puts_r+0x42>
 800087e:	e7df      	b.n	8000840 <_puts_r+0x84>
 8000880:	250a      	movs	r5, #10
 8000882:	6823      	ldr	r3, [r4, #0]
 8000884:	1c5a      	adds	r2, r3, #1
 8000886:	6022      	str	r2, [r4, #0]
 8000888:	701d      	strb	r5, [r3, #0]
 800088a:	e7db      	b.n	8000844 <_puts_r+0x88>
 800088c:	0800189c 	.word	0x0800189c
 8000890:	080018bc 	.word	0x080018bc
 8000894:	0800187c 	.word	0x0800187c

08000898 <puts>:
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <puts+0xc>)
 800089a:	4601      	mov	r1, r0
 800089c:	6818      	ldr	r0, [r3, #0]
 800089e:	f7ff bf8d 	b.w	80007bc <_puts_r>
 80008a2:	bf00      	nop
 80008a4:	20000008 	.word	0x20000008

080008a8 <__swbuf_r>:
 80008a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008aa:	460e      	mov	r6, r1
 80008ac:	4614      	mov	r4, r2
 80008ae:	4605      	mov	r5, r0
 80008b0:	b118      	cbz	r0, 80008ba <__swbuf_r+0x12>
 80008b2:	6983      	ldr	r3, [r0, #24]
 80008b4:	b90b      	cbnz	r3, 80008ba <__swbuf_r+0x12>
 80008b6:	f000 f9cd 	bl	8000c54 <__sinit>
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <__swbuf_r+0x98>)
 80008bc:	429c      	cmp	r4, r3
 80008be:	d12b      	bne.n	8000918 <__swbuf_r+0x70>
 80008c0:	686c      	ldr	r4, [r5, #4]
 80008c2:	69a3      	ldr	r3, [r4, #24]
 80008c4:	60a3      	str	r3, [r4, #8]
 80008c6:	89a3      	ldrh	r3, [r4, #12]
 80008c8:	071a      	lsls	r2, r3, #28
 80008ca:	d52f      	bpl.n	800092c <__swbuf_r+0x84>
 80008cc:	6923      	ldr	r3, [r4, #16]
 80008ce:	b36b      	cbz	r3, 800092c <__swbuf_r+0x84>
 80008d0:	6923      	ldr	r3, [r4, #16]
 80008d2:	6820      	ldr	r0, [r4, #0]
 80008d4:	b2f6      	uxtb	r6, r6
 80008d6:	1ac0      	subs	r0, r0, r3
 80008d8:	6963      	ldr	r3, [r4, #20]
 80008da:	4637      	mov	r7, r6
 80008dc:	4283      	cmp	r3, r0
 80008de:	dc04      	bgt.n	80008ea <__swbuf_r+0x42>
 80008e0:	4621      	mov	r1, r4
 80008e2:	4628      	mov	r0, r5
 80008e4:	f000 f922 	bl	8000b2c <_fflush_r>
 80008e8:	bb30      	cbnz	r0, 8000938 <__swbuf_r+0x90>
 80008ea:	68a3      	ldr	r3, [r4, #8]
 80008ec:	3001      	adds	r0, #1
 80008ee:	3b01      	subs	r3, #1
 80008f0:	60a3      	str	r3, [r4, #8]
 80008f2:	6823      	ldr	r3, [r4, #0]
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	6022      	str	r2, [r4, #0]
 80008f8:	701e      	strb	r6, [r3, #0]
 80008fa:	6963      	ldr	r3, [r4, #20]
 80008fc:	4283      	cmp	r3, r0
 80008fe:	d004      	beq.n	800090a <__swbuf_r+0x62>
 8000900:	89a3      	ldrh	r3, [r4, #12]
 8000902:	07db      	lsls	r3, r3, #31
 8000904:	d506      	bpl.n	8000914 <__swbuf_r+0x6c>
 8000906:	2e0a      	cmp	r6, #10
 8000908:	d104      	bne.n	8000914 <__swbuf_r+0x6c>
 800090a:	4621      	mov	r1, r4
 800090c:	4628      	mov	r0, r5
 800090e:	f000 f90d 	bl	8000b2c <_fflush_r>
 8000912:	b988      	cbnz	r0, 8000938 <__swbuf_r+0x90>
 8000914:	4638      	mov	r0, r7
 8000916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <__swbuf_r+0x9c>)
 800091a:	429c      	cmp	r4, r3
 800091c:	d101      	bne.n	8000922 <__swbuf_r+0x7a>
 800091e:	68ac      	ldr	r4, [r5, #8]
 8000920:	e7cf      	b.n	80008c2 <__swbuf_r+0x1a>
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <__swbuf_r+0xa0>)
 8000924:	429c      	cmp	r4, r3
 8000926:	bf08      	it	eq
 8000928:	68ec      	ldreq	r4, [r5, #12]
 800092a:	e7ca      	b.n	80008c2 <__swbuf_r+0x1a>
 800092c:	4621      	mov	r1, r4
 800092e:	4628      	mov	r0, r5
 8000930:	f000 f80c 	bl	800094c <__swsetup_r>
 8000934:	2800      	cmp	r0, #0
 8000936:	d0cb      	beq.n	80008d0 <__swbuf_r+0x28>
 8000938:	f04f 37ff 	mov.w	r7, #4294967295
 800093c:	e7ea      	b.n	8000914 <__swbuf_r+0x6c>
 800093e:	bf00      	nop
 8000940:	0800189c 	.word	0x0800189c
 8000944:	080018bc 	.word	0x080018bc
 8000948:	0800187c 	.word	0x0800187c

0800094c <__swsetup_r>:
 800094c:	4b32      	ldr	r3, [pc, #200]	; (8000a18 <__swsetup_r+0xcc>)
 800094e:	b570      	push	{r4, r5, r6, lr}
 8000950:	681d      	ldr	r5, [r3, #0]
 8000952:	4606      	mov	r6, r0
 8000954:	460c      	mov	r4, r1
 8000956:	b125      	cbz	r5, 8000962 <__swsetup_r+0x16>
 8000958:	69ab      	ldr	r3, [r5, #24]
 800095a:	b913      	cbnz	r3, 8000962 <__swsetup_r+0x16>
 800095c:	4628      	mov	r0, r5
 800095e:	f000 f979 	bl	8000c54 <__sinit>
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <__swsetup_r+0xd0>)
 8000964:	429c      	cmp	r4, r3
 8000966:	d10f      	bne.n	8000988 <__swsetup_r+0x3c>
 8000968:	686c      	ldr	r4, [r5, #4]
 800096a:	89a3      	ldrh	r3, [r4, #12]
 800096c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000970:	0719      	lsls	r1, r3, #28
 8000972:	d42c      	bmi.n	80009ce <__swsetup_r+0x82>
 8000974:	06dd      	lsls	r5, r3, #27
 8000976:	d411      	bmi.n	800099c <__swsetup_r+0x50>
 8000978:	2309      	movs	r3, #9
 800097a:	6033      	str	r3, [r6, #0]
 800097c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	81a3      	strh	r3, [r4, #12]
 8000986:	e03e      	b.n	8000a06 <__swsetup_r+0xba>
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <__swsetup_r+0xd4>)
 800098a:	429c      	cmp	r4, r3
 800098c:	d101      	bne.n	8000992 <__swsetup_r+0x46>
 800098e:	68ac      	ldr	r4, [r5, #8]
 8000990:	e7eb      	b.n	800096a <__swsetup_r+0x1e>
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <__swsetup_r+0xd8>)
 8000994:	429c      	cmp	r4, r3
 8000996:	bf08      	it	eq
 8000998:	68ec      	ldreq	r4, [r5, #12]
 800099a:	e7e6      	b.n	800096a <__swsetup_r+0x1e>
 800099c:	0758      	lsls	r0, r3, #29
 800099e:	d512      	bpl.n	80009c6 <__swsetup_r+0x7a>
 80009a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009a2:	b141      	cbz	r1, 80009b6 <__swsetup_r+0x6a>
 80009a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009a8:	4299      	cmp	r1, r3
 80009aa:	d002      	beq.n	80009b2 <__swsetup_r+0x66>
 80009ac:	4630      	mov	r0, r6
 80009ae:	f000 fa57 	bl	8000e60 <_free_r>
 80009b2:	2300      	movs	r3, #0
 80009b4:	6363      	str	r3, [r4, #52]	; 0x34
 80009b6:	89a3      	ldrh	r3, [r4, #12]
 80009b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80009bc:	81a3      	strh	r3, [r4, #12]
 80009be:	2300      	movs	r3, #0
 80009c0:	6063      	str	r3, [r4, #4]
 80009c2:	6923      	ldr	r3, [r4, #16]
 80009c4:	6023      	str	r3, [r4, #0]
 80009c6:	89a3      	ldrh	r3, [r4, #12]
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	81a3      	strh	r3, [r4, #12]
 80009ce:	6923      	ldr	r3, [r4, #16]
 80009d0:	b94b      	cbnz	r3, 80009e6 <__swsetup_r+0x9a>
 80009d2:	89a3      	ldrh	r3, [r4, #12]
 80009d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80009d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009dc:	d003      	beq.n	80009e6 <__swsetup_r+0x9a>
 80009de:	4621      	mov	r1, r4
 80009e0:	4630      	mov	r0, r6
 80009e2:	f000 f9fd 	bl	8000de0 <__smakebuf_r>
 80009e6:	89a0      	ldrh	r0, [r4, #12]
 80009e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009ec:	f010 0301 	ands.w	r3, r0, #1
 80009f0:	d00a      	beq.n	8000a08 <__swsetup_r+0xbc>
 80009f2:	2300      	movs	r3, #0
 80009f4:	60a3      	str	r3, [r4, #8]
 80009f6:	6963      	ldr	r3, [r4, #20]
 80009f8:	425b      	negs	r3, r3
 80009fa:	61a3      	str	r3, [r4, #24]
 80009fc:	6923      	ldr	r3, [r4, #16]
 80009fe:	b943      	cbnz	r3, 8000a12 <__swsetup_r+0xc6>
 8000a00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a04:	d1ba      	bne.n	800097c <__swsetup_r+0x30>
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	0781      	lsls	r1, r0, #30
 8000a0a:	bf58      	it	pl
 8000a0c:	6963      	ldrpl	r3, [r4, #20]
 8000a0e:	60a3      	str	r3, [r4, #8]
 8000a10:	e7f4      	b.n	80009fc <__swsetup_r+0xb0>
 8000a12:	2000      	movs	r0, #0
 8000a14:	e7f7      	b.n	8000a06 <__swsetup_r+0xba>
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	0800189c 	.word	0x0800189c
 8000a20:	080018bc 	.word	0x080018bc
 8000a24:	0800187c 	.word	0x0800187c

08000a28 <__sflush_r>:
 8000a28:	898a      	ldrh	r2, [r1, #12]
 8000a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2c:	4605      	mov	r5, r0
 8000a2e:	0710      	lsls	r0, r2, #28
 8000a30:	460c      	mov	r4, r1
 8000a32:	d457      	bmi.n	8000ae4 <__sflush_r+0xbc>
 8000a34:	684b      	ldr	r3, [r1, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	dc04      	bgt.n	8000a44 <__sflush_r+0x1c>
 8000a3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	dc01      	bgt.n	8000a44 <__sflush_r+0x1c>
 8000a40:	2000      	movs	r0, #0
 8000a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a46:	2e00      	cmp	r6, #0
 8000a48:	d0fa      	beq.n	8000a40 <__sflush_r+0x18>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a50:	682f      	ldr	r7, [r5, #0]
 8000a52:	602b      	str	r3, [r5, #0]
 8000a54:	d032      	beq.n	8000abc <__sflush_r+0x94>
 8000a56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a58:	89a3      	ldrh	r3, [r4, #12]
 8000a5a:	075a      	lsls	r2, r3, #29
 8000a5c:	d505      	bpl.n	8000a6a <__sflush_r+0x42>
 8000a5e:	6863      	ldr	r3, [r4, #4]
 8000a60:	1ac0      	subs	r0, r0, r3
 8000a62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a64:	b10b      	cbz	r3, 8000a6a <__sflush_r+0x42>
 8000a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a68:	1ac0      	subs	r0, r0, r3
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a70:	4628      	mov	r0, r5
 8000a72:	6a21      	ldr	r1, [r4, #32]
 8000a74:	47b0      	blx	r6
 8000a76:	1c43      	adds	r3, r0, #1
 8000a78:	89a3      	ldrh	r3, [r4, #12]
 8000a7a:	d106      	bne.n	8000a8a <__sflush_r+0x62>
 8000a7c:	6829      	ldr	r1, [r5, #0]
 8000a7e:	291d      	cmp	r1, #29
 8000a80:	d82c      	bhi.n	8000adc <__sflush_r+0xb4>
 8000a82:	4a29      	ldr	r2, [pc, #164]	; (8000b28 <__sflush_r+0x100>)
 8000a84:	40ca      	lsrs	r2, r1
 8000a86:	07d6      	lsls	r6, r2, #31
 8000a88:	d528      	bpl.n	8000adc <__sflush_r+0xb4>
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	6062      	str	r2, [r4, #4]
 8000a8e:	6922      	ldr	r2, [r4, #16]
 8000a90:	04d9      	lsls	r1, r3, #19
 8000a92:	6022      	str	r2, [r4, #0]
 8000a94:	d504      	bpl.n	8000aa0 <__sflush_r+0x78>
 8000a96:	1c42      	adds	r2, r0, #1
 8000a98:	d101      	bne.n	8000a9e <__sflush_r+0x76>
 8000a9a:	682b      	ldr	r3, [r5, #0]
 8000a9c:	b903      	cbnz	r3, 8000aa0 <__sflush_r+0x78>
 8000a9e:	6560      	str	r0, [r4, #84]	; 0x54
 8000aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000aa2:	602f      	str	r7, [r5, #0]
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	d0cb      	beq.n	8000a40 <__sflush_r+0x18>
 8000aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d002      	beq.n	8000ab6 <__sflush_r+0x8e>
 8000ab0:	4628      	mov	r0, r5
 8000ab2:	f000 f9d5 	bl	8000e60 <_free_r>
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	6360      	str	r0, [r4, #52]	; 0x34
 8000aba:	e7c2      	b.n	8000a42 <__sflush_r+0x1a>
 8000abc:	6a21      	ldr	r1, [r4, #32]
 8000abe:	2301      	movs	r3, #1
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	47b0      	blx	r6
 8000ac4:	1c41      	adds	r1, r0, #1
 8000ac6:	d1c7      	bne.n	8000a58 <__sflush_r+0x30>
 8000ac8:	682b      	ldr	r3, [r5, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0c4      	beq.n	8000a58 <__sflush_r+0x30>
 8000ace:	2b1d      	cmp	r3, #29
 8000ad0:	d001      	beq.n	8000ad6 <__sflush_r+0xae>
 8000ad2:	2b16      	cmp	r3, #22
 8000ad4:	d101      	bne.n	8000ada <__sflush_r+0xb2>
 8000ad6:	602f      	str	r7, [r5, #0]
 8000ad8:	e7b2      	b.n	8000a40 <__sflush_r+0x18>
 8000ada:	89a3      	ldrh	r3, [r4, #12]
 8000adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae0:	81a3      	strh	r3, [r4, #12]
 8000ae2:	e7ae      	b.n	8000a42 <__sflush_r+0x1a>
 8000ae4:	690f      	ldr	r7, [r1, #16]
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d0aa      	beq.n	8000a40 <__sflush_r+0x18>
 8000aea:	0793      	lsls	r3, r2, #30
 8000aec:	bf18      	it	ne
 8000aee:	2300      	movne	r3, #0
 8000af0:	680e      	ldr	r6, [r1, #0]
 8000af2:	bf08      	it	eq
 8000af4:	694b      	ldreq	r3, [r1, #20]
 8000af6:	1bf6      	subs	r6, r6, r7
 8000af8:	600f      	str	r7, [r1, #0]
 8000afa:	608b      	str	r3, [r1, #8]
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	dd9f      	ble.n	8000a40 <__sflush_r+0x18>
 8000b00:	4633      	mov	r3, r6
 8000b02:	463a      	mov	r2, r7
 8000b04:	4628      	mov	r0, r5
 8000b06:	6a21      	ldr	r1, [r4, #32]
 8000b08:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000b0c:	47e0      	blx	ip
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	dc06      	bgt.n	8000b20 <__sflush_r+0xf8>
 8000b12:	89a3      	ldrh	r3, [r4, #12]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1c:	81a3      	strh	r3, [r4, #12]
 8000b1e:	e790      	b.n	8000a42 <__sflush_r+0x1a>
 8000b20:	4407      	add	r7, r0
 8000b22:	1a36      	subs	r6, r6, r0
 8000b24:	e7ea      	b.n	8000afc <__sflush_r+0xd4>
 8000b26:	bf00      	nop
 8000b28:	20400001 	.word	0x20400001

08000b2c <_fflush_r>:
 8000b2c:	b538      	push	{r3, r4, r5, lr}
 8000b2e:	690b      	ldr	r3, [r1, #16]
 8000b30:	4605      	mov	r5, r0
 8000b32:	460c      	mov	r4, r1
 8000b34:	b913      	cbnz	r3, 8000b3c <_fflush_r+0x10>
 8000b36:	2500      	movs	r5, #0
 8000b38:	4628      	mov	r0, r5
 8000b3a:	bd38      	pop	{r3, r4, r5, pc}
 8000b3c:	b118      	cbz	r0, 8000b46 <_fflush_r+0x1a>
 8000b3e:	6983      	ldr	r3, [r0, #24]
 8000b40:	b90b      	cbnz	r3, 8000b46 <_fflush_r+0x1a>
 8000b42:	f000 f887 	bl	8000c54 <__sinit>
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <_fflush_r+0x6c>)
 8000b48:	429c      	cmp	r4, r3
 8000b4a:	d11b      	bne.n	8000b84 <_fflush_r+0x58>
 8000b4c:	686c      	ldr	r4, [r5, #4]
 8000b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0ef      	beq.n	8000b36 <_fflush_r+0xa>
 8000b56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b58:	07d0      	lsls	r0, r2, #31
 8000b5a:	d404      	bmi.n	8000b66 <_fflush_r+0x3a>
 8000b5c:	0599      	lsls	r1, r3, #22
 8000b5e:	d402      	bmi.n	8000b66 <_fflush_r+0x3a>
 8000b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b62:	f000 f915 	bl	8000d90 <__retarget_lock_acquire_recursive>
 8000b66:	4628      	mov	r0, r5
 8000b68:	4621      	mov	r1, r4
 8000b6a:	f7ff ff5d 	bl	8000a28 <__sflush_r>
 8000b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b70:	4605      	mov	r5, r0
 8000b72:	07da      	lsls	r2, r3, #31
 8000b74:	d4e0      	bmi.n	8000b38 <_fflush_r+0xc>
 8000b76:	89a3      	ldrh	r3, [r4, #12]
 8000b78:	059b      	lsls	r3, r3, #22
 8000b7a:	d4dd      	bmi.n	8000b38 <_fflush_r+0xc>
 8000b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b7e:	f000 f908 	bl	8000d92 <__retarget_lock_release_recursive>
 8000b82:	e7d9      	b.n	8000b38 <_fflush_r+0xc>
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <_fflush_r+0x70>)
 8000b86:	429c      	cmp	r4, r3
 8000b88:	d101      	bne.n	8000b8e <_fflush_r+0x62>
 8000b8a:	68ac      	ldr	r4, [r5, #8]
 8000b8c:	e7df      	b.n	8000b4e <_fflush_r+0x22>
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <_fflush_r+0x74>)
 8000b90:	429c      	cmp	r4, r3
 8000b92:	bf08      	it	eq
 8000b94:	68ec      	ldreq	r4, [r5, #12]
 8000b96:	e7da      	b.n	8000b4e <_fflush_r+0x22>
 8000b98:	0800189c 	.word	0x0800189c
 8000b9c:	080018bc 	.word	0x080018bc
 8000ba0:	0800187c 	.word	0x0800187c

08000ba4 <std>:
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	b510      	push	{r4, lr}
 8000ba8:	4604      	mov	r4, r0
 8000baa:	e9c0 3300 	strd	r3, r3, [r0]
 8000bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000bb2:	6083      	str	r3, [r0, #8]
 8000bb4:	8181      	strh	r1, [r0, #12]
 8000bb6:	6643      	str	r3, [r0, #100]	; 0x64
 8000bb8:	81c2      	strh	r2, [r0, #14]
 8000bba:	6183      	str	r3, [r0, #24]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	2208      	movs	r2, #8
 8000bc0:	305c      	adds	r0, #92	; 0x5c
 8000bc2:	f7ff fddb 	bl	800077c <memset>
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <std+0x38>)
 8000bc8:	6224      	str	r4, [r4, #32]
 8000bca:	6263      	str	r3, [r4, #36]	; 0x24
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <std+0x3c>)
 8000bce:	62a3      	str	r3, [r4, #40]	; 0x28
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <std+0x40>)
 8000bd2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <std+0x44>)
 8000bd6:	6323      	str	r3, [r4, #48]	; 0x30
 8000bd8:	bd10      	pop	{r4, pc}
 8000bda:	bf00      	nop
 8000bdc:	08001615 	.word	0x08001615
 8000be0:	08001637 	.word	0x08001637
 8000be4:	0800166f 	.word	0x0800166f
 8000be8:	08001693 	.word	0x08001693

08000bec <_cleanup_r>:
 8000bec:	4901      	ldr	r1, [pc, #4]	; (8000bf4 <_cleanup_r+0x8>)
 8000bee:	f000 b8af 	b.w	8000d50 <_fwalk_reent>
 8000bf2:	bf00      	nop
 8000bf4:	08000b2d 	.word	0x08000b2d

08000bf8 <__sfmoreglue>:
 8000bf8:	2268      	movs	r2, #104	; 0x68
 8000bfa:	b570      	push	{r4, r5, r6, lr}
 8000bfc:	1e4d      	subs	r5, r1, #1
 8000bfe:	4355      	muls	r5, r2
 8000c00:	460e      	mov	r6, r1
 8000c02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000c06:	f000 f993 	bl	8000f30 <_malloc_r>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	b140      	cbz	r0, 8000c20 <__sfmoreglue+0x28>
 8000c0e:	2100      	movs	r1, #0
 8000c10:	e9c0 1600 	strd	r1, r6, [r0]
 8000c14:	300c      	adds	r0, #12
 8000c16:	60a0      	str	r0, [r4, #8]
 8000c18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000c1c:	f7ff fdae 	bl	800077c <memset>
 8000c20:	4620      	mov	r0, r4
 8000c22:	bd70      	pop	{r4, r5, r6, pc}

08000c24 <__sfp_lock_acquire>:
 8000c24:	4801      	ldr	r0, [pc, #4]	; (8000c2c <__sfp_lock_acquire+0x8>)
 8000c26:	f000 b8b3 	b.w	8000d90 <__retarget_lock_acquire_recursive>
 8000c2a:	bf00      	nop
 8000c2c:	200000dd 	.word	0x200000dd

08000c30 <__sfp_lock_release>:
 8000c30:	4801      	ldr	r0, [pc, #4]	; (8000c38 <__sfp_lock_release+0x8>)
 8000c32:	f000 b8ae 	b.w	8000d92 <__retarget_lock_release_recursive>
 8000c36:	bf00      	nop
 8000c38:	200000dd 	.word	0x200000dd

08000c3c <__sinit_lock_acquire>:
 8000c3c:	4801      	ldr	r0, [pc, #4]	; (8000c44 <__sinit_lock_acquire+0x8>)
 8000c3e:	f000 b8a7 	b.w	8000d90 <__retarget_lock_acquire_recursive>
 8000c42:	bf00      	nop
 8000c44:	200000de 	.word	0x200000de

08000c48 <__sinit_lock_release>:
 8000c48:	4801      	ldr	r0, [pc, #4]	; (8000c50 <__sinit_lock_release+0x8>)
 8000c4a:	f000 b8a2 	b.w	8000d92 <__retarget_lock_release_recursive>
 8000c4e:	bf00      	nop
 8000c50:	200000de 	.word	0x200000de

08000c54 <__sinit>:
 8000c54:	b510      	push	{r4, lr}
 8000c56:	4604      	mov	r4, r0
 8000c58:	f7ff fff0 	bl	8000c3c <__sinit_lock_acquire>
 8000c5c:	69a3      	ldr	r3, [r4, #24]
 8000c5e:	b11b      	cbz	r3, 8000c68 <__sinit+0x14>
 8000c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c64:	f7ff bff0 	b.w	8000c48 <__sinit_lock_release>
 8000c68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000c6c:	6523      	str	r3, [r4, #80]	; 0x50
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <__sinit+0x68>)
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <__sinit+0x6c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	62a2      	str	r2, [r4, #40]	; 0x28
 8000c76:	42a3      	cmp	r3, r4
 8000c78:	bf08      	it	eq
 8000c7a:	2301      	moveq	r3, #1
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	bf08      	it	eq
 8000c80:	61a3      	streq	r3, [r4, #24]
 8000c82:	f000 f81f 	bl	8000cc4 <__sfp>
 8000c86:	6060      	str	r0, [r4, #4]
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f000 f81b 	bl	8000cc4 <__sfp>
 8000c8e:	60a0      	str	r0, [r4, #8]
 8000c90:	4620      	mov	r0, r4
 8000c92:	f000 f817 	bl	8000cc4 <__sfp>
 8000c96:	2200      	movs	r2, #0
 8000c98:	2104      	movs	r1, #4
 8000c9a:	60e0      	str	r0, [r4, #12]
 8000c9c:	6860      	ldr	r0, [r4, #4]
 8000c9e:	f7ff ff81 	bl	8000ba4 <std>
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2109      	movs	r1, #9
 8000ca6:	68a0      	ldr	r0, [r4, #8]
 8000ca8:	f7ff ff7c 	bl	8000ba4 <std>
 8000cac:	2202      	movs	r2, #2
 8000cae:	2112      	movs	r1, #18
 8000cb0:	68e0      	ldr	r0, [r4, #12]
 8000cb2:	f7ff ff77 	bl	8000ba4 <std>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	61a3      	str	r3, [r4, #24]
 8000cba:	e7d1      	b.n	8000c60 <__sinit+0xc>
 8000cbc:	08001878 	.word	0x08001878
 8000cc0:	08000bed 	.word	0x08000bed

08000cc4 <__sfp>:
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	4607      	mov	r7, r0
 8000cc8:	f7ff ffac 	bl	8000c24 <__sfp_lock_acquire>
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <__sfp+0x84>)
 8000cce:	681e      	ldr	r6, [r3, #0]
 8000cd0:	69b3      	ldr	r3, [r6, #24]
 8000cd2:	b913      	cbnz	r3, 8000cda <__sfp+0x16>
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	f7ff ffbd 	bl	8000c54 <__sinit>
 8000cda:	3648      	adds	r6, #72	; 0x48
 8000cdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	d503      	bpl.n	8000cec <__sfp+0x28>
 8000ce4:	6833      	ldr	r3, [r6, #0]
 8000ce6:	b30b      	cbz	r3, 8000d2c <__sfp+0x68>
 8000ce8:	6836      	ldr	r6, [r6, #0]
 8000cea:	e7f7      	b.n	8000cdc <__sfp+0x18>
 8000cec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000cf0:	b9d5      	cbnz	r5, 8000d28 <__sfp+0x64>
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <__sfp+0x88>)
 8000cf4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000cf8:	60e3      	str	r3, [r4, #12]
 8000cfa:	6665      	str	r5, [r4, #100]	; 0x64
 8000cfc:	f000 f847 	bl	8000d8e <__retarget_lock_init_recursive>
 8000d00:	f7ff ff96 	bl	8000c30 <__sfp_lock_release>
 8000d04:	2208      	movs	r2, #8
 8000d06:	4629      	mov	r1, r5
 8000d08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000d0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000d10:	6025      	str	r5, [r4, #0]
 8000d12:	61a5      	str	r5, [r4, #24]
 8000d14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d18:	f7ff fd30 	bl	800077c <memset>
 8000d1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000d20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000d24:	4620      	mov	r0, r4
 8000d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d28:	3468      	adds	r4, #104	; 0x68
 8000d2a:	e7d9      	b.n	8000ce0 <__sfp+0x1c>
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	4638      	mov	r0, r7
 8000d30:	f7ff ff62 	bl	8000bf8 <__sfmoreglue>
 8000d34:	4604      	mov	r4, r0
 8000d36:	6030      	str	r0, [r6, #0]
 8000d38:	2800      	cmp	r0, #0
 8000d3a:	d1d5      	bne.n	8000ce8 <__sfp+0x24>
 8000d3c:	f7ff ff78 	bl	8000c30 <__sfp_lock_release>
 8000d40:	230c      	movs	r3, #12
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	e7ee      	b.n	8000d24 <__sfp+0x60>
 8000d46:	bf00      	nop
 8000d48:	08001878 	.word	0x08001878
 8000d4c:	ffff0001 	.word	0xffff0001

08000d50 <_fwalk_reent>:
 8000d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d54:	4606      	mov	r6, r0
 8000d56:	4688      	mov	r8, r1
 8000d58:	2700      	movs	r7, #0
 8000d5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d62:	f1b9 0901 	subs.w	r9, r9, #1
 8000d66:	d505      	bpl.n	8000d74 <_fwalk_reent+0x24>
 8000d68:	6824      	ldr	r4, [r4, #0]
 8000d6a:	2c00      	cmp	r4, #0
 8000d6c:	d1f7      	bne.n	8000d5e <_fwalk_reent+0xe>
 8000d6e:	4638      	mov	r0, r7
 8000d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d74:	89ab      	ldrh	r3, [r5, #12]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d907      	bls.n	8000d8a <_fwalk_reent+0x3a>
 8000d7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	d003      	beq.n	8000d8a <_fwalk_reent+0x3a>
 8000d82:	4629      	mov	r1, r5
 8000d84:	4630      	mov	r0, r6
 8000d86:	47c0      	blx	r8
 8000d88:	4307      	orrs	r7, r0
 8000d8a:	3568      	adds	r5, #104	; 0x68
 8000d8c:	e7e9      	b.n	8000d62 <_fwalk_reent+0x12>

08000d8e <__retarget_lock_init_recursive>:
 8000d8e:	4770      	bx	lr

08000d90 <__retarget_lock_acquire_recursive>:
 8000d90:	4770      	bx	lr

08000d92 <__retarget_lock_release_recursive>:
 8000d92:	4770      	bx	lr

08000d94 <__swhatbuf_r>:
 8000d94:	b570      	push	{r4, r5, r6, lr}
 8000d96:	460e      	mov	r6, r1
 8000d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d9c:	4614      	mov	r4, r2
 8000d9e:	2900      	cmp	r1, #0
 8000da0:	461d      	mov	r5, r3
 8000da2:	b096      	sub	sp, #88	; 0x58
 8000da4:	da08      	bge.n	8000db8 <__swhatbuf_r+0x24>
 8000da6:	2200      	movs	r2, #0
 8000da8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000dac:	602a      	str	r2, [r5, #0]
 8000dae:	061a      	lsls	r2, r3, #24
 8000db0:	d410      	bmi.n	8000dd4 <__swhatbuf_r+0x40>
 8000db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db6:	e00e      	b.n	8000dd6 <__swhatbuf_r+0x42>
 8000db8:	466a      	mov	r2, sp
 8000dba:	f000 fc91 	bl	80016e0 <_fstat_r>
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	dbf1      	blt.n	8000da6 <__swhatbuf_r+0x12>
 8000dc2:	9a01      	ldr	r2, [sp, #4]
 8000dc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000dc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000dcc:	425a      	negs	r2, r3
 8000dce:	415a      	adcs	r2, r3
 8000dd0:	602a      	str	r2, [r5, #0]
 8000dd2:	e7ee      	b.n	8000db2 <__swhatbuf_r+0x1e>
 8000dd4:	2340      	movs	r3, #64	; 0x40
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	6023      	str	r3, [r4, #0]
 8000dda:	b016      	add	sp, #88	; 0x58
 8000ddc:	bd70      	pop	{r4, r5, r6, pc}
	...

08000de0 <__smakebuf_r>:
 8000de0:	898b      	ldrh	r3, [r1, #12]
 8000de2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000de4:	079d      	lsls	r5, r3, #30
 8000de6:	4606      	mov	r6, r0
 8000de8:	460c      	mov	r4, r1
 8000dea:	d507      	bpl.n	8000dfc <__smakebuf_r+0x1c>
 8000dec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000df0:	6023      	str	r3, [r4, #0]
 8000df2:	6123      	str	r3, [r4, #16]
 8000df4:	2301      	movs	r3, #1
 8000df6:	6163      	str	r3, [r4, #20]
 8000df8:	b002      	add	sp, #8
 8000dfa:	bd70      	pop	{r4, r5, r6, pc}
 8000dfc:	466a      	mov	r2, sp
 8000dfe:	ab01      	add	r3, sp, #4
 8000e00:	f7ff ffc8 	bl	8000d94 <__swhatbuf_r>
 8000e04:	9900      	ldr	r1, [sp, #0]
 8000e06:	4605      	mov	r5, r0
 8000e08:	4630      	mov	r0, r6
 8000e0a:	f000 f891 	bl	8000f30 <_malloc_r>
 8000e0e:	b948      	cbnz	r0, 8000e24 <__smakebuf_r+0x44>
 8000e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e14:	059a      	lsls	r2, r3, #22
 8000e16:	d4ef      	bmi.n	8000df8 <__smakebuf_r+0x18>
 8000e18:	f023 0303 	bic.w	r3, r3, #3
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	81a3      	strh	r3, [r4, #12]
 8000e22:	e7e3      	b.n	8000dec <__smakebuf_r+0xc>
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <__smakebuf_r+0x7c>)
 8000e26:	62b3      	str	r3, [r6, #40]	; 0x28
 8000e28:	89a3      	ldrh	r3, [r4, #12]
 8000e2a:	6020      	str	r0, [r4, #0]
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e30:	81a3      	strh	r3, [r4, #12]
 8000e32:	9b00      	ldr	r3, [sp, #0]
 8000e34:	6120      	str	r0, [r4, #16]
 8000e36:	6163      	str	r3, [r4, #20]
 8000e38:	9b01      	ldr	r3, [sp, #4]
 8000e3a:	b15b      	cbz	r3, 8000e54 <__smakebuf_r+0x74>
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e42:	f000 fc5f 	bl	8001704 <_isatty_r>
 8000e46:	b128      	cbz	r0, 8000e54 <__smakebuf_r+0x74>
 8000e48:	89a3      	ldrh	r3, [r4, #12]
 8000e4a:	f023 0303 	bic.w	r3, r3, #3
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	81a3      	strh	r3, [r4, #12]
 8000e54:	89a0      	ldrh	r0, [r4, #12]
 8000e56:	4305      	orrs	r5, r0
 8000e58:	81a5      	strh	r5, [r4, #12]
 8000e5a:	e7cd      	b.n	8000df8 <__smakebuf_r+0x18>
 8000e5c:	08000bed 	.word	0x08000bed

08000e60 <_free_r>:
 8000e60:	b538      	push	{r3, r4, r5, lr}
 8000e62:	4605      	mov	r5, r0
 8000e64:	2900      	cmp	r1, #0
 8000e66:	d040      	beq.n	8000eea <_free_r+0x8a>
 8000e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e6c:	1f0c      	subs	r4, r1, #4
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bfb8      	it	lt
 8000e72:	18e4      	addlt	r4, r4, r3
 8000e74:	f000 fc76 	bl	8001764 <__malloc_lock>
 8000e78:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <_free_r+0x8c>)
 8000e7a:	6813      	ldr	r3, [r2, #0]
 8000e7c:	b933      	cbnz	r3, 8000e8c <_free_r+0x2c>
 8000e7e:	6063      	str	r3, [r4, #4]
 8000e80:	6014      	str	r4, [r2, #0]
 8000e82:	4628      	mov	r0, r5
 8000e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e88:	f000 bc72 	b.w	8001770 <__malloc_unlock>
 8000e8c:	42a3      	cmp	r3, r4
 8000e8e:	d908      	bls.n	8000ea2 <_free_r+0x42>
 8000e90:	6820      	ldr	r0, [r4, #0]
 8000e92:	1821      	adds	r1, r4, r0
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf01      	itttt	eq
 8000e98:	6819      	ldreq	r1, [r3, #0]
 8000e9a:	685b      	ldreq	r3, [r3, #4]
 8000e9c:	1809      	addeq	r1, r1, r0
 8000e9e:	6021      	streq	r1, [r4, #0]
 8000ea0:	e7ed      	b.n	8000e7e <_free_r+0x1e>
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	b10b      	cbz	r3, 8000eac <_free_r+0x4c>
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d9fa      	bls.n	8000ea2 <_free_r+0x42>
 8000eac:	6811      	ldr	r1, [r2, #0]
 8000eae:	1850      	adds	r0, r2, r1
 8000eb0:	42a0      	cmp	r0, r4
 8000eb2:	d10b      	bne.n	8000ecc <_free_r+0x6c>
 8000eb4:	6820      	ldr	r0, [r4, #0]
 8000eb6:	4401      	add	r1, r0
 8000eb8:	1850      	adds	r0, r2, r1
 8000eba:	4283      	cmp	r3, r0
 8000ebc:	6011      	str	r1, [r2, #0]
 8000ebe:	d1e0      	bne.n	8000e82 <_free_r+0x22>
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	4401      	add	r1, r0
 8000ec6:	6011      	str	r1, [r2, #0]
 8000ec8:	6053      	str	r3, [r2, #4]
 8000eca:	e7da      	b.n	8000e82 <_free_r+0x22>
 8000ecc:	d902      	bls.n	8000ed4 <_free_r+0x74>
 8000ece:	230c      	movs	r3, #12
 8000ed0:	602b      	str	r3, [r5, #0]
 8000ed2:	e7d6      	b.n	8000e82 <_free_r+0x22>
 8000ed4:	6820      	ldr	r0, [r4, #0]
 8000ed6:	1821      	adds	r1, r4, r0
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	bf01      	itttt	eq
 8000edc:	6819      	ldreq	r1, [r3, #0]
 8000ede:	685b      	ldreq	r3, [r3, #4]
 8000ee0:	1809      	addeq	r1, r1, r0
 8000ee2:	6021      	streq	r1, [r4, #0]
 8000ee4:	6063      	str	r3, [r4, #4]
 8000ee6:	6054      	str	r4, [r2, #4]
 8000ee8:	e7cb      	b.n	8000e82 <_free_r+0x22>
 8000eea:	bd38      	pop	{r3, r4, r5, pc}
 8000eec:	200000e0 	.word	0x200000e0

08000ef0 <sbrk_aligned>:
 8000ef0:	b570      	push	{r4, r5, r6, lr}
 8000ef2:	4e0e      	ldr	r6, [pc, #56]	; (8000f2c <sbrk_aligned+0x3c>)
 8000ef4:	460c      	mov	r4, r1
 8000ef6:	6831      	ldr	r1, [r6, #0]
 8000ef8:	4605      	mov	r5, r0
 8000efa:	b911      	cbnz	r1, 8000f02 <sbrk_aligned+0x12>
 8000efc:	f000 fb7a 	bl	80015f4 <_sbrk_r>
 8000f00:	6030      	str	r0, [r6, #0]
 8000f02:	4621      	mov	r1, r4
 8000f04:	4628      	mov	r0, r5
 8000f06:	f000 fb75 	bl	80015f4 <_sbrk_r>
 8000f0a:	1c43      	adds	r3, r0, #1
 8000f0c:	d00a      	beq.n	8000f24 <sbrk_aligned+0x34>
 8000f0e:	1cc4      	adds	r4, r0, #3
 8000f10:	f024 0403 	bic.w	r4, r4, #3
 8000f14:	42a0      	cmp	r0, r4
 8000f16:	d007      	beq.n	8000f28 <sbrk_aligned+0x38>
 8000f18:	1a21      	subs	r1, r4, r0
 8000f1a:	4628      	mov	r0, r5
 8000f1c:	f000 fb6a 	bl	80015f4 <_sbrk_r>
 8000f20:	3001      	adds	r0, #1
 8000f22:	d101      	bne.n	8000f28 <sbrk_aligned+0x38>
 8000f24:	f04f 34ff 	mov.w	r4, #4294967295
 8000f28:	4620      	mov	r0, r4
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	200000e4 	.word	0x200000e4

08000f30 <_malloc_r>:
 8000f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f34:	1ccd      	adds	r5, r1, #3
 8000f36:	f025 0503 	bic.w	r5, r5, #3
 8000f3a:	3508      	adds	r5, #8
 8000f3c:	2d0c      	cmp	r5, #12
 8000f3e:	bf38      	it	cc
 8000f40:	250c      	movcc	r5, #12
 8000f42:	2d00      	cmp	r5, #0
 8000f44:	4607      	mov	r7, r0
 8000f46:	db01      	blt.n	8000f4c <_malloc_r+0x1c>
 8000f48:	42a9      	cmp	r1, r5
 8000f4a:	d905      	bls.n	8000f58 <_malloc_r+0x28>
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	2600      	movs	r6, #0
 8000f50:	603b      	str	r3, [r7, #0]
 8000f52:	4630      	mov	r0, r6
 8000f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f58:	4e2e      	ldr	r6, [pc, #184]	; (8001014 <_malloc_r+0xe4>)
 8000f5a:	f000 fc03 	bl	8001764 <__malloc_lock>
 8000f5e:	6833      	ldr	r3, [r6, #0]
 8000f60:	461c      	mov	r4, r3
 8000f62:	bb34      	cbnz	r4, 8000fb2 <_malloc_r+0x82>
 8000f64:	4629      	mov	r1, r5
 8000f66:	4638      	mov	r0, r7
 8000f68:	f7ff ffc2 	bl	8000ef0 <sbrk_aligned>
 8000f6c:	1c43      	adds	r3, r0, #1
 8000f6e:	4604      	mov	r4, r0
 8000f70:	d14d      	bne.n	800100e <_malloc_r+0xde>
 8000f72:	6834      	ldr	r4, [r6, #0]
 8000f74:	4626      	mov	r6, r4
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d140      	bne.n	8000ffc <_malloc_r+0xcc>
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	4631      	mov	r1, r6
 8000f7e:	4638      	mov	r0, r7
 8000f80:	eb04 0803 	add.w	r8, r4, r3
 8000f84:	f000 fb36 	bl	80015f4 <_sbrk_r>
 8000f88:	4580      	cmp	r8, r0
 8000f8a:	d13a      	bne.n	8001002 <_malloc_r+0xd2>
 8000f8c:	6821      	ldr	r1, [r4, #0]
 8000f8e:	3503      	adds	r5, #3
 8000f90:	1a6d      	subs	r5, r5, r1
 8000f92:	f025 0503 	bic.w	r5, r5, #3
 8000f96:	3508      	adds	r5, #8
 8000f98:	2d0c      	cmp	r5, #12
 8000f9a:	bf38      	it	cc
 8000f9c:	250c      	movcc	r5, #12
 8000f9e:	4638      	mov	r0, r7
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	f7ff ffa5 	bl	8000ef0 <sbrk_aligned>
 8000fa6:	3001      	adds	r0, #1
 8000fa8:	d02b      	beq.n	8001002 <_malloc_r+0xd2>
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	442b      	add	r3, r5
 8000fae:	6023      	str	r3, [r4, #0]
 8000fb0:	e00e      	b.n	8000fd0 <_malloc_r+0xa0>
 8000fb2:	6822      	ldr	r2, [r4, #0]
 8000fb4:	1b52      	subs	r2, r2, r5
 8000fb6:	d41e      	bmi.n	8000ff6 <_malloc_r+0xc6>
 8000fb8:	2a0b      	cmp	r2, #11
 8000fba:	d916      	bls.n	8000fea <_malloc_r+0xba>
 8000fbc:	1961      	adds	r1, r4, r5
 8000fbe:	42a3      	cmp	r3, r4
 8000fc0:	6025      	str	r5, [r4, #0]
 8000fc2:	bf18      	it	ne
 8000fc4:	6059      	strne	r1, [r3, #4]
 8000fc6:	6863      	ldr	r3, [r4, #4]
 8000fc8:	bf08      	it	eq
 8000fca:	6031      	streq	r1, [r6, #0]
 8000fcc:	5162      	str	r2, [r4, r5]
 8000fce:	604b      	str	r3, [r1, #4]
 8000fd0:	4638      	mov	r0, r7
 8000fd2:	f104 060b 	add.w	r6, r4, #11
 8000fd6:	f000 fbcb 	bl	8001770 <__malloc_unlock>
 8000fda:	f026 0607 	bic.w	r6, r6, #7
 8000fde:	1d23      	adds	r3, r4, #4
 8000fe0:	1af2      	subs	r2, r6, r3
 8000fe2:	d0b6      	beq.n	8000f52 <_malloc_r+0x22>
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	50a3      	str	r3, [r4, r2]
 8000fe8:	e7b3      	b.n	8000f52 <_malloc_r+0x22>
 8000fea:	6862      	ldr	r2, [r4, #4]
 8000fec:	42a3      	cmp	r3, r4
 8000fee:	bf0c      	ite	eq
 8000ff0:	6032      	streq	r2, [r6, #0]
 8000ff2:	605a      	strne	r2, [r3, #4]
 8000ff4:	e7ec      	b.n	8000fd0 <_malloc_r+0xa0>
 8000ff6:	4623      	mov	r3, r4
 8000ff8:	6864      	ldr	r4, [r4, #4]
 8000ffa:	e7b2      	b.n	8000f62 <_malloc_r+0x32>
 8000ffc:	4634      	mov	r4, r6
 8000ffe:	6876      	ldr	r6, [r6, #4]
 8001000:	e7b9      	b.n	8000f76 <_malloc_r+0x46>
 8001002:	230c      	movs	r3, #12
 8001004:	4638      	mov	r0, r7
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	f000 fbb2 	bl	8001770 <__malloc_unlock>
 800100c:	e7a1      	b.n	8000f52 <_malloc_r+0x22>
 800100e:	6025      	str	r5, [r4, #0]
 8001010:	e7de      	b.n	8000fd0 <_malloc_r+0xa0>
 8001012:	bf00      	nop
 8001014:	200000e0 	.word	0x200000e0

08001018 <__sfputc_r>:
 8001018:	6893      	ldr	r3, [r2, #8]
 800101a:	b410      	push	{r4}
 800101c:	3b01      	subs	r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	6093      	str	r3, [r2, #8]
 8001022:	da07      	bge.n	8001034 <__sfputc_r+0x1c>
 8001024:	6994      	ldr	r4, [r2, #24]
 8001026:	42a3      	cmp	r3, r4
 8001028:	db01      	blt.n	800102e <__sfputc_r+0x16>
 800102a:	290a      	cmp	r1, #10
 800102c:	d102      	bne.n	8001034 <__sfputc_r+0x1c>
 800102e:	bc10      	pop	{r4}
 8001030:	f7ff bc3a 	b.w	80008a8 <__swbuf_r>
 8001034:	6813      	ldr	r3, [r2, #0]
 8001036:	1c58      	adds	r0, r3, #1
 8001038:	6010      	str	r0, [r2, #0]
 800103a:	7019      	strb	r1, [r3, #0]
 800103c:	4608      	mov	r0, r1
 800103e:	bc10      	pop	{r4}
 8001040:	4770      	bx	lr

08001042 <__sfputs_r>:
 8001042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001044:	4606      	mov	r6, r0
 8001046:	460f      	mov	r7, r1
 8001048:	4614      	mov	r4, r2
 800104a:	18d5      	adds	r5, r2, r3
 800104c:	42ac      	cmp	r4, r5
 800104e:	d101      	bne.n	8001054 <__sfputs_r+0x12>
 8001050:	2000      	movs	r0, #0
 8001052:	e007      	b.n	8001064 <__sfputs_r+0x22>
 8001054:	463a      	mov	r2, r7
 8001056:	4630      	mov	r0, r6
 8001058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800105c:	f7ff ffdc 	bl	8001018 <__sfputc_r>
 8001060:	1c43      	adds	r3, r0, #1
 8001062:	d1f3      	bne.n	800104c <__sfputs_r+0xa>
 8001064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001068 <_vfiprintf_r>:
 8001068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800106c:	460d      	mov	r5, r1
 800106e:	4614      	mov	r4, r2
 8001070:	4698      	mov	r8, r3
 8001072:	4606      	mov	r6, r0
 8001074:	b09d      	sub	sp, #116	; 0x74
 8001076:	b118      	cbz	r0, 8001080 <_vfiprintf_r+0x18>
 8001078:	6983      	ldr	r3, [r0, #24]
 800107a:	b90b      	cbnz	r3, 8001080 <_vfiprintf_r+0x18>
 800107c:	f7ff fdea 	bl	8000c54 <__sinit>
 8001080:	4b89      	ldr	r3, [pc, #548]	; (80012a8 <_vfiprintf_r+0x240>)
 8001082:	429d      	cmp	r5, r3
 8001084:	d11b      	bne.n	80010be <_vfiprintf_r+0x56>
 8001086:	6875      	ldr	r5, [r6, #4]
 8001088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800108a:	07d9      	lsls	r1, r3, #31
 800108c:	d405      	bmi.n	800109a <_vfiprintf_r+0x32>
 800108e:	89ab      	ldrh	r3, [r5, #12]
 8001090:	059a      	lsls	r2, r3, #22
 8001092:	d402      	bmi.n	800109a <_vfiprintf_r+0x32>
 8001094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001096:	f7ff fe7b 	bl	8000d90 <__retarget_lock_acquire_recursive>
 800109a:	89ab      	ldrh	r3, [r5, #12]
 800109c:	071b      	lsls	r3, r3, #28
 800109e:	d501      	bpl.n	80010a4 <_vfiprintf_r+0x3c>
 80010a0:	692b      	ldr	r3, [r5, #16]
 80010a2:	b9eb      	cbnz	r3, 80010e0 <_vfiprintf_r+0x78>
 80010a4:	4629      	mov	r1, r5
 80010a6:	4630      	mov	r0, r6
 80010a8:	f7ff fc50 	bl	800094c <__swsetup_r>
 80010ac:	b1c0      	cbz	r0, 80010e0 <_vfiprintf_r+0x78>
 80010ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010b0:	07dc      	lsls	r4, r3, #31
 80010b2:	d50e      	bpl.n	80010d2 <_vfiprintf_r+0x6a>
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	b01d      	add	sp, #116	; 0x74
 80010ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010be:	4b7b      	ldr	r3, [pc, #492]	; (80012ac <_vfiprintf_r+0x244>)
 80010c0:	429d      	cmp	r5, r3
 80010c2:	d101      	bne.n	80010c8 <_vfiprintf_r+0x60>
 80010c4:	68b5      	ldr	r5, [r6, #8]
 80010c6:	e7df      	b.n	8001088 <_vfiprintf_r+0x20>
 80010c8:	4b79      	ldr	r3, [pc, #484]	; (80012b0 <_vfiprintf_r+0x248>)
 80010ca:	429d      	cmp	r5, r3
 80010cc:	bf08      	it	eq
 80010ce:	68f5      	ldreq	r5, [r6, #12]
 80010d0:	e7da      	b.n	8001088 <_vfiprintf_r+0x20>
 80010d2:	89ab      	ldrh	r3, [r5, #12]
 80010d4:	0598      	lsls	r0, r3, #22
 80010d6:	d4ed      	bmi.n	80010b4 <_vfiprintf_r+0x4c>
 80010d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010da:	f7ff fe5a 	bl	8000d92 <__retarget_lock_release_recursive>
 80010de:	e7e9      	b.n	80010b4 <_vfiprintf_r+0x4c>
 80010e0:	2300      	movs	r3, #0
 80010e2:	9309      	str	r3, [sp, #36]	; 0x24
 80010e4:	2320      	movs	r3, #32
 80010e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80010ea:	2330      	movs	r3, #48	; 0x30
 80010ec:	f04f 0901 	mov.w	r9, #1
 80010f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80010f4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80012b4 <_vfiprintf_r+0x24c>
 80010f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80010fc:	4623      	mov	r3, r4
 80010fe:	469a      	mov	sl, r3
 8001100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001104:	b10a      	cbz	r2, 800110a <_vfiprintf_r+0xa2>
 8001106:	2a25      	cmp	r2, #37	; 0x25
 8001108:	d1f9      	bne.n	80010fe <_vfiprintf_r+0x96>
 800110a:	ebba 0b04 	subs.w	fp, sl, r4
 800110e:	d00b      	beq.n	8001128 <_vfiprintf_r+0xc0>
 8001110:	465b      	mov	r3, fp
 8001112:	4622      	mov	r2, r4
 8001114:	4629      	mov	r1, r5
 8001116:	4630      	mov	r0, r6
 8001118:	f7ff ff93 	bl	8001042 <__sfputs_r>
 800111c:	3001      	adds	r0, #1
 800111e:	f000 80aa 	beq.w	8001276 <_vfiprintf_r+0x20e>
 8001122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001124:	445a      	add	r2, fp
 8001126:	9209      	str	r2, [sp, #36]	; 0x24
 8001128:	f89a 3000 	ldrb.w	r3, [sl]
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80a2 	beq.w	8001276 <_vfiprintf_r+0x20e>
 8001132:	2300      	movs	r3, #0
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800113c:	f10a 0a01 	add.w	sl, sl, #1
 8001140:	9304      	str	r3, [sp, #16]
 8001142:	9307      	str	r3, [sp, #28]
 8001144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001148:	931a      	str	r3, [sp, #104]	; 0x68
 800114a:	4654      	mov	r4, sl
 800114c:	2205      	movs	r2, #5
 800114e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001152:	4858      	ldr	r0, [pc, #352]	; (80012b4 <_vfiprintf_r+0x24c>)
 8001154:	f000 faf8 	bl	8001748 <memchr>
 8001158:	9a04      	ldr	r2, [sp, #16]
 800115a:	b9d8      	cbnz	r0, 8001194 <_vfiprintf_r+0x12c>
 800115c:	06d1      	lsls	r1, r2, #27
 800115e:	bf44      	itt	mi
 8001160:	2320      	movmi	r3, #32
 8001162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001166:	0713      	lsls	r3, r2, #28
 8001168:	bf44      	itt	mi
 800116a:	232b      	movmi	r3, #43	; 0x2b
 800116c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001170:	f89a 3000 	ldrb.w	r3, [sl]
 8001174:	2b2a      	cmp	r3, #42	; 0x2a
 8001176:	d015      	beq.n	80011a4 <_vfiprintf_r+0x13c>
 8001178:	4654      	mov	r4, sl
 800117a:	2000      	movs	r0, #0
 800117c:	f04f 0c0a 	mov.w	ip, #10
 8001180:	9a07      	ldr	r2, [sp, #28]
 8001182:	4621      	mov	r1, r4
 8001184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001188:	3b30      	subs	r3, #48	; 0x30
 800118a:	2b09      	cmp	r3, #9
 800118c:	d94e      	bls.n	800122c <_vfiprintf_r+0x1c4>
 800118e:	b1b0      	cbz	r0, 80011be <_vfiprintf_r+0x156>
 8001190:	9207      	str	r2, [sp, #28]
 8001192:	e014      	b.n	80011be <_vfiprintf_r+0x156>
 8001194:	eba0 0308 	sub.w	r3, r0, r8
 8001198:	fa09 f303 	lsl.w	r3, r9, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	46a2      	mov	sl, r4
 80011a0:	9304      	str	r3, [sp, #16]
 80011a2:	e7d2      	b.n	800114a <_vfiprintf_r+0xe2>
 80011a4:	9b03      	ldr	r3, [sp, #12]
 80011a6:	1d19      	adds	r1, r3, #4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	9103      	str	r1, [sp, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bfbb      	ittet	lt
 80011b0:	425b      	neglt	r3, r3
 80011b2:	f042 0202 	orrlt.w	r2, r2, #2
 80011b6:	9307      	strge	r3, [sp, #28]
 80011b8:	9307      	strlt	r3, [sp, #28]
 80011ba:	bfb8      	it	lt
 80011bc:	9204      	strlt	r2, [sp, #16]
 80011be:	7823      	ldrb	r3, [r4, #0]
 80011c0:	2b2e      	cmp	r3, #46	; 0x2e
 80011c2:	d10c      	bne.n	80011de <_vfiprintf_r+0x176>
 80011c4:	7863      	ldrb	r3, [r4, #1]
 80011c6:	2b2a      	cmp	r3, #42	; 0x2a
 80011c8:	d135      	bne.n	8001236 <_vfiprintf_r+0x1ce>
 80011ca:	9b03      	ldr	r3, [sp, #12]
 80011cc:	3402      	adds	r4, #2
 80011ce:	1d1a      	adds	r2, r3, #4
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	9203      	str	r2, [sp, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	bfb8      	it	lt
 80011d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80011dc:	9305      	str	r3, [sp, #20]
 80011de:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80012b8 <_vfiprintf_r+0x250>
 80011e2:	2203      	movs	r2, #3
 80011e4:	4650      	mov	r0, sl
 80011e6:	7821      	ldrb	r1, [r4, #0]
 80011e8:	f000 faae 	bl	8001748 <memchr>
 80011ec:	b140      	cbz	r0, 8001200 <_vfiprintf_r+0x198>
 80011ee:	2340      	movs	r3, #64	; 0x40
 80011f0:	eba0 000a 	sub.w	r0, r0, sl
 80011f4:	fa03 f000 	lsl.w	r0, r3, r0
 80011f8:	9b04      	ldr	r3, [sp, #16]
 80011fa:	3401      	adds	r4, #1
 80011fc:	4303      	orrs	r3, r0
 80011fe:	9304      	str	r3, [sp, #16]
 8001200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001204:	2206      	movs	r2, #6
 8001206:	482d      	ldr	r0, [pc, #180]	; (80012bc <_vfiprintf_r+0x254>)
 8001208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800120c:	f000 fa9c 	bl	8001748 <memchr>
 8001210:	2800      	cmp	r0, #0
 8001212:	d03f      	beq.n	8001294 <_vfiprintf_r+0x22c>
 8001214:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <_vfiprintf_r+0x258>)
 8001216:	bb1b      	cbnz	r3, 8001260 <_vfiprintf_r+0x1f8>
 8001218:	9b03      	ldr	r3, [sp, #12]
 800121a:	3307      	adds	r3, #7
 800121c:	f023 0307 	bic.w	r3, r3, #7
 8001220:	3308      	adds	r3, #8
 8001222:	9303      	str	r3, [sp, #12]
 8001224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001226:	443b      	add	r3, r7
 8001228:	9309      	str	r3, [sp, #36]	; 0x24
 800122a:	e767      	b.n	80010fc <_vfiprintf_r+0x94>
 800122c:	460c      	mov	r4, r1
 800122e:	2001      	movs	r0, #1
 8001230:	fb0c 3202 	mla	r2, ip, r2, r3
 8001234:	e7a5      	b.n	8001182 <_vfiprintf_r+0x11a>
 8001236:	2300      	movs	r3, #0
 8001238:	f04f 0c0a 	mov.w	ip, #10
 800123c:	4619      	mov	r1, r3
 800123e:	3401      	adds	r4, #1
 8001240:	9305      	str	r3, [sp, #20]
 8001242:	4620      	mov	r0, r4
 8001244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001248:	3a30      	subs	r2, #48	; 0x30
 800124a:	2a09      	cmp	r2, #9
 800124c:	d903      	bls.n	8001256 <_vfiprintf_r+0x1ee>
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0c5      	beq.n	80011de <_vfiprintf_r+0x176>
 8001252:	9105      	str	r1, [sp, #20]
 8001254:	e7c3      	b.n	80011de <_vfiprintf_r+0x176>
 8001256:	4604      	mov	r4, r0
 8001258:	2301      	movs	r3, #1
 800125a:	fb0c 2101 	mla	r1, ip, r1, r2
 800125e:	e7f0      	b.n	8001242 <_vfiprintf_r+0x1da>
 8001260:	ab03      	add	r3, sp, #12
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	462a      	mov	r2, r5
 8001266:	4630      	mov	r0, r6
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <_vfiprintf_r+0x25c>)
 800126a:	a904      	add	r1, sp, #16
 800126c:	f3af 8000 	nop.w
 8001270:	4607      	mov	r7, r0
 8001272:	1c78      	adds	r0, r7, #1
 8001274:	d1d6      	bne.n	8001224 <_vfiprintf_r+0x1bc>
 8001276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001278:	07d9      	lsls	r1, r3, #31
 800127a:	d405      	bmi.n	8001288 <_vfiprintf_r+0x220>
 800127c:	89ab      	ldrh	r3, [r5, #12]
 800127e:	059a      	lsls	r2, r3, #22
 8001280:	d402      	bmi.n	8001288 <_vfiprintf_r+0x220>
 8001282:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001284:	f7ff fd85 	bl	8000d92 <__retarget_lock_release_recursive>
 8001288:	89ab      	ldrh	r3, [r5, #12]
 800128a:	065b      	lsls	r3, r3, #25
 800128c:	f53f af12 	bmi.w	80010b4 <_vfiprintf_r+0x4c>
 8001290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001292:	e711      	b.n	80010b8 <_vfiprintf_r+0x50>
 8001294:	ab03      	add	r3, sp, #12
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	462a      	mov	r2, r5
 800129a:	4630      	mov	r0, r6
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <_vfiprintf_r+0x25c>)
 800129e:	a904      	add	r1, sp, #16
 80012a0:	f000 f882 	bl	80013a8 <_printf_i>
 80012a4:	e7e4      	b.n	8001270 <_vfiprintf_r+0x208>
 80012a6:	bf00      	nop
 80012a8:	0800189c 	.word	0x0800189c
 80012ac:	080018bc 	.word	0x080018bc
 80012b0:	0800187c 	.word	0x0800187c
 80012b4:	080018dc 	.word	0x080018dc
 80012b8:	080018e2 	.word	0x080018e2
 80012bc:	080018e6 	.word	0x080018e6
 80012c0:	00000000 	.word	0x00000000
 80012c4:	08001043 	.word	0x08001043

080012c8 <_printf_common>:
 80012c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012cc:	4616      	mov	r6, r2
 80012ce:	4699      	mov	r9, r3
 80012d0:	688a      	ldr	r2, [r1, #8]
 80012d2:	690b      	ldr	r3, [r1, #16]
 80012d4:	4607      	mov	r7, r0
 80012d6:	4293      	cmp	r3, r2
 80012d8:	bfb8      	it	lt
 80012da:	4613      	movlt	r3, r2
 80012dc:	6033      	str	r3, [r6, #0]
 80012de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80012e2:	460c      	mov	r4, r1
 80012e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012e8:	b10a      	cbz	r2, 80012ee <_printf_common+0x26>
 80012ea:	3301      	adds	r3, #1
 80012ec:	6033      	str	r3, [r6, #0]
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	0699      	lsls	r1, r3, #26
 80012f2:	bf42      	ittt	mi
 80012f4:	6833      	ldrmi	r3, [r6, #0]
 80012f6:	3302      	addmi	r3, #2
 80012f8:	6033      	strmi	r3, [r6, #0]
 80012fa:	6825      	ldr	r5, [r4, #0]
 80012fc:	f015 0506 	ands.w	r5, r5, #6
 8001300:	d106      	bne.n	8001310 <_printf_common+0x48>
 8001302:	f104 0a19 	add.w	sl, r4, #25
 8001306:	68e3      	ldr	r3, [r4, #12]
 8001308:	6832      	ldr	r2, [r6, #0]
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	42ab      	cmp	r3, r5
 800130e:	dc28      	bgt.n	8001362 <_printf_common+0x9a>
 8001310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001314:	1e13      	subs	r3, r2, #0
 8001316:	6822      	ldr	r2, [r4, #0]
 8001318:	bf18      	it	ne
 800131a:	2301      	movne	r3, #1
 800131c:	0692      	lsls	r2, r2, #26
 800131e:	d42d      	bmi.n	800137c <_printf_common+0xb4>
 8001320:	4649      	mov	r1, r9
 8001322:	4638      	mov	r0, r7
 8001324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001328:	47c0      	blx	r8
 800132a:	3001      	adds	r0, #1
 800132c:	d020      	beq.n	8001370 <_printf_common+0xa8>
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	68e5      	ldr	r5, [r4, #12]
 8001332:	f003 0306 	and.w	r3, r3, #6
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf18      	it	ne
 800133a:	2500      	movne	r5, #0
 800133c:	6832      	ldr	r2, [r6, #0]
 800133e:	f04f 0600 	mov.w	r6, #0
 8001342:	68a3      	ldr	r3, [r4, #8]
 8001344:	bf08      	it	eq
 8001346:	1aad      	subeq	r5, r5, r2
 8001348:	6922      	ldr	r2, [r4, #16]
 800134a:	bf08      	it	eq
 800134c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001350:	4293      	cmp	r3, r2
 8001352:	bfc4      	itt	gt
 8001354:	1a9b      	subgt	r3, r3, r2
 8001356:	18ed      	addgt	r5, r5, r3
 8001358:	341a      	adds	r4, #26
 800135a:	42b5      	cmp	r5, r6
 800135c:	d11a      	bne.n	8001394 <_printf_common+0xcc>
 800135e:	2000      	movs	r0, #0
 8001360:	e008      	b.n	8001374 <_printf_common+0xac>
 8001362:	2301      	movs	r3, #1
 8001364:	4652      	mov	r2, sl
 8001366:	4649      	mov	r1, r9
 8001368:	4638      	mov	r0, r7
 800136a:	47c0      	blx	r8
 800136c:	3001      	adds	r0, #1
 800136e:	d103      	bne.n	8001378 <_printf_common+0xb0>
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001378:	3501      	adds	r5, #1
 800137a:	e7c4      	b.n	8001306 <_printf_common+0x3e>
 800137c:	2030      	movs	r0, #48	; 0x30
 800137e:	18e1      	adds	r1, r4, r3
 8001380:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001384:	1c5a      	adds	r2, r3, #1
 8001386:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800138a:	4422      	add	r2, r4
 800138c:	3302      	adds	r3, #2
 800138e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001392:	e7c5      	b.n	8001320 <_printf_common+0x58>
 8001394:	2301      	movs	r3, #1
 8001396:	4622      	mov	r2, r4
 8001398:	4649      	mov	r1, r9
 800139a:	4638      	mov	r0, r7
 800139c:	47c0      	blx	r8
 800139e:	3001      	adds	r0, #1
 80013a0:	d0e6      	beq.n	8001370 <_printf_common+0xa8>
 80013a2:	3601      	adds	r6, #1
 80013a4:	e7d9      	b.n	800135a <_printf_common+0x92>
	...

080013a8 <_printf_i>:
 80013a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013ac:	7e0f      	ldrb	r7, [r1, #24]
 80013ae:	4691      	mov	r9, r2
 80013b0:	2f78      	cmp	r7, #120	; 0x78
 80013b2:	4680      	mov	r8, r0
 80013b4:	460c      	mov	r4, r1
 80013b6:	469a      	mov	sl, r3
 80013b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80013ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80013be:	d807      	bhi.n	80013d0 <_printf_i+0x28>
 80013c0:	2f62      	cmp	r7, #98	; 0x62
 80013c2:	d80a      	bhi.n	80013da <_printf_i+0x32>
 80013c4:	2f00      	cmp	r7, #0
 80013c6:	f000 80d9 	beq.w	800157c <_printf_i+0x1d4>
 80013ca:	2f58      	cmp	r7, #88	; 0x58
 80013cc:	f000 80a4 	beq.w	8001518 <_printf_i+0x170>
 80013d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80013d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80013d8:	e03a      	b.n	8001450 <_printf_i+0xa8>
 80013da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80013de:	2b15      	cmp	r3, #21
 80013e0:	d8f6      	bhi.n	80013d0 <_printf_i+0x28>
 80013e2:	a101      	add	r1, pc, #4	; (adr r1, 80013e8 <_printf_i+0x40>)
 80013e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80013e8:	08001441 	.word	0x08001441
 80013ec:	08001455 	.word	0x08001455
 80013f0:	080013d1 	.word	0x080013d1
 80013f4:	080013d1 	.word	0x080013d1
 80013f8:	080013d1 	.word	0x080013d1
 80013fc:	080013d1 	.word	0x080013d1
 8001400:	08001455 	.word	0x08001455
 8001404:	080013d1 	.word	0x080013d1
 8001408:	080013d1 	.word	0x080013d1
 800140c:	080013d1 	.word	0x080013d1
 8001410:	080013d1 	.word	0x080013d1
 8001414:	08001563 	.word	0x08001563
 8001418:	08001485 	.word	0x08001485
 800141c:	08001545 	.word	0x08001545
 8001420:	080013d1 	.word	0x080013d1
 8001424:	080013d1 	.word	0x080013d1
 8001428:	08001585 	.word	0x08001585
 800142c:	080013d1 	.word	0x080013d1
 8001430:	08001485 	.word	0x08001485
 8001434:	080013d1 	.word	0x080013d1
 8001438:	080013d1 	.word	0x080013d1
 800143c:	0800154d 	.word	0x0800154d
 8001440:	682b      	ldr	r3, [r5, #0]
 8001442:	1d1a      	adds	r2, r3, #4
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	602a      	str	r2, [r5, #0]
 8001448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800144c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001450:	2301      	movs	r3, #1
 8001452:	e0a4      	b.n	800159e <_printf_i+0x1f6>
 8001454:	6820      	ldr	r0, [r4, #0]
 8001456:	6829      	ldr	r1, [r5, #0]
 8001458:	0606      	lsls	r6, r0, #24
 800145a:	f101 0304 	add.w	r3, r1, #4
 800145e:	d50a      	bpl.n	8001476 <_printf_i+0xce>
 8001460:	680e      	ldr	r6, [r1, #0]
 8001462:	602b      	str	r3, [r5, #0]
 8001464:	2e00      	cmp	r6, #0
 8001466:	da03      	bge.n	8001470 <_printf_i+0xc8>
 8001468:	232d      	movs	r3, #45	; 0x2d
 800146a:	4276      	negs	r6, r6
 800146c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001470:	230a      	movs	r3, #10
 8001472:	485e      	ldr	r0, [pc, #376]	; (80015ec <_printf_i+0x244>)
 8001474:	e019      	b.n	80014aa <_printf_i+0x102>
 8001476:	680e      	ldr	r6, [r1, #0]
 8001478:	f010 0f40 	tst.w	r0, #64	; 0x40
 800147c:	602b      	str	r3, [r5, #0]
 800147e:	bf18      	it	ne
 8001480:	b236      	sxthne	r6, r6
 8001482:	e7ef      	b.n	8001464 <_printf_i+0xbc>
 8001484:	682b      	ldr	r3, [r5, #0]
 8001486:	6820      	ldr	r0, [r4, #0]
 8001488:	1d19      	adds	r1, r3, #4
 800148a:	6029      	str	r1, [r5, #0]
 800148c:	0601      	lsls	r1, r0, #24
 800148e:	d501      	bpl.n	8001494 <_printf_i+0xec>
 8001490:	681e      	ldr	r6, [r3, #0]
 8001492:	e002      	b.n	800149a <_printf_i+0xf2>
 8001494:	0646      	lsls	r6, r0, #25
 8001496:	d5fb      	bpl.n	8001490 <_printf_i+0xe8>
 8001498:	881e      	ldrh	r6, [r3, #0]
 800149a:	2f6f      	cmp	r7, #111	; 0x6f
 800149c:	bf0c      	ite	eq
 800149e:	2308      	moveq	r3, #8
 80014a0:	230a      	movne	r3, #10
 80014a2:	4852      	ldr	r0, [pc, #328]	; (80015ec <_printf_i+0x244>)
 80014a4:	2100      	movs	r1, #0
 80014a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80014aa:	6865      	ldr	r5, [r4, #4]
 80014ac:	2d00      	cmp	r5, #0
 80014ae:	bfa8      	it	ge
 80014b0:	6821      	ldrge	r1, [r4, #0]
 80014b2:	60a5      	str	r5, [r4, #8]
 80014b4:	bfa4      	itt	ge
 80014b6:	f021 0104 	bicge.w	r1, r1, #4
 80014ba:	6021      	strge	r1, [r4, #0]
 80014bc:	b90e      	cbnz	r6, 80014c2 <_printf_i+0x11a>
 80014be:	2d00      	cmp	r5, #0
 80014c0:	d04d      	beq.n	800155e <_printf_i+0x1b6>
 80014c2:	4615      	mov	r5, r2
 80014c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80014c8:	fb03 6711 	mls	r7, r3, r1, r6
 80014cc:	5dc7      	ldrb	r7, [r0, r7]
 80014ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80014d2:	4637      	mov	r7, r6
 80014d4:	42bb      	cmp	r3, r7
 80014d6:	460e      	mov	r6, r1
 80014d8:	d9f4      	bls.n	80014c4 <_printf_i+0x11c>
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d10b      	bne.n	80014f6 <_printf_i+0x14e>
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	07de      	lsls	r6, r3, #31
 80014e2:	d508      	bpl.n	80014f6 <_printf_i+0x14e>
 80014e4:	6923      	ldr	r3, [r4, #16]
 80014e6:	6861      	ldr	r1, [r4, #4]
 80014e8:	4299      	cmp	r1, r3
 80014ea:	bfde      	ittt	le
 80014ec:	2330      	movle	r3, #48	; 0x30
 80014ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80014f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80014f6:	1b52      	subs	r2, r2, r5
 80014f8:	6122      	str	r2, [r4, #16]
 80014fa:	464b      	mov	r3, r9
 80014fc:	4621      	mov	r1, r4
 80014fe:	4640      	mov	r0, r8
 8001500:	f8cd a000 	str.w	sl, [sp]
 8001504:	aa03      	add	r2, sp, #12
 8001506:	f7ff fedf 	bl	80012c8 <_printf_common>
 800150a:	3001      	adds	r0, #1
 800150c:	d14c      	bne.n	80015a8 <_printf_i+0x200>
 800150e:	f04f 30ff 	mov.w	r0, #4294967295
 8001512:	b004      	add	sp, #16
 8001514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001518:	4834      	ldr	r0, [pc, #208]	; (80015ec <_printf_i+0x244>)
 800151a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800151e:	6829      	ldr	r1, [r5, #0]
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	f851 6b04 	ldr.w	r6, [r1], #4
 8001526:	6029      	str	r1, [r5, #0]
 8001528:	061d      	lsls	r5, r3, #24
 800152a:	d514      	bpl.n	8001556 <_printf_i+0x1ae>
 800152c:	07df      	lsls	r7, r3, #31
 800152e:	bf44      	itt	mi
 8001530:	f043 0320 	orrmi.w	r3, r3, #32
 8001534:	6023      	strmi	r3, [r4, #0]
 8001536:	b91e      	cbnz	r6, 8001540 <_printf_i+0x198>
 8001538:	6823      	ldr	r3, [r4, #0]
 800153a:	f023 0320 	bic.w	r3, r3, #32
 800153e:	6023      	str	r3, [r4, #0]
 8001540:	2310      	movs	r3, #16
 8001542:	e7af      	b.n	80014a4 <_printf_i+0xfc>
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	f043 0320 	orr.w	r3, r3, #32
 800154a:	6023      	str	r3, [r4, #0]
 800154c:	2378      	movs	r3, #120	; 0x78
 800154e:	4828      	ldr	r0, [pc, #160]	; (80015f0 <_printf_i+0x248>)
 8001550:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001554:	e7e3      	b.n	800151e <_printf_i+0x176>
 8001556:	0659      	lsls	r1, r3, #25
 8001558:	bf48      	it	mi
 800155a:	b2b6      	uxthmi	r6, r6
 800155c:	e7e6      	b.n	800152c <_printf_i+0x184>
 800155e:	4615      	mov	r5, r2
 8001560:	e7bb      	b.n	80014da <_printf_i+0x132>
 8001562:	682b      	ldr	r3, [r5, #0]
 8001564:	6826      	ldr	r6, [r4, #0]
 8001566:	1d18      	adds	r0, r3, #4
 8001568:	6961      	ldr	r1, [r4, #20]
 800156a:	6028      	str	r0, [r5, #0]
 800156c:	0635      	lsls	r5, r6, #24
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	d501      	bpl.n	8001576 <_printf_i+0x1ce>
 8001572:	6019      	str	r1, [r3, #0]
 8001574:	e002      	b.n	800157c <_printf_i+0x1d4>
 8001576:	0670      	lsls	r0, r6, #25
 8001578:	d5fb      	bpl.n	8001572 <_printf_i+0x1ca>
 800157a:	8019      	strh	r1, [r3, #0]
 800157c:	2300      	movs	r3, #0
 800157e:	4615      	mov	r5, r2
 8001580:	6123      	str	r3, [r4, #16]
 8001582:	e7ba      	b.n	80014fa <_printf_i+0x152>
 8001584:	682b      	ldr	r3, [r5, #0]
 8001586:	2100      	movs	r1, #0
 8001588:	1d1a      	adds	r2, r3, #4
 800158a:	602a      	str	r2, [r5, #0]
 800158c:	681d      	ldr	r5, [r3, #0]
 800158e:	6862      	ldr	r2, [r4, #4]
 8001590:	4628      	mov	r0, r5
 8001592:	f000 f8d9 	bl	8001748 <memchr>
 8001596:	b108      	cbz	r0, 800159c <_printf_i+0x1f4>
 8001598:	1b40      	subs	r0, r0, r5
 800159a:	6060      	str	r0, [r4, #4]
 800159c:	6863      	ldr	r3, [r4, #4]
 800159e:	6123      	str	r3, [r4, #16]
 80015a0:	2300      	movs	r3, #0
 80015a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015a6:	e7a8      	b.n	80014fa <_printf_i+0x152>
 80015a8:	462a      	mov	r2, r5
 80015aa:	4649      	mov	r1, r9
 80015ac:	4640      	mov	r0, r8
 80015ae:	6923      	ldr	r3, [r4, #16]
 80015b0:	47d0      	blx	sl
 80015b2:	3001      	adds	r0, #1
 80015b4:	d0ab      	beq.n	800150e <_printf_i+0x166>
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	079b      	lsls	r3, r3, #30
 80015ba:	d413      	bmi.n	80015e4 <_printf_i+0x23c>
 80015bc:	68e0      	ldr	r0, [r4, #12]
 80015be:	9b03      	ldr	r3, [sp, #12]
 80015c0:	4298      	cmp	r0, r3
 80015c2:	bfb8      	it	lt
 80015c4:	4618      	movlt	r0, r3
 80015c6:	e7a4      	b.n	8001512 <_printf_i+0x16a>
 80015c8:	2301      	movs	r3, #1
 80015ca:	4632      	mov	r2, r6
 80015cc:	4649      	mov	r1, r9
 80015ce:	4640      	mov	r0, r8
 80015d0:	47d0      	blx	sl
 80015d2:	3001      	adds	r0, #1
 80015d4:	d09b      	beq.n	800150e <_printf_i+0x166>
 80015d6:	3501      	adds	r5, #1
 80015d8:	68e3      	ldr	r3, [r4, #12]
 80015da:	9903      	ldr	r1, [sp, #12]
 80015dc:	1a5b      	subs	r3, r3, r1
 80015de:	42ab      	cmp	r3, r5
 80015e0:	dcf2      	bgt.n	80015c8 <_printf_i+0x220>
 80015e2:	e7eb      	b.n	80015bc <_printf_i+0x214>
 80015e4:	2500      	movs	r5, #0
 80015e6:	f104 0619 	add.w	r6, r4, #25
 80015ea:	e7f5      	b.n	80015d8 <_printf_i+0x230>
 80015ec:	080018ed 	.word	0x080018ed
 80015f0:	080018fe 	.word	0x080018fe

080015f4 <_sbrk_r>:
 80015f4:	b538      	push	{r3, r4, r5, lr}
 80015f6:	2300      	movs	r3, #0
 80015f8:	4d05      	ldr	r5, [pc, #20]	; (8001610 <_sbrk_r+0x1c>)
 80015fa:	4604      	mov	r4, r0
 80015fc:	4608      	mov	r0, r1
 80015fe:	602b      	str	r3, [r5, #0]
 8001600:	f000 f8f6 	bl	80017f0 <_sbrk>
 8001604:	1c43      	adds	r3, r0, #1
 8001606:	d102      	bne.n	800160e <_sbrk_r+0x1a>
 8001608:	682b      	ldr	r3, [r5, #0]
 800160a:	b103      	cbz	r3, 800160e <_sbrk_r+0x1a>
 800160c:	6023      	str	r3, [r4, #0]
 800160e:	bd38      	pop	{r3, r4, r5, pc}
 8001610:	200000e8 	.word	0x200000e8

08001614 <__sread>:
 8001614:	b510      	push	{r4, lr}
 8001616:	460c      	mov	r4, r1
 8001618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800161c:	f000 f8ae 	bl	800177c <_read_r>
 8001620:	2800      	cmp	r0, #0
 8001622:	bfab      	itete	ge
 8001624:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001626:	89a3      	ldrhlt	r3, [r4, #12]
 8001628:	181b      	addge	r3, r3, r0
 800162a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800162e:	bfac      	ite	ge
 8001630:	6563      	strge	r3, [r4, #84]	; 0x54
 8001632:	81a3      	strhlt	r3, [r4, #12]
 8001634:	bd10      	pop	{r4, pc}

08001636 <__swrite>:
 8001636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800163a:	461f      	mov	r7, r3
 800163c:	898b      	ldrh	r3, [r1, #12]
 800163e:	4605      	mov	r5, r0
 8001640:	05db      	lsls	r3, r3, #23
 8001642:	460c      	mov	r4, r1
 8001644:	4616      	mov	r6, r2
 8001646:	d505      	bpl.n	8001654 <__swrite+0x1e>
 8001648:	2302      	movs	r3, #2
 800164a:	2200      	movs	r2, #0
 800164c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001650:	f000 f868 	bl	8001724 <_lseek_r>
 8001654:	89a3      	ldrh	r3, [r4, #12]
 8001656:	4632      	mov	r2, r6
 8001658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800165c:	81a3      	strh	r3, [r4, #12]
 800165e:	4628      	mov	r0, r5
 8001660:	463b      	mov	r3, r7
 8001662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800166a:	f000 b817 	b.w	800169c <_write_r>

0800166e <__sseek>:
 800166e:	b510      	push	{r4, lr}
 8001670:	460c      	mov	r4, r1
 8001672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001676:	f000 f855 	bl	8001724 <_lseek_r>
 800167a:	1c43      	adds	r3, r0, #1
 800167c:	89a3      	ldrh	r3, [r4, #12]
 800167e:	bf15      	itete	ne
 8001680:	6560      	strne	r0, [r4, #84]	; 0x54
 8001682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800168a:	81a3      	strheq	r3, [r4, #12]
 800168c:	bf18      	it	ne
 800168e:	81a3      	strhne	r3, [r4, #12]
 8001690:	bd10      	pop	{r4, pc}

08001692 <__sclose>:
 8001692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001696:	f000 b813 	b.w	80016c0 <_close_r>
	...

0800169c <_write_r>:
 800169c:	b538      	push	{r3, r4, r5, lr}
 800169e:	4604      	mov	r4, r0
 80016a0:	4608      	mov	r0, r1
 80016a2:	4611      	mov	r1, r2
 80016a4:	2200      	movs	r2, #0
 80016a6:	4d05      	ldr	r5, [pc, #20]	; (80016bc <_write_r+0x20>)
 80016a8:	602a      	str	r2, [r5, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	f000 f8ae 	bl	800180c <_write>
 80016b0:	1c43      	adds	r3, r0, #1
 80016b2:	d102      	bne.n	80016ba <_write_r+0x1e>
 80016b4:	682b      	ldr	r3, [r5, #0]
 80016b6:	b103      	cbz	r3, 80016ba <_write_r+0x1e>
 80016b8:	6023      	str	r3, [r4, #0]
 80016ba:	bd38      	pop	{r3, r4, r5, pc}
 80016bc:	200000e8 	.word	0x200000e8

080016c0 <_close_r>:
 80016c0:	b538      	push	{r3, r4, r5, lr}
 80016c2:	2300      	movs	r3, #0
 80016c4:	4d05      	ldr	r5, [pc, #20]	; (80016dc <_close_r+0x1c>)
 80016c6:	4604      	mov	r4, r0
 80016c8:	4608      	mov	r0, r1
 80016ca:	602b      	str	r3, [r5, #0]
 80016cc:	f000 f868 	bl	80017a0 <_close>
 80016d0:	1c43      	adds	r3, r0, #1
 80016d2:	d102      	bne.n	80016da <_close_r+0x1a>
 80016d4:	682b      	ldr	r3, [r5, #0]
 80016d6:	b103      	cbz	r3, 80016da <_close_r+0x1a>
 80016d8:	6023      	str	r3, [r4, #0]
 80016da:	bd38      	pop	{r3, r4, r5, pc}
 80016dc:	200000e8 	.word	0x200000e8

080016e0 <_fstat_r>:
 80016e0:	b538      	push	{r3, r4, r5, lr}
 80016e2:	2300      	movs	r3, #0
 80016e4:	4d06      	ldr	r5, [pc, #24]	; (8001700 <_fstat_r+0x20>)
 80016e6:	4604      	mov	r4, r0
 80016e8:	4608      	mov	r0, r1
 80016ea:	4611      	mov	r1, r2
 80016ec:	602b      	str	r3, [r5, #0]
 80016ee:	f000 f85f 	bl	80017b0 <_fstat>
 80016f2:	1c43      	adds	r3, r0, #1
 80016f4:	d102      	bne.n	80016fc <_fstat_r+0x1c>
 80016f6:	682b      	ldr	r3, [r5, #0]
 80016f8:	b103      	cbz	r3, 80016fc <_fstat_r+0x1c>
 80016fa:	6023      	str	r3, [r4, #0]
 80016fc:	bd38      	pop	{r3, r4, r5, pc}
 80016fe:	bf00      	nop
 8001700:	200000e8 	.word	0x200000e8

08001704 <_isatty_r>:
 8001704:	b538      	push	{r3, r4, r5, lr}
 8001706:	2300      	movs	r3, #0
 8001708:	4d05      	ldr	r5, [pc, #20]	; (8001720 <_isatty_r+0x1c>)
 800170a:	4604      	mov	r4, r0
 800170c:	4608      	mov	r0, r1
 800170e:	602b      	str	r3, [r5, #0]
 8001710:	f000 f856 	bl	80017c0 <_isatty>
 8001714:	1c43      	adds	r3, r0, #1
 8001716:	d102      	bne.n	800171e <_isatty_r+0x1a>
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	b103      	cbz	r3, 800171e <_isatty_r+0x1a>
 800171c:	6023      	str	r3, [r4, #0]
 800171e:	bd38      	pop	{r3, r4, r5, pc}
 8001720:	200000e8 	.word	0x200000e8

08001724 <_lseek_r>:
 8001724:	b538      	push	{r3, r4, r5, lr}
 8001726:	4604      	mov	r4, r0
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	2200      	movs	r2, #0
 800172e:	4d05      	ldr	r5, [pc, #20]	; (8001744 <_lseek_r+0x20>)
 8001730:	602a      	str	r2, [r5, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	f000 f84c 	bl	80017d0 <_lseek>
 8001738:	1c43      	adds	r3, r0, #1
 800173a:	d102      	bne.n	8001742 <_lseek_r+0x1e>
 800173c:	682b      	ldr	r3, [r5, #0]
 800173e:	b103      	cbz	r3, 8001742 <_lseek_r+0x1e>
 8001740:	6023      	str	r3, [r4, #0]
 8001742:	bd38      	pop	{r3, r4, r5, pc}
 8001744:	200000e8 	.word	0x200000e8

08001748 <memchr>:
 8001748:	4603      	mov	r3, r0
 800174a:	b510      	push	{r4, lr}
 800174c:	b2c9      	uxtb	r1, r1
 800174e:	4402      	add	r2, r0
 8001750:	4293      	cmp	r3, r2
 8001752:	4618      	mov	r0, r3
 8001754:	d101      	bne.n	800175a <memchr+0x12>
 8001756:	2000      	movs	r0, #0
 8001758:	e003      	b.n	8001762 <memchr+0x1a>
 800175a:	7804      	ldrb	r4, [r0, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	428c      	cmp	r4, r1
 8001760:	d1f6      	bne.n	8001750 <memchr+0x8>
 8001762:	bd10      	pop	{r4, pc}

08001764 <__malloc_lock>:
 8001764:	4801      	ldr	r0, [pc, #4]	; (800176c <__malloc_lock+0x8>)
 8001766:	f7ff bb13 	b.w	8000d90 <__retarget_lock_acquire_recursive>
 800176a:	bf00      	nop
 800176c:	200000dc 	.word	0x200000dc

08001770 <__malloc_unlock>:
 8001770:	4801      	ldr	r0, [pc, #4]	; (8001778 <__malloc_unlock+0x8>)
 8001772:	f7ff bb0e 	b.w	8000d92 <__retarget_lock_release_recursive>
 8001776:	bf00      	nop
 8001778:	200000dc 	.word	0x200000dc

0800177c <_read_r>:
 800177c:	b538      	push	{r3, r4, r5, lr}
 800177e:	4604      	mov	r4, r0
 8001780:	4608      	mov	r0, r1
 8001782:	4611      	mov	r1, r2
 8001784:	2200      	movs	r2, #0
 8001786:	4d05      	ldr	r5, [pc, #20]	; (800179c <_read_r+0x20>)
 8001788:	602a      	str	r2, [r5, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	f000 f828 	bl	80017e0 <_read>
 8001790:	1c43      	adds	r3, r0, #1
 8001792:	d102      	bne.n	800179a <_read_r+0x1e>
 8001794:	682b      	ldr	r3, [r5, #0]
 8001796:	b103      	cbz	r3, 800179a <_read_r+0x1e>
 8001798:	6023      	str	r3, [r4, #0]
 800179a:	bd38      	pop	{r3, r4, r5, pc}
 800179c:	200000e8 	.word	0x200000e8

080017a0 <_close>:
 80017a0:	2258      	movs	r2, #88	; 0x58
 80017a2:	4b02      	ldr	r3, [pc, #8]	; (80017ac <_close+0xc>)
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	4770      	bx	lr
 80017ac:	200000e8 	.word	0x200000e8

080017b0 <_fstat>:
 80017b0:	2258      	movs	r2, #88	; 0x58
 80017b2:	4b02      	ldr	r3, [pc, #8]	; (80017bc <_fstat+0xc>)
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	4770      	bx	lr
 80017bc:	200000e8 	.word	0x200000e8

080017c0 <_isatty>:
 80017c0:	2258      	movs	r2, #88	; 0x58
 80017c2:	4b02      	ldr	r3, [pc, #8]	; (80017cc <_isatty+0xc>)
 80017c4:	2000      	movs	r0, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	200000e8 	.word	0x200000e8

080017d0 <_lseek>:
 80017d0:	2258      	movs	r2, #88	; 0x58
 80017d2:	4b02      	ldr	r3, [pc, #8]	; (80017dc <_lseek+0xc>)
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	4770      	bx	lr
 80017dc:	200000e8 	.word	0x200000e8

080017e0 <_read>:
 80017e0:	2258      	movs	r2, #88	; 0x58
 80017e2:	4b02      	ldr	r3, [pc, #8]	; (80017ec <_read+0xc>)
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	4770      	bx	lr
 80017ec:	200000e8 	.word	0x200000e8

080017f0 <_sbrk>:
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <_sbrk+0x14>)
 80017f2:	4603      	mov	r3, r0
 80017f4:	6811      	ldr	r1, [r2, #0]
 80017f6:	b909      	cbnz	r1, 80017fc <_sbrk+0xc>
 80017f8:	4903      	ldr	r1, [pc, #12]	; (8001808 <_sbrk+0x18>)
 80017fa:	6011      	str	r1, [r2, #0]
 80017fc:	6810      	ldr	r0, [r2, #0]
 80017fe:	4403      	add	r3, r0
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4770      	bx	lr
 8001804:	200000ec 	.word	0x200000ec
 8001808:	200000f0 	.word	0x200000f0

0800180c <_write>:
 800180c:	2258      	movs	r2, #88	; 0x58
 800180e:	4b02      	ldr	r3, [pc, #8]	; (8001818 <_write+0xc>)
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	4770      	bx	lr
 8001818:	200000e8 	.word	0x200000e8

0800181c <_init>:
 800181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181e:	bf00      	nop
 8001820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001822:	bc08      	pop	{r3}
 8001824:	469e      	mov	lr, r3
 8001826:	4770      	bx	lr

08001828 <_fini>:
 8001828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182a:	bf00      	nop
 800182c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800182e:	bc08      	pop	{r3}
 8001830:	469e      	mov	lr, r3
 8001832:	4770      	bx	lr
