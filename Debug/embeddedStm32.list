
embeddedStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001828  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08001958  08001958  00011958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a34  08001a34  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001a34  08001a34  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a34  08001a34  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a34  08001a34  00011a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a38  08001a38  00011a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08001aac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08001aac  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fdf  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000646  00000000  00000000  00021078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  000216c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000138  00000000  00000000  00021850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000850  00000000  00000000  00021988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002063  00000000  00000000  000221d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058c8e  00000000  00000000  0002423b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007cec9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d5c  00000000  00000000  0007cf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  0007dc78  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  0007dd14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000070 	.word	0x20000070
 800014c:	00000000 	.word	0x00000000
 8000150:	08001940 	.word	0x08001940

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000074 	.word	0x20000074
 800016c:	08001940 	.word	0x08001940

08000170 <GPIO_configureRCC>:
 *  Created on: Jun 5, 2023
 *      Author: nguye
 */
#include "GPIO_configure.h"

void GPIO_configureRCC(char* GPIOx){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	while(*GPIOx){
 8000178:	e020      	b.n	80001bc <GPIO_configureRCC+0x4c>
		if(*GPIOx == 'C') RCC->APB2ENR |= (1 << 4);
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	2b43      	cmp	r3, #67	; 0x43
 8000180:	d105      	bne.n	800018e <GPIO_configureRCC+0x1e>
 8000182:	4b13      	ldr	r3, [pc, #76]	; (80001d0 <GPIO_configureRCC+0x60>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a12      	ldr	r2, [pc, #72]	; (80001d0 <GPIO_configureRCC+0x60>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'B') RCC->APB2ENR |= (1 << 3);
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	2b42      	cmp	r3, #66	; 0x42
 8000194:	d105      	bne.n	80001a2 <GPIO_configureRCC+0x32>
 8000196:	4b0e      	ldr	r3, [pc, #56]	; (80001d0 <GPIO_configureRCC+0x60>)
 8000198:	699b      	ldr	r3, [r3, #24]
 800019a:	4a0d      	ldr	r2, [pc, #52]	; (80001d0 <GPIO_configureRCC+0x60>)
 800019c:	f043 0308 	orr.w	r3, r3, #8
 80001a0:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'A') RCC->APB2ENR |= (1 << 2);
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	2b41      	cmp	r3, #65	; 0x41
 80001a8:	d105      	bne.n	80001b6 <GPIO_configureRCC+0x46>
 80001aa:	4b09      	ldr	r3, [pc, #36]	; (80001d0 <GPIO_configureRCC+0x60>)
 80001ac:	699b      	ldr	r3, [r3, #24]
 80001ae:	4a08      	ldr	r2, [pc, #32]	; (80001d0 <GPIO_configureRCC+0x60>)
 80001b0:	f043 0304 	orr.w	r3, r3, #4
 80001b4:	6193      	str	r3, [r2, #24]
		GPIOx++;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	3301      	adds	r3, #1
 80001ba:	607b      	str	r3, [r7, #4]
	while(*GPIOx){
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d1da      	bne.n	800017a <GPIO_configureRCC+0xa>
	}
}
 80001c4:	bf00      	nop
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40021000 	.word	0x40021000

080001d4 <GPIO_configure>:
void GPIO_configure(GPIO_TypeDef*GPIOx, uint8_t* Pin, uint8_t* mode){
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
	while(*Pin){
 80001e0:	e03e      	b.n	8000260 <GPIO_configure+0x8c>
		if(*Pin > 7){
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	2b07      	cmp	r3, #7
 80001e8:	d91b      	bls.n	8000222 <GPIO_configure+0x4e>
			GPIOx->CRH &= ~(15<<(*Pin * 4 - 32));
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	68ba      	ldr	r2, [r7, #8]
 80001f0:	7812      	ldrb	r2, [r2, #0]
 80001f2:	3a08      	subs	r2, #8
 80001f4:	0092      	lsls	r2, r2, #2
 80001f6:	210f      	movs	r1, #15
 80001f8:	fa01 f202 	lsl.w	r2, r1, r2
 80001fc:	43d2      	mvns	r2, r2
 80001fe:	401a      	ands	r2, r3
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	605a      	str	r2, [r3, #4]
			GPIOx->CRH |= *mode << (*Pin * 4 - 32);
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	687a      	ldr	r2, [r7, #4]
 800020a:	7812      	ldrb	r2, [r2, #0]
 800020c:	4611      	mov	r1, r2
 800020e:	68ba      	ldr	r2, [r7, #8]
 8000210:	7812      	ldrb	r2, [r2, #0]
 8000212:	3a08      	subs	r2, #8
 8000214:	0092      	lsls	r2, r2, #2
 8000216:	fa01 f202 	lsl.w	r2, r1, r2
 800021a:	431a      	orrs	r2, r3
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	e018      	b.n	8000254 <GPIO_configure+0x80>
		}else{
			GPIOx->CRL &= ~(15<<(*Pin * 4));
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	7812      	ldrb	r2, [r2, #0]
 800022a:	0092      	lsls	r2, r2, #2
 800022c:	210f      	movs	r1, #15
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	43d2      	mvns	r2, r2
 8000234:	401a      	ands	r2, r3
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	601a      	str	r2, [r3, #0]
			GPIOx->CRL |= *mode << (*Pin * 4);
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	7812      	ldrb	r2, [r2, #0]
 8000242:	4611      	mov	r1, r2
 8000244:	68ba      	ldr	r2, [r7, #8]
 8000246:	7812      	ldrb	r2, [r2, #0]
 8000248:	0092      	lsls	r2, r2, #2
 800024a:	fa01 f202 	lsl.w	r2, r1, r2
 800024e:	431a      	orrs	r2, r3
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	601a      	str	r2, [r3, #0]
		}
		Pin++;
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	3301      	adds	r3, #1
 8000258:	60bb      	str	r3, [r7, #8]
		mode++;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	3301      	adds	r3, #1
 800025e:	607b      	str	r3, [r7, #4]
	while(*Pin){
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d1bc      	bne.n	80001e2 <GPIO_configure+0xe>
	}
}
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	3714      	adds	r7, #20
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr

08000274 <SystemInitAnh>:
 *      Author: nguye
 */
#include "stm32f103.h"
#include "stm32f1xx.h"

void SystemInitAnh(void){
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000278:	4b07      	ldr	r3, [pc, #28]	; (8000298 <SystemInitAnh+0x24>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a06      	ldr	r2, [pc, #24]	; (8000298 <SystemInitAnh+0x24>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= AFIO_MAPR_SWJ_CFG;
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <SystemInitAnh+0x28>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <SystemInitAnh+0x28>)
 800028a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800028e:	6053      	str	r3, [r2, #4]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40021000 	.word	0x40021000
 800029c:	40010000 	.word	0x40010000

080002a0 <RCC_Configure>:
void RCC_Configure(){
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 80002a4:	4b2b      	ldr	r3, [pc, #172]	; (8000354 <RCC_Configure+0xb4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a2a      	ldr	r2, [pc, #168]	; (8000354 <RCC_Configure+0xb4>)
 80002aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ae:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 80002b0:	bf00      	nop
 80002b2:	4b28      	ldr	r3, [pc, #160]	; (8000354 <RCC_Configure+0xb4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d0f9      	beq.n	80002b2 <RCC_Configure+0x12>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002be:	4b25      	ldr	r3, [pc, #148]	; (8000354 <RCC_Configure+0xb4>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	4a24      	ldr	r2, [pc, #144]	; (8000354 <RCC_Configure+0xb4>)
 80002c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002c8:	61d3      	str	r3, [r2, #28]

	FLASH->ACR |= FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 80002ca:	4b23      	ldr	r3, [pc, #140]	; (8000358 <RCC_Configure+0xb8>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a22      	ldr	r2, [pc, #136]	; (8000358 <RCC_Configure+0xb8>)
 80002d0:	f043 0312 	orr.w	r3, r3, #18
 80002d4:	6013      	str	r3, [r2, #0]
	while (!(FLASH->ACR & FLASH_ACR_PRFTBS));
 80002d6:	bf00      	nop
 80002d8:	4b1f      	ldr	r3, [pc, #124]	; (8000358 <RCC_Configure+0xb8>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f003 0320 	and.w	r3, r3, #32
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0f9      	beq.n	80002d8 <RCC_Configure+0x38>

	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <RCC_Configure+0xb4>)
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	4a1a      	ldr	r2, [pc, #104]	; (8000354 <RCC_Configure+0xb4>)
 80002ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ee:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (7 << 18); // nhân RCC với 9
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <RCC_Configure+0xb4>)
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	4a17      	ldr	r2, [pc, #92]	; (8000354 <RCC_Configure+0xb4>)
 80002f6:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80002fa:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (4 << 8); // chia để bus APB1 max 36
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <RCC_Configure+0xb4>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	4a14      	ldr	r2, [pc, #80]	; (8000354 <RCC_Configure+0xb4>)
 8000302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000306:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (3 << 14); // chia ADC cho 6 = 9M
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <RCC_Configure+0xb4>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	4a11      	ldr	r2, [pc, #68]	; (8000354 <RCC_Configure+0xb4>)
 800030e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000312:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <RCC_Configure+0xb4>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <RCC_Configure+0xb4>)
 800031a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800031e:	6013      	str	r3, [r2, #0]

	while (!(RCC->CR & RCC_CR_PLLRDY));
 8000320:	bf00      	nop
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <RCC_Configure+0xb4>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0f9      	beq.n	8000322 <RCC_Configure+0x82>
	RCC->CFGR |= (2 << 0);
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <RCC_Configure+0xb4>)
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	4a08      	ldr	r2, [pc, #32]	; (8000354 <RCC_Configure+0xb4>)
 8000334:	f043 0302 	orr.w	r3, r3, #2
 8000338:	6053      	str	r3, [r2, #4]
	while (!(RCC->CFGR & (2 << 2)));
 800033a:	bf00      	nop
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <RCC_Configure+0xb4>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	f003 0308 	and.w	r3, r3, #8
 8000344:	2b00      	cmp	r3, #0
 8000346:	d0f9      	beq.n	800033c <RCC_Configure+0x9c>
}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000
 8000358:	40022000 	.word	0x40022000

0800035c <createTask>:
uint8_t curent_task = 1;
uint32_t g_tick_count = 0;
TCB_t user_task[MAX_TASK];


void createTask(void (*myTask)(void)){
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  user_task[numberTask+1].task_handler = myTask;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <createTask+0x30>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	3301      	adds	r3, #1
 800036a:	4a09      	ldr	r2, [pc, #36]	; (8000390 <createTask+0x34>)
 800036c:	011b      	lsls	r3, r3, #4
 800036e:	4413      	add	r3, r2
 8000370:	330c      	adds	r3, #12
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	601a      	str	r2, [r3, #0]
  numberTask++;
 8000376:	4b05      	ldr	r3, [pc, #20]	; (800038c <createTask+0x30>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	3301      	adds	r3, #1
 800037c:	b2da      	uxtb	r2, r3
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <createTask+0x30>)
 8000380:	701a      	strb	r2, [r3, #0]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	2000008c 	.word	0x2000008c
 8000390:	20000094 	.word	0x20000094

08000394 <init_systick_timer>:

void init_systick_timer(uint32_t tick_hz){
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	SysTick->LOAD |= ((SYSTICK_TIM_CLK / TICK_HZ) - 1) & 0x00FFFFFF;
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <init_systick_timer+0x2c>)
 800039e:	685a      	ldr	r2, [r3, #4]
 80003a0:	4907      	ldr	r1, [pc, #28]	; (80003c0 <init_systick_timer+0x2c>)
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <init_systick_timer+0x30>)
 80003a4:	4313      	orrs	r3, r2
 80003a6:	604b      	str	r3, [r1, #4]
	SysTick->CTRL |= (7 << 0);
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <init_systick_timer+0x2c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <init_systick_timer+0x2c>)
 80003ae:	f043 0307 	orr.w	r3, r3, #7
 80003b2:	6013      	str	r3, [r2, #0]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	e000e010 	.word	0xe000e010
 80003c4:	0001193f 	.word	0x0001193f

080003c8 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack){
 80003c8:	4603      	mov	r3, r0
	__asm volatile ("MSR MSP, %0": : "r"(sched_top_of_stack));
 80003ca:	f383 8808 	msr	MSP, r3
	__asm volatile ("BX LR");
 80003ce:	4770      	bx	lr
}
 80003d0:	bf00      	nop
	...

080003d4 <init_task_stack>:

void init_task_stack(void (*idleTask)(void)){
 80003d4:	b480      	push	{r7}
 80003d6:	b087      	sub	sp, #28
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	user_task[0].psp_value    = IDLE_STACK_START;
 80003dc:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <init_task_stack+0xd0>)
 80003de:	4a32      	ldr	r2, [pc, #200]	; (80004a8 <init_task_stack+0xd4>)
 80003e0:	601a      	str	r2, [r3, #0]
	user_task[0].task_handler = idleTask;
 80003e2:	4a30      	ldr	r2, [pc, #192]	; (80004a4 <init_task_stack+0xd0>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	60d3      	str	r3, [r2, #12]
	uint32_t *pPSP;
	for(int i = 0; i < sizeof(user_task) / sizeof(user_task[0]); i++){
 80003e8:	2300      	movs	r3, #0
 80003ea:	613b      	str	r3, [r7, #16]
 80003ec:	e051      	b.n	8000492 <init_task_stack+0xbe>
		user_task[i].curent_state = TASK_RUNNING_STATE;
 80003ee:	4a2d      	ldr	r2, [pc, #180]	; (80004a4 <init_task_stack+0xd0>)
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	011b      	lsls	r3, r3, #4
 80003f4:	4413      	add	r3, r2
 80003f6:	3308      	adds	r3, #8
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
    if(i + 1 < sizeof(user_task) / sizeof(user_task[0])){
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	3301      	adds	r3, #1
 8000400:	2b04      	cmp	r3, #4
 8000402:	d80c      	bhi.n	800041e <init_task_stack+0x4a>
      user_task[i+1].psp_value = (SRAM_END - (i * SIZE_TASK_STACK));
 8000404:	693b      	ldr	r3, [r7, #16]
 8000406:	025b      	lsls	r3, r3, #9
 8000408:	4619      	mov	r1, r3
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
 8000412:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8000416:	4923      	ldr	r1, [pc, #140]	; (80004a4 <init_task_stack+0xd0>)
 8000418:	0112      	lsls	r2, r2, #4
 800041a:	440a      	add	r2, r1
 800041c:	6013      	str	r3, [r2, #0]
    }
		pPSP = (uint32_t*) user_task[i].psp_value;
 800041e:	4a21      	ldr	r2, [pc, #132]	; (80004a4 <init_task_stack+0xd0>)
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	4413      	add	r3, r2
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	617b      	str	r3, [r7, #20]
		pPSP--;
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	3b04      	subs	r3, #4
 800042e:	617b      	str	r3, [r7, #20]
		*pPSP = DUMMY_XPSR;
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000436:	601a      	str	r2, [r3, #0]
		pPSP--;
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	3b04      	subs	r3, #4
 800043c:	617b      	str	r3, [r7, #20]
		*pPSP = (uint32_t) user_task[i].task_handler;
 800043e:	4a19      	ldr	r2, [pc, #100]	; (80004a4 <init_task_stack+0xd0>)
 8000440:	693b      	ldr	r3, [r7, #16]
 8000442:	011b      	lsls	r3, r3, #4
 8000444:	4413      	add	r3, r2
 8000446:	330c      	adds	r3, #12
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	461a      	mov	r2, r3
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	601a      	str	r2, [r3, #0]
		pPSP--;
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	3b04      	subs	r3, #4
 8000454:	617b      	str	r3, [r7, #20]
		*pPSP |= 0xFFFFFFFD;
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f063 0202 	orn	r2, r3, #2
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++){
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	e008      	b.n	800047a <init_task_stack+0xa6>
			pPSP--;
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	3b04      	subs	r3, #4
 800046c:	617b      	str	r3, [r7, #20]
			*pPSP = 0;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++){
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	3301      	adds	r3, #1
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	2b0c      	cmp	r3, #12
 800047e:	ddf3      	ble.n	8000468 <init_task_stack+0x94>

		}
		user_task[i].psp_value = (uint32_t)pPSP;
 8000480:	697a      	ldr	r2, [r7, #20]
 8000482:	4908      	ldr	r1, [pc, #32]	; (80004a4 <init_task_stack+0xd0>)
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	011b      	lsls	r3, r3, #4
 8000488:	440b      	add	r3, r1
 800048a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < sizeof(user_task) / sizeof(user_task[0]); i++){
 800048c:	693b      	ldr	r3, [r7, #16]
 800048e:	3301      	adds	r3, #1
 8000490:	613b      	str	r3, [r7, #16]
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	2b04      	cmp	r3, #4
 8000496:	d9aa      	bls.n	80003ee <init_task_stack+0x1a>
	}
}
 8000498:	bf00      	nop
 800049a:	bf00      	nop
 800049c:	371c      	adds	r7, #28
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	20000094 	.word	0x20000094
 80004a8:	20004200 	.word	0x20004200

080004ac <enable_rpocessor_faults>:

void enable_rpocessor_faults(void){
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
	SCB->SHCSR |= (7 << 16);
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <enable_rpocessor_faults+0x18>)
 80004b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b4:	4a03      	ldr	r2, [pc, #12]	; (80004c4 <enable_rpocessor_faults+0x18>)
 80004b6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80004ba:	6253      	str	r3, [r2, #36]	; 0x24
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <get_psp_value>:

uint32_t get_psp_value(void){
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	return user_task[curent_task].psp_value;
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <get_psp_value+0x18>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <get_psp_value+0x1c>)
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	4413      	add	r3, r2
 80004d6:	681b      	ldr	r3, [r3, #0]
}
 80004d8:	4618      	mov	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	20000000 	.word	0x20000000
 80004e4:	20000094 	.word	0x20000094

080004e8 <save_psp_value>:

void save_psp_value(uint32_t curent_psp_value){
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	user_task[curent_task].psp_value = curent_psp_value;
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <save_psp_value+0x20>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4a05      	ldr	r2, [pc, #20]	; (800050c <save_psp_value+0x24>)
 80004f6:	011b      	lsls	r3, r3, #4
 80004f8:	4413      	add	r3, r2
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	20000000 	.word	0x20000000
 800050c:	20000094 	.word	0x20000094

08000510 <update_next_task>:

void update_next_task(void){
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
	int state = TASK_BLOCK_STATE;
 8000516:	2301      	movs	r3, #1
 8000518:	607b      	str	r3, [r7, #4]
	for (int i =0; i < sizeof(user_task) / sizeof(user_task[0]); i++){
 800051a:	2300      	movs	r3, #0
 800051c:	603b      	str	r3, [r7, #0]
 800051e:	e024      	b.n	800056a <update_next_task+0x5a>
		curent_task ++;
 8000520:	4b1a      	ldr	r3, [pc, #104]	; (800058c <update_next_task+0x7c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b18      	ldr	r3, [pc, #96]	; (800058c <update_next_task+0x7c>)
 800052a:	701a      	strb	r2, [r3, #0]
		curent_task %= sizeof(user_task) / sizeof(user_task[0]);
 800052c:	4b17      	ldr	r3, [pc, #92]	; (800058c <update_next_task+0x7c>)
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <update_next_task+0x80>)
 8000532:	fba3 1302 	umull	r1, r3, r3, r2
 8000536:	0899      	lsrs	r1, r3, #2
 8000538:	460b      	mov	r3, r1
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	440b      	add	r3, r1
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <update_next_task+0x7c>)
 8000544:	701a      	strb	r2, [r3, #0]
		state = user_task[curent_task].curent_state;
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <update_next_task+0x7c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <update_next_task+0x84>)
 800054c:	011b      	lsls	r3, r3, #4
 800054e:	4413      	add	r3, r2
 8000550:	3308      	adds	r3, #8
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	607b      	str	r3, [r7, #4]
		if((state == TASK_RUNNING_STATE) && (curent_task != 0)){
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d103      	bne.n	8000564 <update_next_task+0x54>
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <update_next_task+0x7c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d106      	bne.n	8000572 <update_next_task+0x62>
	for (int i =0; i < sizeof(user_task) / sizeof(user_task[0]); i++){
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b04      	cmp	r3, #4
 800056e:	d9d7      	bls.n	8000520 <update_next_task+0x10>
 8000570:	e000      	b.n	8000574 <update_next_task+0x64>
			break;
 8000572:	bf00      	nop
		}
	}
	if (state != TASK_RUNNING_STATE){
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <update_next_task+0x70>
		curent_task = 0;
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <update_next_task+0x7c>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
	}
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000
 8000590:	cccccccd 	.word	0xcccccccd
 8000594:	20000094 	.word	0x20000094

08000598 <swich_sp_to_psp>:

__attribute__((naked)) void swich_sp_to_psp(void){
	__asm volatile ("PUSH {LR}");
 8000598:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 800059a:	f7ff ff95 	bl	80004c8 <get_psp_value>
	__asm volatile ("MSR PSP, R0");
 800059e:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");
 80005a2:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile ("MOV R0, #0x02");
 80005a6:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 80005aa:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 80005ae:	4770      	bx	lr

}
 80005b0:	bf00      	nop
	...

080005b4 <task_delay>:


void task_delay(uint32_t tick_count){
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	DISABLE_IRQ();
 80005bc:	f04f 0001 	mov.w	r0, #1
 80005c0:	f380 8810 	msr	PRIMASK, r0
	extern uint32_t g_tick_count;
	g_tick_count = 0;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <task_delay+0x5c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
	if(curent_task){
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <task_delay+0x60>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d015      	beq.n	80005fe <task_delay+0x4a>
		user_task[curent_task].block_count = tick_count;
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <task_delay+0x60>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4a10      	ldr	r2, [pc, #64]	; (8000618 <task_delay+0x64>)
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	4413      	add	r3, r2
 80005dc:	3304      	adds	r3, #4
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
		user_task[curent_task].curent_state = TASK_BLOCK_STATE;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <task_delay+0x60>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <task_delay+0x64>)
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	4413      	add	r3, r2
 80005ec:	3308      	adds	r3, #8
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <task_delay+0x68>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	4a09      	ldr	r2, [pc, #36]	; (800061c <task_delay+0x68>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fc:	6053      	str	r3, [r2, #4]
	}
	ENABLE_IRQ();
 80005fe:	f04f 0000 	mov.w	r0, #0
 8000602:	f380 8810 	msr	PRIMASK, r0
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	20000090 	.word	0x20000090
 8000614:	20000000 	.word	0x20000000
 8000618:	20000094 	.word	0x20000094
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <unblock_task>:

void unblock_task(void){
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
	for (int i = 1; i < sizeof(user_task) / sizeof(user_task[0]); i++){
 8000626:	2301      	movs	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	e01b      	b.n	8000664 <unblock_task+0x44>
		if (user_task[i].curent_state != TASK_RUNNING_STATE){
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <unblock_task+0x58>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	4413      	add	r3, r2
 8000634:	3308      	adds	r3, #8
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d010      	beq.n	800065e <unblock_task+0x3e>
			if(user_task[i].block_count == g_tick_count){
 800063c:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <unblock_task+0x58>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	011b      	lsls	r3, r3, #4
 8000642:	4413      	add	r3, r2
 8000644:	3304      	adds	r3, #4
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <unblock_task+0x5c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	d106      	bne.n	800065e <unblock_task+0x3e>
				user_task[i].curent_state = TASK_RUNNING_STATE;
 8000650:	4a09      	ldr	r2, [pc, #36]	; (8000678 <unblock_task+0x58>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	4413      	add	r3, r2
 8000658:	3308      	adds	r3, #8
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < sizeof(user_task) / sizeof(user_task[0]); i++){
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b04      	cmp	r3, #4
 8000668:	d9e0      	bls.n	800062c <unblock_task+0xc>
			}
		}
	}
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000094 	.word	0x20000094
 800067c:	20000090 	.word	0x20000090

08000680 <HardFault_Handler>:

void HardFault_Handler(void){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	printf("HardFault_Handler\n");
 8000684:	4801      	ldr	r0, [pc, #4]	; (800068c <HardFault_Handler+0xc>)
 8000686:	f000 f999 	bl	80009bc <puts>
	while(1);
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0xa>
 800068c:	08001958 	.word	0x08001958

08000690 <MemManage_Handler>:
}

void MemManage_Handler(){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	printf("MemManage_Handler\n");
 8000694:	4801      	ldr	r0, [pc, #4]	; (800069c <MemManage_Handler+0xc>)
 8000696:	f000 f991 	bl	80009bc <puts>
	while(1);
 800069a:	e7fe      	b.n	800069a <MemManage_Handler+0xa>
 800069c:	0800196c 	.word	0x0800196c

080006a0 <BusFault_Handler>:
}

void BusFault_Handler(){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	printf("BusFault_Handler\n");
 80006a4:	4801      	ldr	r0, [pc, #4]	; (80006ac <BusFault_Handler+0xc>)
 80006a6:	f000 f989 	bl	80009bc <puts>
	while(1);
 80006aa:	e7fe      	b.n	80006aa <BusFault_Handler+0xa>
 80006ac:	08001980 	.word	0x08001980

080006b0 <PendSV_Handler>:
}

__attribute__((naked)) void PendSV_Handler(void){
    // Save the current task's context
    __asm volatile ("MRS R0, PSP");
 80006b0:	f3ef 8009 	mrs	r0, PSP
    __asm volatile ("STMDB R0!, {R4-R11}");
 80006b4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    __asm volatile ("PUSH {LR}");
 80006b8:	b500      	push	{lr}
    __asm volatile ("BL save_psp_value");
 80006ba:	f7ff ff15 	bl	80004e8 <save_psp_value>
    __asm volatile ("BL update_next_task");
 80006be:	f7ff ff27 	bl	8000510 <update_next_task>

    // Load the next task's context
    __asm volatile ("BL get_psp_value");
 80006c2:	f7ff ff01 	bl	80004c8 <get_psp_value>
    __asm volatile ("LDMIA R0!, {R4-R11}");
 80006c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    __asm volatile ("MSR PSP, R0");
 80006ca:	f380 8809 	msr	PSP, r0
    __asm volatile ("POP {LR}");
 80006ce:	f85d eb04 	ldr.w	lr, [sp], #4
    __asm volatile ("BX LR");
 80006d2:	4770      	bx	lr
}
 80006d4:	bf00      	nop
	...

080006d8 <SysTick_Handler>:

void SysTick_Handler(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	g_tick_count++;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <SysTick_Handler+0x24>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a06      	ldr	r2, [pc, #24]	; (80006fc <SysTick_Handler+0x24>)
 80006e4:	6013      	str	r3, [r2, #0]
	unblock_task();
 80006e6:	f7ff ff9b 	bl	8000620 <unblock_task>
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <SysTick_Handler+0x28>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <SysTick_Handler+0x28>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f4:	6053      	str	r3, [r2, #4]
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000090 	.word	0x20000090
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <main>:
uint8_t GPIOB_Pin[] = {11,12};
uint8_t GPIOB_mode[] = {1,1};


int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	SystemInitAnh();
 8000708:	f7ff fdb4 	bl	8000274 <SystemInitAnh>
	RCC_Configure();
 800070c:	f7ff fdc8 	bl	80002a0 <RCC_Configure>

	createTask(task1_handler);
 8000710:	4811      	ldr	r0, [pc, #68]	; (8000758 <main+0x54>)
 8000712:	f7ff fe23 	bl	800035c <createTask>
	createTask(task2_handler);
 8000716:	4811      	ldr	r0, [pc, #68]	; (800075c <main+0x58>)
 8000718:	f7ff fe20 	bl	800035c <createTask>
	createTask(task3_handler);
 800071c:	4810      	ldr	r0, [pc, #64]	; (8000760 <main+0x5c>)
 800071e:	f7ff fe1d 	bl	800035c <createTask>
	createTask(task4_handler);
 8000722:	4810      	ldr	r0, [pc, #64]	; (8000764 <main+0x60>)
 8000724:	f7ff fe1a 	bl	800035c <createTask>

	GPIO_configureRCC("B");
 8000728:	480f      	ldr	r0, [pc, #60]	; (8000768 <main+0x64>)
 800072a:	f7ff fd21 	bl	8000170 <GPIO_configureRCC>
	GPIO_configure((GPIO_TypeDef*)GPIOB, (uint8_t*)GPIOB_Pin ,(uint8_t*)GPIOB_mode);
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <main+0x68>)
 8000730:	490f      	ldr	r1, [pc, #60]	; (8000770 <main+0x6c>)
 8000732:	4810      	ldr	r0, [pc, #64]	; (8000774 <main+0x70>)
 8000734:	f7ff fd4e 	bl	80001d4 <GPIO_configure>
	enable_rpocessor_faults();
 8000738:	f7ff feb8 	bl	80004ac <enable_rpocessor_faults>
	init_scheduler_stack(SCHED_STACK_START);
 800073c:	480e      	ldr	r0, [pc, #56]	; (8000778 <main+0x74>)
 800073e:	f7ff fe43 	bl	80003c8 <init_scheduler_stack>
	init_task_stack(taskDefault);
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <main+0x78>)
 8000744:	f7ff fe46 	bl	80003d4 <init_task_stack>
	init_systick_timer(TICK_HZ);
 8000748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800074c:	f7ff fe22 	bl	8000394 <init_systick_timer>
	swich_sp_to_psp();
 8000750:	f7ff ff22 	bl	8000598 <swich_sp_to_psp>

	while (1){
 8000754:	e7fe      	b.n	8000754 <main+0x50>
 8000756:	bf00      	nop
 8000758:	08000789 	.word	0x08000789
 800075c:	08000799 	.word	0x08000799
 8000760:	080007c1 	.word	0x080007c1
 8000764:	080007e9 	.word	0x080007e9
 8000768:	08001994 	.word	0x08001994
 800076c:	20000008 	.word	0x20000008
 8000770:	20000004 	.word	0x20000004
 8000774:	40010c00 	.word	0x40010c00
 8000778:	20004000 	.word	0x20004000
 800077c:	08000781 	.word	0x08000781

08000780 <taskDefault>:

	}
}

void taskDefault(void){
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	while(1);
 8000784:	e7fe      	b.n	8000784 <taskDefault+0x4>
	...

08000788 <task1_handler>:
}

void task1_handler(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	while(1){
		printf("oke");
 800078c:	4801      	ldr	r0, [pc, #4]	; (8000794 <task1_handler+0xc>)
 800078e:	f000 f88f 	bl	80008b0 <iprintf>
 8000792:	e7fb      	b.n	800078c <task1_handler+0x4>
 8000794:	08001998 	.word	0x08001998

08000798 <task2_handler>:
	}
}
void task2_handler(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	while(1){
		LED12_TOGGLE;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <task2_handler+0x20>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <task2_handler+0x20>)
 80007a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80007a6:	60d3      	str	r3, [r2, #12]
		task_delay(1000);
 80007a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ac:	f7ff ff02 	bl	80005b4 <task_delay>
		printf("oke");
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <task2_handler+0x24>)
 80007b2:	f000 f87d 	bl	80008b0 <iprintf>
		LED12_TOGGLE;
 80007b6:	e7f1      	b.n	800079c <task2_handler+0x4>
 80007b8:	40010c00 	.word	0x40010c00
 80007bc:	08001998 	.word	0x08001998

080007c0 <task3_handler>:
	}
}
void task3_handler(void){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	while(1){
		GPIOB->ODR ^= (1 << 11);
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <task3_handler+0x20>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <task3_handler+0x20>)
 80007ca:	f483 6300 	eor.w	r3, r3, #2048	; 0x800
 80007ce:	60d3      	str	r3, [r2, #12]
		task_delay(1000);
 80007d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d4:	f7ff feee 	bl	80005b4 <task_delay>
		printf("oke");
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <task3_handler+0x24>)
 80007da:	f000 f869 	bl	80008b0 <iprintf>
		GPIOB->ODR ^= (1 << 11);
 80007de:	e7f1      	b.n	80007c4 <task3_handler+0x4>
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	08001998 	.word	0x08001998

080007e8 <task4_handler>:
	}
}
void task4_handler(void){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	while(1){
		printf("oke");
 80007ec:	4801      	ldr	r0, [pc, #4]	; (80007f4 <task4_handler+0xc>)
 80007ee:	f000 f85f 	bl	80008b0 <iprintf>
 80007f2:	e7fb      	b.n	80007ec <task4_handler+0x4>
 80007f4:	08001998 	.word	0x08001998

080007f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000806:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000808:	f7ff fff6 	bl	80007f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <LoopForever+0x6>)
  ldr r1, =_edata
 800080e:	490d      	ldr	r1, [pc, #52]	; (8000844 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <LoopForever+0xe>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000824:	4c0a      	ldr	r4, [pc, #40]	; (8000850 <LoopForever+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000832:	f000 f811 	bl	8000858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000836:	f7ff ff65 	bl	8000704 <main>

0800083a <LoopForever>:

LoopForever:
  b LoopForever
 800083a:	e7fe      	b.n	800083a <LoopForever>
  ldr   r0, =_estack
 800083c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000848:	08001a3c 	.word	0x08001a3c
  ldr r2, =_sbss
 800084c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000850:	200000f8 	.word	0x200000f8

08000854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC1_2_IRQHandler>
	...

08000858 <__libc_init_array>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	2600      	movs	r6, #0
 800085c:	4d0c      	ldr	r5, [pc, #48]	; (8000890 <__libc_init_array+0x38>)
 800085e:	4c0d      	ldr	r4, [pc, #52]	; (8000894 <__libc_init_array+0x3c>)
 8000860:	1b64      	subs	r4, r4, r5
 8000862:	10a4      	asrs	r4, r4, #2
 8000864:	42a6      	cmp	r6, r4
 8000866:	d109      	bne.n	800087c <__libc_init_array+0x24>
 8000868:	f001 f86a 	bl	8001940 <_init>
 800086c:	2600      	movs	r6, #0
 800086e:	4d0a      	ldr	r5, [pc, #40]	; (8000898 <__libc_init_array+0x40>)
 8000870:	4c0a      	ldr	r4, [pc, #40]	; (800089c <__libc_init_array+0x44>)
 8000872:	1b64      	subs	r4, r4, r5
 8000874:	10a4      	asrs	r4, r4, #2
 8000876:	42a6      	cmp	r6, r4
 8000878:	d105      	bne.n	8000886 <__libc_init_array+0x2e>
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000880:	4798      	blx	r3
 8000882:	3601      	adds	r6, #1
 8000884:	e7ee      	b.n	8000864 <__libc_init_array+0xc>
 8000886:	f855 3b04 	ldr.w	r3, [r5], #4
 800088a:	4798      	blx	r3
 800088c:	3601      	adds	r6, #1
 800088e:	e7f2      	b.n	8000876 <__libc_init_array+0x1e>
 8000890:	08001a34 	.word	0x08001a34
 8000894:	08001a34 	.word	0x08001a34
 8000898:	08001a34 	.word	0x08001a34
 800089c:	08001a38 	.word	0x08001a38

080008a0 <memset>:
 80008a0:	4603      	mov	r3, r0
 80008a2:	4402      	add	r2, r0
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d100      	bne.n	80008aa <memset+0xa>
 80008a8:	4770      	bx	lr
 80008aa:	f803 1b01 	strb.w	r1, [r3], #1
 80008ae:	e7f9      	b.n	80008a4 <memset+0x4>

080008b0 <iprintf>:
 80008b0:	b40f      	push	{r0, r1, r2, r3}
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <iprintf+0x2c>)
 80008b4:	b513      	push	{r0, r1, r4, lr}
 80008b6:	681c      	ldr	r4, [r3, #0]
 80008b8:	b124      	cbz	r4, 80008c4 <iprintf+0x14>
 80008ba:	69a3      	ldr	r3, [r4, #24]
 80008bc:	b913      	cbnz	r3, 80008c4 <iprintf+0x14>
 80008be:	4620      	mov	r0, r4
 80008c0:	f000 fa5a 	bl	8000d78 <__sinit>
 80008c4:	ab05      	add	r3, sp, #20
 80008c6:	4620      	mov	r0, r4
 80008c8:	9a04      	ldr	r2, [sp, #16]
 80008ca:	68a1      	ldr	r1, [r4, #8]
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	f000 fc5d 	bl	800118c <_vfiprintf_r>
 80008d2:	b002      	add	sp, #8
 80008d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr
 80008dc:	2000000c 	.word	0x2000000c

080008e0 <_puts_r>:
 80008e0:	b570      	push	{r4, r5, r6, lr}
 80008e2:	460e      	mov	r6, r1
 80008e4:	4605      	mov	r5, r0
 80008e6:	b118      	cbz	r0, 80008f0 <_puts_r+0x10>
 80008e8:	6983      	ldr	r3, [r0, #24]
 80008ea:	b90b      	cbnz	r3, 80008f0 <_puts_r+0x10>
 80008ec:	f000 fa44 	bl	8000d78 <__sinit>
 80008f0:	69ab      	ldr	r3, [r5, #24]
 80008f2:	68ac      	ldr	r4, [r5, #8]
 80008f4:	b913      	cbnz	r3, 80008fc <_puts_r+0x1c>
 80008f6:	4628      	mov	r0, r5
 80008f8:	f000 fa3e 	bl	8000d78 <__sinit>
 80008fc:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <_puts_r+0xd0>)
 80008fe:	429c      	cmp	r4, r3
 8000900:	d120      	bne.n	8000944 <_puts_r+0x64>
 8000902:	686c      	ldr	r4, [r5, #4]
 8000904:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000906:	07db      	lsls	r3, r3, #31
 8000908:	d405      	bmi.n	8000916 <_puts_r+0x36>
 800090a:	89a3      	ldrh	r3, [r4, #12]
 800090c:	0598      	lsls	r0, r3, #22
 800090e:	d402      	bmi.n	8000916 <_puts_r+0x36>
 8000910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000912:	f000 facf 	bl	8000eb4 <__retarget_lock_acquire_recursive>
 8000916:	89a3      	ldrh	r3, [r4, #12]
 8000918:	0719      	lsls	r1, r3, #28
 800091a:	d51d      	bpl.n	8000958 <_puts_r+0x78>
 800091c:	6923      	ldr	r3, [r4, #16]
 800091e:	b1db      	cbz	r3, 8000958 <_puts_r+0x78>
 8000920:	3e01      	subs	r6, #1
 8000922:	68a3      	ldr	r3, [r4, #8]
 8000924:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000928:	3b01      	subs	r3, #1
 800092a:	60a3      	str	r3, [r4, #8]
 800092c:	bb39      	cbnz	r1, 800097e <_puts_r+0x9e>
 800092e:	2b00      	cmp	r3, #0
 8000930:	da38      	bge.n	80009a4 <_puts_r+0xc4>
 8000932:	4622      	mov	r2, r4
 8000934:	210a      	movs	r1, #10
 8000936:	4628      	mov	r0, r5
 8000938:	f000 f848 	bl	80009cc <__swbuf_r>
 800093c:	3001      	adds	r0, #1
 800093e:	d011      	beq.n	8000964 <_puts_r+0x84>
 8000940:	250a      	movs	r5, #10
 8000942:	e011      	b.n	8000968 <_puts_r+0x88>
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <_puts_r+0xd4>)
 8000946:	429c      	cmp	r4, r3
 8000948:	d101      	bne.n	800094e <_puts_r+0x6e>
 800094a:	68ac      	ldr	r4, [r5, #8]
 800094c:	e7da      	b.n	8000904 <_puts_r+0x24>
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <_puts_r+0xd8>)
 8000950:	429c      	cmp	r4, r3
 8000952:	bf08      	it	eq
 8000954:	68ec      	ldreq	r4, [r5, #12]
 8000956:	e7d5      	b.n	8000904 <_puts_r+0x24>
 8000958:	4621      	mov	r1, r4
 800095a:	4628      	mov	r0, r5
 800095c:	f000 f888 	bl	8000a70 <__swsetup_r>
 8000960:	2800      	cmp	r0, #0
 8000962:	d0dd      	beq.n	8000920 <_puts_r+0x40>
 8000964:	f04f 35ff 	mov.w	r5, #4294967295
 8000968:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800096a:	07da      	lsls	r2, r3, #31
 800096c:	d405      	bmi.n	800097a <_puts_r+0x9a>
 800096e:	89a3      	ldrh	r3, [r4, #12]
 8000970:	059b      	lsls	r3, r3, #22
 8000972:	d402      	bmi.n	800097a <_puts_r+0x9a>
 8000974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000976:	f000 fa9e 	bl	8000eb6 <__retarget_lock_release_recursive>
 800097a:	4628      	mov	r0, r5
 800097c:	bd70      	pop	{r4, r5, r6, pc}
 800097e:	2b00      	cmp	r3, #0
 8000980:	da04      	bge.n	800098c <_puts_r+0xac>
 8000982:	69a2      	ldr	r2, [r4, #24]
 8000984:	429a      	cmp	r2, r3
 8000986:	dc06      	bgt.n	8000996 <_puts_r+0xb6>
 8000988:	290a      	cmp	r1, #10
 800098a:	d004      	beq.n	8000996 <_puts_r+0xb6>
 800098c:	6823      	ldr	r3, [r4, #0]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	6022      	str	r2, [r4, #0]
 8000992:	7019      	strb	r1, [r3, #0]
 8000994:	e7c5      	b.n	8000922 <_puts_r+0x42>
 8000996:	4622      	mov	r2, r4
 8000998:	4628      	mov	r0, r5
 800099a:	f000 f817 	bl	80009cc <__swbuf_r>
 800099e:	3001      	adds	r0, #1
 80009a0:	d1bf      	bne.n	8000922 <_puts_r+0x42>
 80009a2:	e7df      	b.n	8000964 <_puts_r+0x84>
 80009a4:	250a      	movs	r5, #10
 80009a6:	6823      	ldr	r3, [r4, #0]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	6022      	str	r2, [r4, #0]
 80009ac:	701d      	strb	r5, [r3, #0]
 80009ae:	e7db      	b.n	8000968 <_puts_r+0x88>
 80009b0:	080019c0 	.word	0x080019c0
 80009b4:	080019e0 	.word	0x080019e0
 80009b8:	080019a0 	.word	0x080019a0

080009bc <puts>:
 80009bc:	4b02      	ldr	r3, [pc, #8]	; (80009c8 <puts+0xc>)
 80009be:	4601      	mov	r1, r0
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	f7ff bf8d 	b.w	80008e0 <_puts_r>
 80009c6:	bf00      	nop
 80009c8:	2000000c 	.word	0x2000000c

080009cc <__swbuf_r>:
 80009cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ce:	460e      	mov	r6, r1
 80009d0:	4614      	mov	r4, r2
 80009d2:	4605      	mov	r5, r0
 80009d4:	b118      	cbz	r0, 80009de <__swbuf_r+0x12>
 80009d6:	6983      	ldr	r3, [r0, #24]
 80009d8:	b90b      	cbnz	r3, 80009de <__swbuf_r+0x12>
 80009da:	f000 f9cd 	bl	8000d78 <__sinit>
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <__swbuf_r+0x98>)
 80009e0:	429c      	cmp	r4, r3
 80009e2:	d12b      	bne.n	8000a3c <__swbuf_r+0x70>
 80009e4:	686c      	ldr	r4, [r5, #4]
 80009e6:	69a3      	ldr	r3, [r4, #24]
 80009e8:	60a3      	str	r3, [r4, #8]
 80009ea:	89a3      	ldrh	r3, [r4, #12]
 80009ec:	071a      	lsls	r2, r3, #28
 80009ee:	d52f      	bpl.n	8000a50 <__swbuf_r+0x84>
 80009f0:	6923      	ldr	r3, [r4, #16]
 80009f2:	b36b      	cbz	r3, 8000a50 <__swbuf_r+0x84>
 80009f4:	6923      	ldr	r3, [r4, #16]
 80009f6:	6820      	ldr	r0, [r4, #0]
 80009f8:	b2f6      	uxtb	r6, r6
 80009fa:	1ac0      	subs	r0, r0, r3
 80009fc:	6963      	ldr	r3, [r4, #20]
 80009fe:	4637      	mov	r7, r6
 8000a00:	4283      	cmp	r3, r0
 8000a02:	dc04      	bgt.n	8000a0e <__swbuf_r+0x42>
 8000a04:	4621      	mov	r1, r4
 8000a06:	4628      	mov	r0, r5
 8000a08:	f000 f922 	bl	8000c50 <_fflush_r>
 8000a0c:	bb30      	cbnz	r0, 8000a5c <__swbuf_r+0x90>
 8000a0e:	68a3      	ldr	r3, [r4, #8]
 8000a10:	3001      	adds	r0, #1
 8000a12:	3b01      	subs	r3, #1
 8000a14:	60a3      	str	r3, [r4, #8]
 8000a16:	6823      	ldr	r3, [r4, #0]
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	6022      	str	r2, [r4, #0]
 8000a1c:	701e      	strb	r6, [r3, #0]
 8000a1e:	6963      	ldr	r3, [r4, #20]
 8000a20:	4283      	cmp	r3, r0
 8000a22:	d004      	beq.n	8000a2e <__swbuf_r+0x62>
 8000a24:	89a3      	ldrh	r3, [r4, #12]
 8000a26:	07db      	lsls	r3, r3, #31
 8000a28:	d506      	bpl.n	8000a38 <__swbuf_r+0x6c>
 8000a2a:	2e0a      	cmp	r6, #10
 8000a2c:	d104      	bne.n	8000a38 <__swbuf_r+0x6c>
 8000a2e:	4621      	mov	r1, r4
 8000a30:	4628      	mov	r0, r5
 8000a32:	f000 f90d 	bl	8000c50 <_fflush_r>
 8000a36:	b988      	cbnz	r0, 8000a5c <__swbuf_r+0x90>
 8000a38:	4638      	mov	r0, r7
 8000a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <__swbuf_r+0x9c>)
 8000a3e:	429c      	cmp	r4, r3
 8000a40:	d101      	bne.n	8000a46 <__swbuf_r+0x7a>
 8000a42:	68ac      	ldr	r4, [r5, #8]
 8000a44:	e7cf      	b.n	80009e6 <__swbuf_r+0x1a>
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <__swbuf_r+0xa0>)
 8000a48:	429c      	cmp	r4, r3
 8000a4a:	bf08      	it	eq
 8000a4c:	68ec      	ldreq	r4, [r5, #12]
 8000a4e:	e7ca      	b.n	80009e6 <__swbuf_r+0x1a>
 8000a50:	4621      	mov	r1, r4
 8000a52:	4628      	mov	r0, r5
 8000a54:	f000 f80c 	bl	8000a70 <__swsetup_r>
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d0cb      	beq.n	80009f4 <__swbuf_r+0x28>
 8000a5c:	f04f 37ff 	mov.w	r7, #4294967295
 8000a60:	e7ea      	b.n	8000a38 <__swbuf_r+0x6c>
 8000a62:	bf00      	nop
 8000a64:	080019c0 	.word	0x080019c0
 8000a68:	080019e0 	.word	0x080019e0
 8000a6c:	080019a0 	.word	0x080019a0

08000a70 <__swsetup_r>:
 8000a70:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <__swsetup_r+0xcc>)
 8000a72:	b570      	push	{r4, r5, r6, lr}
 8000a74:	681d      	ldr	r5, [r3, #0]
 8000a76:	4606      	mov	r6, r0
 8000a78:	460c      	mov	r4, r1
 8000a7a:	b125      	cbz	r5, 8000a86 <__swsetup_r+0x16>
 8000a7c:	69ab      	ldr	r3, [r5, #24]
 8000a7e:	b913      	cbnz	r3, 8000a86 <__swsetup_r+0x16>
 8000a80:	4628      	mov	r0, r5
 8000a82:	f000 f979 	bl	8000d78 <__sinit>
 8000a86:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <__swsetup_r+0xd0>)
 8000a88:	429c      	cmp	r4, r3
 8000a8a:	d10f      	bne.n	8000aac <__swsetup_r+0x3c>
 8000a8c:	686c      	ldr	r4, [r5, #4]
 8000a8e:	89a3      	ldrh	r3, [r4, #12]
 8000a90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a94:	0719      	lsls	r1, r3, #28
 8000a96:	d42c      	bmi.n	8000af2 <__swsetup_r+0x82>
 8000a98:	06dd      	lsls	r5, r3, #27
 8000a9a:	d411      	bmi.n	8000ac0 <__swsetup_r+0x50>
 8000a9c:	2309      	movs	r3, #9
 8000a9e:	6033      	str	r3, [r6, #0]
 8000aa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	81a3      	strh	r3, [r4, #12]
 8000aaa:	e03e      	b.n	8000b2a <__swsetup_r+0xba>
 8000aac:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <__swsetup_r+0xd4>)
 8000aae:	429c      	cmp	r4, r3
 8000ab0:	d101      	bne.n	8000ab6 <__swsetup_r+0x46>
 8000ab2:	68ac      	ldr	r4, [r5, #8]
 8000ab4:	e7eb      	b.n	8000a8e <__swsetup_r+0x1e>
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <__swsetup_r+0xd8>)
 8000ab8:	429c      	cmp	r4, r3
 8000aba:	bf08      	it	eq
 8000abc:	68ec      	ldreq	r4, [r5, #12]
 8000abe:	e7e6      	b.n	8000a8e <__swsetup_r+0x1e>
 8000ac0:	0758      	lsls	r0, r3, #29
 8000ac2:	d512      	bpl.n	8000aea <__swsetup_r+0x7a>
 8000ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ac6:	b141      	cbz	r1, 8000ada <__swsetup_r+0x6a>
 8000ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000acc:	4299      	cmp	r1, r3
 8000ace:	d002      	beq.n	8000ad6 <__swsetup_r+0x66>
 8000ad0:	4630      	mov	r0, r6
 8000ad2:	f000 fa57 	bl	8000f84 <_free_r>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	6363      	str	r3, [r4, #52]	; 0x34
 8000ada:	89a3      	ldrh	r3, [r4, #12]
 8000adc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000ae0:	81a3      	strh	r3, [r4, #12]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	6063      	str	r3, [r4, #4]
 8000ae6:	6923      	ldr	r3, [r4, #16]
 8000ae8:	6023      	str	r3, [r4, #0]
 8000aea:	89a3      	ldrh	r3, [r4, #12]
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	81a3      	strh	r3, [r4, #12]
 8000af2:	6923      	ldr	r3, [r4, #16]
 8000af4:	b94b      	cbnz	r3, 8000b0a <__swsetup_r+0x9a>
 8000af6:	89a3      	ldrh	r3, [r4, #12]
 8000af8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b00:	d003      	beq.n	8000b0a <__swsetup_r+0x9a>
 8000b02:	4621      	mov	r1, r4
 8000b04:	4630      	mov	r0, r6
 8000b06:	f000 f9fd 	bl	8000f04 <__smakebuf_r>
 8000b0a:	89a0      	ldrh	r0, [r4, #12]
 8000b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b10:	f010 0301 	ands.w	r3, r0, #1
 8000b14:	d00a      	beq.n	8000b2c <__swsetup_r+0xbc>
 8000b16:	2300      	movs	r3, #0
 8000b18:	60a3      	str	r3, [r4, #8]
 8000b1a:	6963      	ldr	r3, [r4, #20]
 8000b1c:	425b      	negs	r3, r3
 8000b1e:	61a3      	str	r3, [r4, #24]
 8000b20:	6923      	ldr	r3, [r4, #16]
 8000b22:	b943      	cbnz	r3, 8000b36 <__swsetup_r+0xc6>
 8000b24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b28:	d1ba      	bne.n	8000aa0 <__swsetup_r+0x30>
 8000b2a:	bd70      	pop	{r4, r5, r6, pc}
 8000b2c:	0781      	lsls	r1, r0, #30
 8000b2e:	bf58      	it	pl
 8000b30:	6963      	ldrpl	r3, [r4, #20]
 8000b32:	60a3      	str	r3, [r4, #8]
 8000b34:	e7f4      	b.n	8000b20 <__swsetup_r+0xb0>
 8000b36:	2000      	movs	r0, #0
 8000b38:	e7f7      	b.n	8000b2a <__swsetup_r+0xba>
 8000b3a:	bf00      	nop
 8000b3c:	2000000c 	.word	0x2000000c
 8000b40:	080019c0 	.word	0x080019c0
 8000b44:	080019e0 	.word	0x080019e0
 8000b48:	080019a0 	.word	0x080019a0

08000b4c <__sflush_r>:
 8000b4c:	898a      	ldrh	r2, [r1, #12]
 8000b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b50:	4605      	mov	r5, r0
 8000b52:	0710      	lsls	r0, r2, #28
 8000b54:	460c      	mov	r4, r1
 8000b56:	d457      	bmi.n	8000c08 <__sflush_r+0xbc>
 8000b58:	684b      	ldr	r3, [r1, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	dc04      	bgt.n	8000b68 <__sflush_r+0x1c>
 8000b5e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	dc01      	bgt.n	8000b68 <__sflush_r+0x1c>
 8000b64:	2000      	movs	r0, #0
 8000b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	d0fa      	beq.n	8000b64 <__sflush_r+0x18>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000b74:	682f      	ldr	r7, [r5, #0]
 8000b76:	602b      	str	r3, [r5, #0]
 8000b78:	d032      	beq.n	8000be0 <__sflush_r+0x94>
 8000b7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000b7c:	89a3      	ldrh	r3, [r4, #12]
 8000b7e:	075a      	lsls	r2, r3, #29
 8000b80:	d505      	bpl.n	8000b8e <__sflush_r+0x42>
 8000b82:	6863      	ldr	r3, [r4, #4]
 8000b84:	1ac0      	subs	r0, r0, r3
 8000b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b88:	b10b      	cbz	r3, 8000b8e <__sflush_r+0x42>
 8000b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b8c:	1ac0      	subs	r0, r0, r3
 8000b8e:	2300      	movs	r3, #0
 8000b90:	4602      	mov	r2, r0
 8000b92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b94:	4628      	mov	r0, r5
 8000b96:	6a21      	ldr	r1, [r4, #32]
 8000b98:	47b0      	blx	r6
 8000b9a:	1c43      	adds	r3, r0, #1
 8000b9c:	89a3      	ldrh	r3, [r4, #12]
 8000b9e:	d106      	bne.n	8000bae <__sflush_r+0x62>
 8000ba0:	6829      	ldr	r1, [r5, #0]
 8000ba2:	291d      	cmp	r1, #29
 8000ba4:	d82c      	bhi.n	8000c00 <__sflush_r+0xb4>
 8000ba6:	4a29      	ldr	r2, [pc, #164]	; (8000c4c <__sflush_r+0x100>)
 8000ba8:	40ca      	lsrs	r2, r1
 8000baa:	07d6      	lsls	r6, r2, #31
 8000bac:	d528      	bpl.n	8000c00 <__sflush_r+0xb4>
 8000bae:	2200      	movs	r2, #0
 8000bb0:	6062      	str	r2, [r4, #4]
 8000bb2:	6922      	ldr	r2, [r4, #16]
 8000bb4:	04d9      	lsls	r1, r3, #19
 8000bb6:	6022      	str	r2, [r4, #0]
 8000bb8:	d504      	bpl.n	8000bc4 <__sflush_r+0x78>
 8000bba:	1c42      	adds	r2, r0, #1
 8000bbc:	d101      	bne.n	8000bc2 <__sflush_r+0x76>
 8000bbe:	682b      	ldr	r3, [r5, #0]
 8000bc0:	b903      	cbnz	r3, 8000bc4 <__sflush_r+0x78>
 8000bc2:	6560      	str	r0, [r4, #84]	; 0x54
 8000bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bc6:	602f      	str	r7, [r5, #0]
 8000bc8:	2900      	cmp	r1, #0
 8000bca:	d0cb      	beq.n	8000b64 <__sflush_r+0x18>
 8000bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d002      	beq.n	8000bda <__sflush_r+0x8e>
 8000bd4:	4628      	mov	r0, r5
 8000bd6:	f000 f9d5 	bl	8000f84 <_free_r>
 8000bda:	2000      	movs	r0, #0
 8000bdc:	6360      	str	r0, [r4, #52]	; 0x34
 8000bde:	e7c2      	b.n	8000b66 <__sflush_r+0x1a>
 8000be0:	6a21      	ldr	r1, [r4, #32]
 8000be2:	2301      	movs	r3, #1
 8000be4:	4628      	mov	r0, r5
 8000be6:	47b0      	blx	r6
 8000be8:	1c41      	adds	r1, r0, #1
 8000bea:	d1c7      	bne.n	8000b7c <__sflush_r+0x30>
 8000bec:	682b      	ldr	r3, [r5, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0c4      	beq.n	8000b7c <__sflush_r+0x30>
 8000bf2:	2b1d      	cmp	r3, #29
 8000bf4:	d001      	beq.n	8000bfa <__sflush_r+0xae>
 8000bf6:	2b16      	cmp	r3, #22
 8000bf8:	d101      	bne.n	8000bfe <__sflush_r+0xb2>
 8000bfa:	602f      	str	r7, [r5, #0]
 8000bfc:	e7b2      	b.n	8000b64 <__sflush_r+0x18>
 8000bfe:	89a3      	ldrh	r3, [r4, #12]
 8000c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c04:	81a3      	strh	r3, [r4, #12]
 8000c06:	e7ae      	b.n	8000b66 <__sflush_r+0x1a>
 8000c08:	690f      	ldr	r7, [r1, #16]
 8000c0a:	2f00      	cmp	r7, #0
 8000c0c:	d0aa      	beq.n	8000b64 <__sflush_r+0x18>
 8000c0e:	0793      	lsls	r3, r2, #30
 8000c10:	bf18      	it	ne
 8000c12:	2300      	movne	r3, #0
 8000c14:	680e      	ldr	r6, [r1, #0]
 8000c16:	bf08      	it	eq
 8000c18:	694b      	ldreq	r3, [r1, #20]
 8000c1a:	1bf6      	subs	r6, r6, r7
 8000c1c:	600f      	str	r7, [r1, #0]
 8000c1e:	608b      	str	r3, [r1, #8]
 8000c20:	2e00      	cmp	r6, #0
 8000c22:	dd9f      	ble.n	8000b64 <__sflush_r+0x18>
 8000c24:	4633      	mov	r3, r6
 8000c26:	463a      	mov	r2, r7
 8000c28:	4628      	mov	r0, r5
 8000c2a:	6a21      	ldr	r1, [r4, #32]
 8000c2c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000c30:	47e0      	blx	ip
 8000c32:	2800      	cmp	r0, #0
 8000c34:	dc06      	bgt.n	8000c44 <__sflush_r+0xf8>
 8000c36:	89a3      	ldrh	r3, [r4, #12]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c40:	81a3      	strh	r3, [r4, #12]
 8000c42:	e790      	b.n	8000b66 <__sflush_r+0x1a>
 8000c44:	4407      	add	r7, r0
 8000c46:	1a36      	subs	r6, r6, r0
 8000c48:	e7ea      	b.n	8000c20 <__sflush_r+0xd4>
 8000c4a:	bf00      	nop
 8000c4c:	20400001 	.word	0x20400001

08000c50 <_fflush_r>:
 8000c50:	b538      	push	{r3, r4, r5, lr}
 8000c52:	690b      	ldr	r3, [r1, #16]
 8000c54:	4605      	mov	r5, r0
 8000c56:	460c      	mov	r4, r1
 8000c58:	b913      	cbnz	r3, 8000c60 <_fflush_r+0x10>
 8000c5a:	2500      	movs	r5, #0
 8000c5c:	4628      	mov	r0, r5
 8000c5e:	bd38      	pop	{r3, r4, r5, pc}
 8000c60:	b118      	cbz	r0, 8000c6a <_fflush_r+0x1a>
 8000c62:	6983      	ldr	r3, [r0, #24]
 8000c64:	b90b      	cbnz	r3, 8000c6a <_fflush_r+0x1a>
 8000c66:	f000 f887 	bl	8000d78 <__sinit>
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <_fflush_r+0x6c>)
 8000c6c:	429c      	cmp	r4, r3
 8000c6e:	d11b      	bne.n	8000ca8 <_fflush_r+0x58>
 8000c70:	686c      	ldr	r4, [r5, #4]
 8000c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0ef      	beq.n	8000c5a <_fflush_r+0xa>
 8000c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000c7c:	07d0      	lsls	r0, r2, #31
 8000c7e:	d404      	bmi.n	8000c8a <_fflush_r+0x3a>
 8000c80:	0599      	lsls	r1, r3, #22
 8000c82:	d402      	bmi.n	8000c8a <_fflush_r+0x3a>
 8000c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c86:	f000 f915 	bl	8000eb4 <__retarget_lock_acquire_recursive>
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	4621      	mov	r1, r4
 8000c8e:	f7ff ff5d 	bl	8000b4c <__sflush_r>
 8000c92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c94:	4605      	mov	r5, r0
 8000c96:	07da      	lsls	r2, r3, #31
 8000c98:	d4e0      	bmi.n	8000c5c <_fflush_r+0xc>
 8000c9a:	89a3      	ldrh	r3, [r4, #12]
 8000c9c:	059b      	lsls	r3, r3, #22
 8000c9e:	d4dd      	bmi.n	8000c5c <_fflush_r+0xc>
 8000ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ca2:	f000 f908 	bl	8000eb6 <__retarget_lock_release_recursive>
 8000ca6:	e7d9      	b.n	8000c5c <_fflush_r+0xc>
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <_fflush_r+0x70>)
 8000caa:	429c      	cmp	r4, r3
 8000cac:	d101      	bne.n	8000cb2 <_fflush_r+0x62>
 8000cae:	68ac      	ldr	r4, [r5, #8]
 8000cb0:	e7df      	b.n	8000c72 <_fflush_r+0x22>
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <_fflush_r+0x74>)
 8000cb4:	429c      	cmp	r4, r3
 8000cb6:	bf08      	it	eq
 8000cb8:	68ec      	ldreq	r4, [r5, #12]
 8000cba:	e7da      	b.n	8000c72 <_fflush_r+0x22>
 8000cbc:	080019c0 	.word	0x080019c0
 8000cc0:	080019e0 	.word	0x080019e0
 8000cc4:	080019a0 	.word	0x080019a0

08000cc8 <std>:
 8000cc8:	2300      	movs	r3, #0
 8000cca:	b510      	push	{r4, lr}
 8000ccc:	4604      	mov	r4, r0
 8000cce:	e9c0 3300 	strd	r3, r3, [r0]
 8000cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000cd6:	6083      	str	r3, [r0, #8]
 8000cd8:	8181      	strh	r1, [r0, #12]
 8000cda:	6643      	str	r3, [r0, #100]	; 0x64
 8000cdc:	81c2      	strh	r2, [r0, #14]
 8000cde:	6183      	str	r3, [r0, #24]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	2208      	movs	r2, #8
 8000ce4:	305c      	adds	r0, #92	; 0x5c
 8000ce6:	f7ff fddb 	bl	80008a0 <memset>
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <std+0x38>)
 8000cec:	6224      	str	r4, [r4, #32]
 8000cee:	6263      	str	r3, [r4, #36]	; 0x24
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <std+0x3c>)
 8000cf2:	62a3      	str	r3, [r4, #40]	; 0x28
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <std+0x40>)
 8000cf6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <std+0x44>)
 8000cfa:	6323      	str	r3, [r4, #48]	; 0x30
 8000cfc:	bd10      	pop	{r4, pc}
 8000cfe:	bf00      	nop
 8000d00:	08001739 	.word	0x08001739
 8000d04:	0800175b 	.word	0x0800175b
 8000d08:	08001793 	.word	0x08001793
 8000d0c:	080017b7 	.word	0x080017b7

08000d10 <_cleanup_r>:
 8000d10:	4901      	ldr	r1, [pc, #4]	; (8000d18 <_cleanup_r+0x8>)
 8000d12:	f000 b8af 	b.w	8000e74 <_fwalk_reent>
 8000d16:	bf00      	nop
 8000d18:	08000c51 	.word	0x08000c51

08000d1c <__sfmoreglue>:
 8000d1c:	2268      	movs	r2, #104	; 0x68
 8000d1e:	b570      	push	{r4, r5, r6, lr}
 8000d20:	1e4d      	subs	r5, r1, #1
 8000d22:	4355      	muls	r5, r2
 8000d24:	460e      	mov	r6, r1
 8000d26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000d2a:	f000 f993 	bl	8001054 <_malloc_r>
 8000d2e:	4604      	mov	r4, r0
 8000d30:	b140      	cbz	r0, 8000d44 <__sfmoreglue+0x28>
 8000d32:	2100      	movs	r1, #0
 8000d34:	e9c0 1600 	strd	r1, r6, [r0]
 8000d38:	300c      	adds	r0, #12
 8000d3a:	60a0      	str	r0, [r4, #8]
 8000d3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000d40:	f7ff fdae 	bl	80008a0 <memset>
 8000d44:	4620      	mov	r0, r4
 8000d46:	bd70      	pop	{r4, r5, r6, pc}

08000d48 <__sfp_lock_acquire>:
 8000d48:	4801      	ldr	r0, [pc, #4]	; (8000d50 <__sfp_lock_acquire+0x8>)
 8000d4a:	f000 b8b3 	b.w	8000eb4 <__retarget_lock_acquire_recursive>
 8000d4e:	bf00      	nop
 8000d50:	200000e5 	.word	0x200000e5

08000d54 <__sfp_lock_release>:
 8000d54:	4801      	ldr	r0, [pc, #4]	; (8000d5c <__sfp_lock_release+0x8>)
 8000d56:	f000 b8ae 	b.w	8000eb6 <__retarget_lock_release_recursive>
 8000d5a:	bf00      	nop
 8000d5c:	200000e5 	.word	0x200000e5

08000d60 <__sinit_lock_acquire>:
 8000d60:	4801      	ldr	r0, [pc, #4]	; (8000d68 <__sinit_lock_acquire+0x8>)
 8000d62:	f000 b8a7 	b.w	8000eb4 <__retarget_lock_acquire_recursive>
 8000d66:	bf00      	nop
 8000d68:	200000e6 	.word	0x200000e6

08000d6c <__sinit_lock_release>:
 8000d6c:	4801      	ldr	r0, [pc, #4]	; (8000d74 <__sinit_lock_release+0x8>)
 8000d6e:	f000 b8a2 	b.w	8000eb6 <__retarget_lock_release_recursive>
 8000d72:	bf00      	nop
 8000d74:	200000e6 	.word	0x200000e6

08000d78 <__sinit>:
 8000d78:	b510      	push	{r4, lr}
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	f7ff fff0 	bl	8000d60 <__sinit_lock_acquire>
 8000d80:	69a3      	ldr	r3, [r4, #24]
 8000d82:	b11b      	cbz	r3, 8000d8c <__sinit+0x14>
 8000d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d88:	f7ff bff0 	b.w	8000d6c <__sinit_lock_release>
 8000d8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000d90:	6523      	str	r3, [r4, #80]	; 0x50
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <__sinit+0x68>)
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <__sinit+0x6c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	62a2      	str	r2, [r4, #40]	; 0x28
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	bf08      	it	eq
 8000d9e:	2301      	moveq	r3, #1
 8000da0:	4620      	mov	r0, r4
 8000da2:	bf08      	it	eq
 8000da4:	61a3      	streq	r3, [r4, #24]
 8000da6:	f000 f81f 	bl	8000de8 <__sfp>
 8000daa:	6060      	str	r0, [r4, #4]
 8000dac:	4620      	mov	r0, r4
 8000dae:	f000 f81b 	bl	8000de8 <__sfp>
 8000db2:	60a0      	str	r0, [r4, #8]
 8000db4:	4620      	mov	r0, r4
 8000db6:	f000 f817 	bl	8000de8 <__sfp>
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2104      	movs	r1, #4
 8000dbe:	60e0      	str	r0, [r4, #12]
 8000dc0:	6860      	ldr	r0, [r4, #4]
 8000dc2:	f7ff ff81 	bl	8000cc8 <std>
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2109      	movs	r1, #9
 8000dca:	68a0      	ldr	r0, [r4, #8]
 8000dcc:	f7ff ff7c 	bl	8000cc8 <std>
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	2112      	movs	r1, #18
 8000dd4:	68e0      	ldr	r0, [r4, #12]
 8000dd6:	f7ff ff77 	bl	8000cc8 <std>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61a3      	str	r3, [r4, #24]
 8000dde:	e7d1      	b.n	8000d84 <__sinit+0xc>
 8000de0:	0800199c 	.word	0x0800199c
 8000de4:	08000d11 	.word	0x08000d11

08000de8 <__sfp>:
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dea:	4607      	mov	r7, r0
 8000dec:	f7ff ffac 	bl	8000d48 <__sfp_lock_acquire>
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <__sfp+0x84>)
 8000df2:	681e      	ldr	r6, [r3, #0]
 8000df4:	69b3      	ldr	r3, [r6, #24]
 8000df6:	b913      	cbnz	r3, 8000dfe <__sfp+0x16>
 8000df8:	4630      	mov	r0, r6
 8000dfa:	f7ff ffbd 	bl	8000d78 <__sinit>
 8000dfe:	3648      	adds	r6, #72	; 0x48
 8000e00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	d503      	bpl.n	8000e10 <__sfp+0x28>
 8000e08:	6833      	ldr	r3, [r6, #0]
 8000e0a:	b30b      	cbz	r3, 8000e50 <__sfp+0x68>
 8000e0c:	6836      	ldr	r6, [r6, #0]
 8000e0e:	e7f7      	b.n	8000e00 <__sfp+0x18>
 8000e10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e14:	b9d5      	cbnz	r5, 8000e4c <__sfp+0x64>
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <__sfp+0x88>)
 8000e18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000e1c:	60e3      	str	r3, [r4, #12]
 8000e1e:	6665      	str	r5, [r4, #100]	; 0x64
 8000e20:	f000 f847 	bl	8000eb2 <__retarget_lock_init_recursive>
 8000e24:	f7ff ff96 	bl	8000d54 <__sfp_lock_release>
 8000e28:	2208      	movs	r2, #8
 8000e2a:	4629      	mov	r1, r5
 8000e2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000e30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000e34:	6025      	str	r5, [r4, #0]
 8000e36:	61a5      	str	r5, [r4, #24]
 8000e38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000e3c:	f7ff fd30 	bl	80008a0 <memset>
 8000e40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000e44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000e48:	4620      	mov	r0, r4
 8000e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e4c:	3468      	adds	r4, #104	; 0x68
 8000e4e:	e7d9      	b.n	8000e04 <__sfp+0x1c>
 8000e50:	2104      	movs	r1, #4
 8000e52:	4638      	mov	r0, r7
 8000e54:	f7ff ff62 	bl	8000d1c <__sfmoreglue>
 8000e58:	4604      	mov	r4, r0
 8000e5a:	6030      	str	r0, [r6, #0]
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	d1d5      	bne.n	8000e0c <__sfp+0x24>
 8000e60:	f7ff ff78 	bl	8000d54 <__sfp_lock_release>
 8000e64:	230c      	movs	r3, #12
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	e7ee      	b.n	8000e48 <__sfp+0x60>
 8000e6a:	bf00      	nop
 8000e6c:	0800199c 	.word	0x0800199c
 8000e70:	ffff0001 	.word	0xffff0001

08000e74 <_fwalk_reent>:
 8000e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e78:	4606      	mov	r6, r0
 8000e7a:	4688      	mov	r8, r1
 8000e7c:	2700      	movs	r7, #0
 8000e7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e86:	f1b9 0901 	subs.w	r9, r9, #1
 8000e8a:	d505      	bpl.n	8000e98 <_fwalk_reent+0x24>
 8000e8c:	6824      	ldr	r4, [r4, #0]
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d1f7      	bne.n	8000e82 <_fwalk_reent+0xe>
 8000e92:	4638      	mov	r0, r7
 8000e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e98:	89ab      	ldrh	r3, [r5, #12]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d907      	bls.n	8000eae <_fwalk_reent+0x3a>
 8000e9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	d003      	beq.n	8000eae <_fwalk_reent+0x3a>
 8000ea6:	4629      	mov	r1, r5
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	47c0      	blx	r8
 8000eac:	4307      	orrs	r7, r0
 8000eae:	3568      	adds	r5, #104	; 0x68
 8000eb0:	e7e9      	b.n	8000e86 <_fwalk_reent+0x12>

08000eb2 <__retarget_lock_init_recursive>:
 8000eb2:	4770      	bx	lr

08000eb4 <__retarget_lock_acquire_recursive>:
 8000eb4:	4770      	bx	lr

08000eb6 <__retarget_lock_release_recursive>:
 8000eb6:	4770      	bx	lr

08000eb8 <__swhatbuf_r>:
 8000eb8:	b570      	push	{r4, r5, r6, lr}
 8000eba:	460e      	mov	r6, r1
 8000ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ec0:	4614      	mov	r4, r2
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	461d      	mov	r5, r3
 8000ec6:	b096      	sub	sp, #88	; 0x58
 8000ec8:	da08      	bge.n	8000edc <__swhatbuf_r+0x24>
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000ed0:	602a      	str	r2, [r5, #0]
 8000ed2:	061a      	lsls	r2, r3, #24
 8000ed4:	d410      	bmi.n	8000ef8 <__swhatbuf_r+0x40>
 8000ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eda:	e00e      	b.n	8000efa <__swhatbuf_r+0x42>
 8000edc:	466a      	mov	r2, sp
 8000ede:	f000 fc91 	bl	8001804 <_fstat_r>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	dbf1      	blt.n	8000eca <__swhatbuf_r+0x12>
 8000ee6:	9a01      	ldr	r2, [sp, #4]
 8000ee8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000eec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ef0:	425a      	negs	r2, r3
 8000ef2:	415a      	adcs	r2, r3
 8000ef4:	602a      	str	r2, [r5, #0]
 8000ef6:	e7ee      	b.n	8000ed6 <__swhatbuf_r+0x1e>
 8000ef8:	2340      	movs	r3, #64	; 0x40
 8000efa:	2000      	movs	r0, #0
 8000efc:	6023      	str	r3, [r4, #0]
 8000efe:	b016      	add	sp, #88	; 0x58
 8000f00:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f04 <__smakebuf_r>:
 8000f04:	898b      	ldrh	r3, [r1, #12]
 8000f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f08:	079d      	lsls	r5, r3, #30
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	460c      	mov	r4, r1
 8000f0e:	d507      	bpl.n	8000f20 <__smakebuf_r+0x1c>
 8000f10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f14:	6023      	str	r3, [r4, #0]
 8000f16:	6123      	str	r3, [r4, #16]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	6163      	str	r3, [r4, #20]
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd70      	pop	{r4, r5, r6, pc}
 8000f20:	466a      	mov	r2, sp
 8000f22:	ab01      	add	r3, sp, #4
 8000f24:	f7ff ffc8 	bl	8000eb8 <__swhatbuf_r>
 8000f28:	9900      	ldr	r1, [sp, #0]
 8000f2a:	4605      	mov	r5, r0
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	f000 f891 	bl	8001054 <_malloc_r>
 8000f32:	b948      	cbnz	r0, 8000f48 <__smakebuf_r+0x44>
 8000f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f38:	059a      	lsls	r2, r3, #22
 8000f3a:	d4ef      	bmi.n	8000f1c <__smakebuf_r+0x18>
 8000f3c:	f023 0303 	bic.w	r3, r3, #3
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	81a3      	strh	r3, [r4, #12]
 8000f46:	e7e3      	b.n	8000f10 <__smakebuf_r+0xc>
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <__smakebuf_r+0x7c>)
 8000f4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000f4c:	89a3      	ldrh	r3, [r4, #12]
 8000f4e:	6020      	str	r0, [r4, #0]
 8000f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f54:	81a3      	strh	r3, [r4, #12]
 8000f56:	9b00      	ldr	r3, [sp, #0]
 8000f58:	6120      	str	r0, [r4, #16]
 8000f5a:	6163      	str	r3, [r4, #20]
 8000f5c:	9b01      	ldr	r3, [sp, #4]
 8000f5e:	b15b      	cbz	r3, 8000f78 <__smakebuf_r+0x74>
 8000f60:	4630      	mov	r0, r6
 8000f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f66:	f000 fc5f 	bl	8001828 <_isatty_r>
 8000f6a:	b128      	cbz	r0, 8000f78 <__smakebuf_r+0x74>
 8000f6c:	89a3      	ldrh	r3, [r4, #12]
 8000f6e:	f023 0303 	bic.w	r3, r3, #3
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	81a3      	strh	r3, [r4, #12]
 8000f78:	89a0      	ldrh	r0, [r4, #12]
 8000f7a:	4305      	orrs	r5, r0
 8000f7c:	81a5      	strh	r5, [r4, #12]
 8000f7e:	e7cd      	b.n	8000f1c <__smakebuf_r+0x18>
 8000f80:	08000d11 	.word	0x08000d11

08000f84 <_free_r>:
 8000f84:	b538      	push	{r3, r4, r5, lr}
 8000f86:	4605      	mov	r5, r0
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	d040      	beq.n	800100e <_free_r+0x8a>
 8000f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f90:	1f0c      	subs	r4, r1, #4
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	bfb8      	it	lt
 8000f96:	18e4      	addlt	r4, r4, r3
 8000f98:	f000 fc76 	bl	8001888 <__malloc_lock>
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <_free_r+0x8c>)
 8000f9e:	6813      	ldr	r3, [r2, #0]
 8000fa0:	b933      	cbnz	r3, 8000fb0 <_free_r+0x2c>
 8000fa2:	6063      	str	r3, [r4, #4]
 8000fa4:	6014      	str	r4, [r2, #0]
 8000fa6:	4628      	mov	r0, r5
 8000fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fac:	f000 bc72 	b.w	8001894 <__malloc_unlock>
 8000fb0:	42a3      	cmp	r3, r4
 8000fb2:	d908      	bls.n	8000fc6 <_free_r+0x42>
 8000fb4:	6820      	ldr	r0, [r4, #0]
 8000fb6:	1821      	adds	r1, r4, r0
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	bf01      	itttt	eq
 8000fbc:	6819      	ldreq	r1, [r3, #0]
 8000fbe:	685b      	ldreq	r3, [r3, #4]
 8000fc0:	1809      	addeq	r1, r1, r0
 8000fc2:	6021      	streq	r1, [r4, #0]
 8000fc4:	e7ed      	b.n	8000fa2 <_free_r+0x1e>
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	b10b      	cbz	r3, 8000fd0 <_free_r+0x4c>
 8000fcc:	42a3      	cmp	r3, r4
 8000fce:	d9fa      	bls.n	8000fc6 <_free_r+0x42>
 8000fd0:	6811      	ldr	r1, [r2, #0]
 8000fd2:	1850      	adds	r0, r2, r1
 8000fd4:	42a0      	cmp	r0, r4
 8000fd6:	d10b      	bne.n	8000ff0 <_free_r+0x6c>
 8000fd8:	6820      	ldr	r0, [r4, #0]
 8000fda:	4401      	add	r1, r0
 8000fdc:	1850      	adds	r0, r2, r1
 8000fde:	4283      	cmp	r3, r0
 8000fe0:	6011      	str	r1, [r2, #0]
 8000fe2:	d1e0      	bne.n	8000fa6 <_free_r+0x22>
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	4401      	add	r1, r0
 8000fea:	6011      	str	r1, [r2, #0]
 8000fec:	6053      	str	r3, [r2, #4]
 8000fee:	e7da      	b.n	8000fa6 <_free_r+0x22>
 8000ff0:	d902      	bls.n	8000ff8 <_free_r+0x74>
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	602b      	str	r3, [r5, #0]
 8000ff6:	e7d6      	b.n	8000fa6 <_free_r+0x22>
 8000ff8:	6820      	ldr	r0, [r4, #0]
 8000ffa:	1821      	adds	r1, r4, r0
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf01      	itttt	eq
 8001000:	6819      	ldreq	r1, [r3, #0]
 8001002:	685b      	ldreq	r3, [r3, #4]
 8001004:	1809      	addeq	r1, r1, r0
 8001006:	6021      	streq	r1, [r4, #0]
 8001008:	6063      	str	r3, [r4, #4]
 800100a:	6054      	str	r4, [r2, #4]
 800100c:	e7cb      	b.n	8000fa6 <_free_r+0x22>
 800100e:	bd38      	pop	{r3, r4, r5, pc}
 8001010:	200000e8 	.word	0x200000e8

08001014 <sbrk_aligned>:
 8001014:	b570      	push	{r4, r5, r6, lr}
 8001016:	4e0e      	ldr	r6, [pc, #56]	; (8001050 <sbrk_aligned+0x3c>)
 8001018:	460c      	mov	r4, r1
 800101a:	6831      	ldr	r1, [r6, #0]
 800101c:	4605      	mov	r5, r0
 800101e:	b911      	cbnz	r1, 8001026 <sbrk_aligned+0x12>
 8001020:	f000 fb7a 	bl	8001718 <_sbrk_r>
 8001024:	6030      	str	r0, [r6, #0]
 8001026:	4621      	mov	r1, r4
 8001028:	4628      	mov	r0, r5
 800102a:	f000 fb75 	bl	8001718 <_sbrk_r>
 800102e:	1c43      	adds	r3, r0, #1
 8001030:	d00a      	beq.n	8001048 <sbrk_aligned+0x34>
 8001032:	1cc4      	adds	r4, r0, #3
 8001034:	f024 0403 	bic.w	r4, r4, #3
 8001038:	42a0      	cmp	r0, r4
 800103a:	d007      	beq.n	800104c <sbrk_aligned+0x38>
 800103c:	1a21      	subs	r1, r4, r0
 800103e:	4628      	mov	r0, r5
 8001040:	f000 fb6a 	bl	8001718 <_sbrk_r>
 8001044:	3001      	adds	r0, #1
 8001046:	d101      	bne.n	800104c <sbrk_aligned+0x38>
 8001048:	f04f 34ff 	mov.w	r4, #4294967295
 800104c:	4620      	mov	r0, r4
 800104e:	bd70      	pop	{r4, r5, r6, pc}
 8001050:	200000ec 	.word	0x200000ec

08001054 <_malloc_r>:
 8001054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001058:	1ccd      	adds	r5, r1, #3
 800105a:	f025 0503 	bic.w	r5, r5, #3
 800105e:	3508      	adds	r5, #8
 8001060:	2d0c      	cmp	r5, #12
 8001062:	bf38      	it	cc
 8001064:	250c      	movcc	r5, #12
 8001066:	2d00      	cmp	r5, #0
 8001068:	4607      	mov	r7, r0
 800106a:	db01      	blt.n	8001070 <_malloc_r+0x1c>
 800106c:	42a9      	cmp	r1, r5
 800106e:	d905      	bls.n	800107c <_malloc_r+0x28>
 8001070:	230c      	movs	r3, #12
 8001072:	2600      	movs	r6, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4630      	mov	r0, r6
 8001078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800107c:	4e2e      	ldr	r6, [pc, #184]	; (8001138 <_malloc_r+0xe4>)
 800107e:	f000 fc03 	bl	8001888 <__malloc_lock>
 8001082:	6833      	ldr	r3, [r6, #0]
 8001084:	461c      	mov	r4, r3
 8001086:	bb34      	cbnz	r4, 80010d6 <_malloc_r+0x82>
 8001088:	4629      	mov	r1, r5
 800108a:	4638      	mov	r0, r7
 800108c:	f7ff ffc2 	bl	8001014 <sbrk_aligned>
 8001090:	1c43      	adds	r3, r0, #1
 8001092:	4604      	mov	r4, r0
 8001094:	d14d      	bne.n	8001132 <_malloc_r+0xde>
 8001096:	6834      	ldr	r4, [r6, #0]
 8001098:	4626      	mov	r6, r4
 800109a:	2e00      	cmp	r6, #0
 800109c:	d140      	bne.n	8001120 <_malloc_r+0xcc>
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	4631      	mov	r1, r6
 80010a2:	4638      	mov	r0, r7
 80010a4:	eb04 0803 	add.w	r8, r4, r3
 80010a8:	f000 fb36 	bl	8001718 <_sbrk_r>
 80010ac:	4580      	cmp	r8, r0
 80010ae:	d13a      	bne.n	8001126 <_malloc_r+0xd2>
 80010b0:	6821      	ldr	r1, [r4, #0]
 80010b2:	3503      	adds	r5, #3
 80010b4:	1a6d      	subs	r5, r5, r1
 80010b6:	f025 0503 	bic.w	r5, r5, #3
 80010ba:	3508      	adds	r5, #8
 80010bc:	2d0c      	cmp	r5, #12
 80010be:	bf38      	it	cc
 80010c0:	250c      	movcc	r5, #12
 80010c2:	4638      	mov	r0, r7
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff ffa5 	bl	8001014 <sbrk_aligned>
 80010ca:	3001      	adds	r0, #1
 80010cc:	d02b      	beq.n	8001126 <_malloc_r+0xd2>
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	442b      	add	r3, r5
 80010d2:	6023      	str	r3, [r4, #0]
 80010d4:	e00e      	b.n	80010f4 <_malloc_r+0xa0>
 80010d6:	6822      	ldr	r2, [r4, #0]
 80010d8:	1b52      	subs	r2, r2, r5
 80010da:	d41e      	bmi.n	800111a <_malloc_r+0xc6>
 80010dc:	2a0b      	cmp	r2, #11
 80010de:	d916      	bls.n	800110e <_malloc_r+0xba>
 80010e0:	1961      	adds	r1, r4, r5
 80010e2:	42a3      	cmp	r3, r4
 80010e4:	6025      	str	r5, [r4, #0]
 80010e6:	bf18      	it	ne
 80010e8:	6059      	strne	r1, [r3, #4]
 80010ea:	6863      	ldr	r3, [r4, #4]
 80010ec:	bf08      	it	eq
 80010ee:	6031      	streq	r1, [r6, #0]
 80010f0:	5162      	str	r2, [r4, r5]
 80010f2:	604b      	str	r3, [r1, #4]
 80010f4:	4638      	mov	r0, r7
 80010f6:	f104 060b 	add.w	r6, r4, #11
 80010fa:	f000 fbcb 	bl	8001894 <__malloc_unlock>
 80010fe:	f026 0607 	bic.w	r6, r6, #7
 8001102:	1d23      	adds	r3, r4, #4
 8001104:	1af2      	subs	r2, r6, r3
 8001106:	d0b6      	beq.n	8001076 <_malloc_r+0x22>
 8001108:	1b9b      	subs	r3, r3, r6
 800110a:	50a3      	str	r3, [r4, r2]
 800110c:	e7b3      	b.n	8001076 <_malloc_r+0x22>
 800110e:	6862      	ldr	r2, [r4, #4]
 8001110:	42a3      	cmp	r3, r4
 8001112:	bf0c      	ite	eq
 8001114:	6032      	streq	r2, [r6, #0]
 8001116:	605a      	strne	r2, [r3, #4]
 8001118:	e7ec      	b.n	80010f4 <_malloc_r+0xa0>
 800111a:	4623      	mov	r3, r4
 800111c:	6864      	ldr	r4, [r4, #4]
 800111e:	e7b2      	b.n	8001086 <_malloc_r+0x32>
 8001120:	4634      	mov	r4, r6
 8001122:	6876      	ldr	r6, [r6, #4]
 8001124:	e7b9      	b.n	800109a <_malloc_r+0x46>
 8001126:	230c      	movs	r3, #12
 8001128:	4638      	mov	r0, r7
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	f000 fbb2 	bl	8001894 <__malloc_unlock>
 8001130:	e7a1      	b.n	8001076 <_malloc_r+0x22>
 8001132:	6025      	str	r5, [r4, #0]
 8001134:	e7de      	b.n	80010f4 <_malloc_r+0xa0>
 8001136:	bf00      	nop
 8001138:	200000e8 	.word	0x200000e8

0800113c <__sfputc_r>:
 800113c:	6893      	ldr	r3, [r2, #8]
 800113e:	b410      	push	{r4}
 8001140:	3b01      	subs	r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	6093      	str	r3, [r2, #8]
 8001146:	da07      	bge.n	8001158 <__sfputc_r+0x1c>
 8001148:	6994      	ldr	r4, [r2, #24]
 800114a:	42a3      	cmp	r3, r4
 800114c:	db01      	blt.n	8001152 <__sfputc_r+0x16>
 800114e:	290a      	cmp	r1, #10
 8001150:	d102      	bne.n	8001158 <__sfputc_r+0x1c>
 8001152:	bc10      	pop	{r4}
 8001154:	f7ff bc3a 	b.w	80009cc <__swbuf_r>
 8001158:	6813      	ldr	r3, [r2, #0]
 800115a:	1c58      	adds	r0, r3, #1
 800115c:	6010      	str	r0, [r2, #0]
 800115e:	7019      	strb	r1, [r3, #0]
 8001160:	4608      	mov	r0, r1
 8001162:	bc10      	pop	{r4}
 8001164:	4770      	bx	lr

08001166 <__sfputs_r>:
 8001166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001168:	4606      	mov	r6, r0
 800116a:	460f      	mov	r7, r1
 800116c:	4614      	mov	r4, r2
 800116e:	18d5      	adds	r5, r2, r3
 8001170:	42ac      	cmp	r4, r5
 8001172:	d101      	bne.n	8001178 <__sfputs_r+0x12>
 8001174:	2000      	movs	r0, #0
 8001176:	e007      	b.n	8001188 <__sfputs_r+0x22>
 8001178:	463a      	mov	r2, r7
 800117a:	4630      	mov	r0, r6
 800117c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001180:	f7ff ffdc 	bl	800113c <__sfputc_r>
 8001184:	1c43      	adds	r3, r0, #1
 8001186:	d1f3      	bne.n	8001170 <__sfputs_r+0xa>
 8001188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800118c <_vfiprintf_r>:
 800118c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001190:	460d      	mov	r5, r1
 8001192:	4614      	mov	r4, r2
 8001194:	4698      	mov	r8, r3
 8001196:	4606      	mov	r6, r0
 8001198:	b09d      	sub	sp, #116	; 0x74
 800119a:	b118      	cbz	r0, 80011a4 <_vfiprintf_r+0x18>
 800119c:	6983      	ldr	r3, [r0, #24]
 800119e:	b90b      	cbnz	r3, 80011a4 <_vfiprintf_r+0x18>
 80011a0:	f7ff fdea 	bl	8000d78 <__sinit>
 80011a4:	4b89      	ldr	r3, [pc, #548]	; (80013cc <_vfiprintf_r+0x240>)
 80011a6:	429d      	cmp	r5, r3
 80011a8:	d11b      	bne.n	80011e2 <_vfiprintf_r+0x56>
 80011aa:	6875      	ldr	r5, [r6, #4]
 80011ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80011ae:	07d9      	lsls	r1, r3, #31
 80011b0:	d405      	bmi.n	80011be <_vfiprintf_r+0x32>
 80011b2:	89ab      	ldrh	r3, [r5, #12]
 80011b4:	059a      	lsls	r2, r3, #22
 80011b6:	d402      	bmi.n	80011be <_vfiprintf_r+0x32>
 80011b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80011ba:	f7ff fe7b 	bl	8000eb4 <__retarget_lock_acquire_recursive>
 80011be:	89ab      	ldrh	r3, [r5, #12]
 80011c0:	071b      	lsls	r3, r3, #28
 80011c2:	d501      	bpl.n	80011c8 <_vfiprintf_r+0x3c>
 80011c4:	692b      	ldr	r3, [r5, #16]
 80011c6:	b9eb      	cbnz	r3, 8001204 <_vfiprintf_r+0x78>
 80011c8:	4629      	mov	r1, r5
 80011ca:	4630      	mov	r0, r6
 80011cc:	f7ff fc50 	bl	8000a70 <__swsetup_r>
 80011d0:	b1c0      	cbz	r0, 8001204 <_vfiprintf_r+0x78>
 80011d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80011d4:	07dc      	lsls	r4, r3, #31
 80011d6:	d50e      	bpl.n	80011f6 <_vfiprintf_r+0x6a>
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	b01d      	add	sp, #116	; 0x74
 80011de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011e2:	4b7b      	ldr	r3, [pc, #492]	; (80013d0 <_vfiprintf_r+0x244>)
 80011e4:	429d      	cmp	r5, r3
 80011e6:	d101      	bne.n	80011ec <_vfiprintf_r+0x60>
 80011e8:	68b5      	ldr	r5, [r6, #8]
 80011ea:	e7df      	b.n	80011ac <_vfiprintf_r+0x20>
 80011ec:	4b79      	ldr	r3, [pc, #484]	; (80013d4 <_vfiprintf_r+0x248>)
 80011ee:	429d      	cmp	r5, r3
 80011f0:	bf08      	it	eq
 80011f2:	68f5      	ldreq	r5, [r6, #12]
 80011f4:	e7da      	b.n	80011ac <_vfiprintf_r+0x20>
 80011f6:	89ab      	ldrh	r3, [r5, #12]
 80011f8:	0598      	lsls	r0, r3, #22
 80011fa:	d4ed      	bmi.n	80011d8 <_vfiprintf_r+0x4c>
 80011fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80011fe:	f7ff fe5a 	bl	8000eb6 <__retarget_lock_release_recursive>
 8001202:	e7e9      	b.n	80011d8 <_vfiprintf_r+0x4c>
 8001204:	2300      	movs	r3, #0
 8001206:	9309      	str	r3, [sp, #36]	; 0x24
 8001208:	2320      	movs	r3, #32
 800120a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800120e:	2330      	movs	r3, #48	; 0x30
 8001210:	f04f 0901 	mov.w	r9, #1
 8001214:	f8cd 800c 	str.w	r8, [sp, #12]
 8001218:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80013d8 <_vfiprintf_r+0x24c>
 800121c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001220:	4623      	mov	r3, r4
 8001222:	469a      	mov	sl, r3
 8001224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001228:	b10a      	cbz	r2, 800122e <_vfiprintf_r+0xa2>
 800122a:	2a25      	cmp	r2, #37	; 0x25
 800122c:	d1f9      	bne.n	8001222 <_vfiprintf_r+0x96>
 800122e:	ebba 0b04 	subs.w	fp, sl, r4
 8001232:	d00b      	beq.n	800124c <_vfiprintf_r+0xc0>
 8001234:	465b      	mov	r3, fp
 8001236:	4622      	mov	r2, r4
 8001238:	4629      	mov	r1, r5
 800123a:	4630      	mov	r0, r6
 800123c:	f7ff ff93 	bl	8001166 <__sfputs_r>
 8001240:	3001      	adds	r0, #1
 8001242:	f000 80aa 	beq.w	800139a <_vfiprintf_r+0x20e>
 8001246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001248:	445a      	add	r2, fp
 800124a:	9209      	str	r2, [sp, #36]	; 0x24
 800124c:	f89a 3000 	ldrb.w	r3, [sl]
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80a2 	beq.w	800139a <_vfiprintf_r+0x20e>
 8001256:	2300      	movs	r3, #0
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001260:	f10a 0a01 	add.w	sl, sl, #1
 8001264:	9304      	str	r3, [sp, #16]
 8001266:	9307      	str	r3, [sp, #28]
 8001268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800126c:	931a      	str	r3, [sp, #104]	; 0x68
 800126e:	4654      	mov	r4, sl
 8001270:	2205      	movs	r2, #5
 8001272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001276:	4858      	ldr	r0, [pc, #352]	; (80013d8 <_vfiprintf_r+0x24c>)
 8001278:	f000 faf8 	bl	800186c <memchr>
 800127c:	9a04      	ldr	r2, [sp, #16]
 800127e:	b9d8      	cbnz	r0, 80012b8 <_vfiprintf_r+0x12c>
 8001280:	06d1      	lsls	r1, r2, #27
 8001282:	bf44      	itt	mi
 8001284:	2320      	movmi	r3, #32
 8001286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800128a:	0713      	lsls	r3, r2, #28
 800128c:	bf44      	itt	mi
 800128e:	232b      	movmi	r3, #43	; 0x2b
 8001290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001294:	f89a 3000 	ldrb.w	r3, [sl]
 8001298:	2b2a      	cmp	r3, #42	; 0x2a
 800129a:	d015      	beq.n	80012c8 <_vfiprintf_r+0x13c>
 800129c:	4654      	mov	r4, sl
 800129e:	2000      	movs	r0, #0
 80012a0:	f04f 0c0a 	mov.w	ip, #10
 80012a4:	9a07      	ldr	r2, [sp, #28]
 80012a6:	4621      	mov	r1, r4
 80012a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012ac:	3b30      	subs	r3, #48	; 0x30
 80012ae:	2b09      	cmp	r3, #9
 80012b0:	d94e      	bls.n	8001350 <_vfiprintf_r+0x1c4>
 80012b2:	b1b0      	cbz	r0, 80012e2 <_vfiprintf_r+0x156>
 80012b4:	9207      	str	r2, [sp, #28]
 80012b6:	e014      	b.n	80012e2 <_vfiprintf_r+0x156>
 80012b8:	eba0 0308 	sub.w	r3, r0, r8
 80012bc:	fa09 f303 	lsl.w	r3, r9, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	46a2      	mov	sl, r4
 80012c4:	9304      	str	r3, [sp, #16]
 80012c6:	e7d2      	b.n	800126e <_vfiprintf_r+0xe2>
 80012c8:	9b03      	ldr	r3, [sp, #12]
 80012ca:	1d19      	adds	r1, r3, #4
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	9103      	str	r1, [sp, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bfbb      	ittet	lt
 80012d4:	425b      	neglt	r3, r3
 80012d6:	f042 0202 	orrlt.w	r2, r2, #2
 80012da:	9307      	strge	r3, [sp, #28]
 80012dc:	9307      	strlt	r3, [sp, #28]
 80012de:	bfb8      	it	lt
 80012e0:	9204      	strlt	r2, [sp, #16]
 80012e2:	7823      	ldrb	r3, [r4, #0]
 80012e4:	2b2e      	cmp	r3, #46	; 0x2e
 80012e6:	d10c      	bne.n	8001302 <_vfiprintf_r+0x176>
 80012e8:	7863      	ldrb	r3, [r4, #1]
 80012ea:	2b2a      	cmp	r3, #42	; 0x2a
 80012ec:	d135      	bne.n	800135a <_vfiprintf_r+0x1ce>
 80012ee:	9b03      	ldr	r3, [sp, #12]
 80012f0:	3402      	adds	r4, #2
 80012f2:	1d1a      	adds	r2, r3, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	9203      	str	r2, [sp, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bfb8      	it	lt
 80012fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8001300:	9305      	str	r3, [sp, #20]
 8001302:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80013dc <_vfiprintf_r+0x250>
 8001306:	2203      	movs	r2, #3
 8001308:	4650      	mov	r0, sl
 800130a:	7821      	ldrb	r1, [r4, #0]
 800130c:	f000 faae 	bl	800186c <memchr>
 8001310:	b140      	cbz	r0, 8001324 <_vfiprintf_r+0x198>
 8001312:	2340      	movs	r3, #64	; 0x40
 8001314:	eba0 000a 	sub.w	r0, r0, sl
 8001318:	fa03 f000 	lsl.w	r0, r3, r0
 800131c:	9b04      	ldr	r3, [sp, #16]
 800131e:	3401      	adds	r4, #1
 8001320:	4303      	orrs	r3, r0
 8001322:	9304      	str	r3, [sp, #16]
 8001324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001328:	2206      	movs	r2, #6
 800132a:	482d      	ldr	r0, [pc, #180]	; (80013e0 <_vfiprintf_r+0x254>)
 800132c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001330:	f000 fa9c 	bl	800186c <memchr>
 8001334:	2800      	cmp	r0, #0
 8001336:	d03f      	beq.n	80013b8 <_vfiprintf_r+0x22c>
 8001338:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <_vfiprintf_r+0x258>)
 800133a:	bb1b      	cbnz	r3, 8001384 <_vfiprintf_r+0x1f8>
 800133c:	9b03      	ldr	r3, [sp, #12]
 800133e:	3307      	adds	r3, #7
 8001340:	f023 0307 	bic.w	r3, r3, #7
 8001344:	3308      	adds	r3, #8
 8001346:	9303      	str	r3, [sp, #12]
 8001348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800134a:	443b      	add	r3, r7
 800134c:	9309      	str	r3, [sp, #36]	; 0x24
 800134e:	e767      	b.n	8001220 <_vfiprintf_r+0x94>
 8001350:	460c      	mov	r4, r1
 8001352:	2001      	movs	r0, #1
 8001354:	fb0c 3202 	mla	r2, ip, r2, r3
 8001358:	e7a5      	b.n	80012a6 <_vfiprintf_r+0x11a>
 800135a:	2300      	movs	r3, #0
 800135c:	f04f 0c0a 	mov.w	ip, #10
 8001360:	4619      	mov	r1, r3
 8001362:	3401      	adds	r4, #1
 8001364:	9305      	str	r3, [sp, #20]
 8001366:	4620      	mov	r0, r4
 8001368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800136c:	3a30      	subs	r2, #48	; 0x30
 800136e:	2a09      	cmp	r2, #9
 8001370:	d903      	bls.n	800137a <_vfiprintf_r+0x1ee>
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0c5      	beq.n	8001302 <_vfiprintf_r+0x176>
 8001376:	9105      	str	r1, [sp, #20]
 8001378:	e7c3      	b.n	8001302 <_vfiprintf_r+0x176>
 800137a:	4604      	mov	r4, r0
 800137c:	2301      	movs	r3, #1
 800137e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001382:	e7f0      	b.n	8001366 <_vfiprintf_r+0x1da>
 8001384:	ab03      	add	r3, sp, #12
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	462a      	mov	r2, r5
 800138a:	4630      	mov	r0, r6
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <_vfiprintf_r+0x25c>)
 800138e:	a904      	add	r1, sp, #16
 8001390:	f3af 8000 	nop.w
 8001394:	4607      	mov	r7, r0
 8001396:	1c78      	adds	r0, r7, #1
 8001398:	d1d6      	bne.n	8001348 <_vfiprintf_r+0x1bc>
 800139a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800139c:	07d9      	lsls	r1, r3, #31
 800139e:	d405      	bmi.n	80013ac <_vfiprintf_r+0x220>
 80013a0:	89ab      	ldrh	r3, [r5, #12]
 80013a2:	059a      	lsls	r2, r3, #22
 80013a4:	d402      	bmi.n	80013ac <_vfiprintf_r+0x220>
 80013a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80013a8:	f7ff fd85 	bl	8000eb6 <__retarget_lock_release_recursive>
 80013ac:	89ab      	ldrh	r3, [r5, #12]
 80013ae:	065b      	lsls	r3, r3, #25
 80013b0:	f53f af12 	bmi.w	80011d8 <_vfiprintf_r+0x4c>
 80013b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80013b6:	e711      	b.n	80011dc <_vfiprintf_r+0x50>
 80013b8:	ab03      	add	r3, sp, #12
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	462a      	mov	r2, r5
 80013be:	4630      	mov	r0, r6
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <_vfiprintf_r+0x25c>)
 80013c2:	a904      	add	r1, sp, #16
 80013c4:	f000 f882 	bl	80014cc <_printf_i>
 80013c8:	e7e4      	b.n	8001394 <_vfiprintf_r+0x208>
 80013ca:	bf00      	nop
 80013cc:	080019c0 	.word	0x080019c0
 80013d0:	080019e0 	.word	0x080019e0
 80013d4:	080019a0 	.word	0x080019a0
 80013d8:	08001a00 	.word	0x08001a00
 80013dc:	08001a06 	.word	0x08001a06
 80013e0:	08001a0a 	.word	0x08001a0a
 80013e4:	00000000 	.word	0x00000000
 80013e8:	08001167 	.word	0x08001167

080013ec <_printf_common>:
 80013ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013f0:	4616      	mov	r6, r2
 80013f2:	4699      	mov	r9, r3
 80013f4:	688a      	ldr	r2, [r1, #8]
 80013f6:	690b      	ldr	r3, [r1, #16]
 80013f8:	4607      	mov	r7, r0
 80013fa:	4293      	cmp	r3, r2
 80013fc:	bfb8      	it	lt
 80013fe:	4613      	movlt	r3, r2
 8001400:	6033      	str	r3, [r6, #0]
 8001402:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001406:	460c      	mov	r4, r1
 8001408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800140c:	b10a      	cbz	r2, 8001412 <_printf_common+0x26>
 800140e:	3301      	adds	r3, #1
 8001410:	6033      	str	r3, [r6, #0]
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	0699      	lsls	r1, r3, #26
 8001416:	bf42      	ittt	mi
 8001418:	6833      	ldrmi	r3, [r6, #0]
 800141a:	3302      	addmi	r3, #2
 800141c:	6033      	strmi	r3, [r6, #0]
 800141e:	6825      	ldr	r5, [r4, #0]
 8001420:	f015 0506 	ands.w	r5, r5, #6
 8001424:	d106      	bne.n	8001434 <_printf_common+0x48>
 8001426:	f104 0a19 	add.w	sl, r4, #25
 800142a:	68e3      	ldr	r3, [r4, #12]
 800142c:	6832      	ldr	r2, [r6, #0]
 800142e:	1a9b      	subs	r3, r3, r2
 8001430:	42ab      	cmp	r3, r5
 8001432:	dc28      	bgt.n	8001486 <_printf_common+0x9a>
 8001434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001438:	1e13      	subs	r3, r2, #0
 800143a:	6822      	ldr	r2, [r4, #0]
 800143c:	bf18      	it	ne
 800143e:	2301      	movne	r3, #1
 8001440:	0692      	lsls	r2, r2, #26
 8001442:	d42d      	bmi.n	80014a0 <_printf_common+0xb4>
 8001444:	4649      	mov	r1, r9
 8001446:	4638      	mov	r0, r7
 8001448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800144c:	47c0      	blx	r8
 800144e:	3001      	adds	r0, #1
 8001450:	d020      	beq.n	8001494 <_printf_common+0xa8>
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	68e5      	ldr	r5, [r4, #12]
 8001456:	f003 0306 	and.w	r3, r3, #6
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf18      	it	ne
 800145e:	2500      	movne	r5, #0
 8001460:	6832      	ldr	r2, [r6, #0]
 8001462:	f04f 0600 	mov.w	r6, #0
 8001466:	68a3      	ldr	r3, [r4, #8]
 8001468:	bf08      	it	eq
 800146a:	1aad      	subeq	r5, r5, r2
 800146c:	6922      	ldr	r2, [r4, #16]
 800146e:	bf08      	it	eq
 8001470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001474:	4293      	cmp	r3, r2
 8001476:	bfc4      	itt	gt
 8001478:	1a9b      	subgt	r3, r3, r2
 800147a:	18ed      	addgt	r5, r5, r3
 800147c:	341a      	adds	r4, #26
 800147e:	42b5      	cmp	r5, r6
 8001480:	d11a      	bne.n	80014b8 <_printf_common+0xcc>
 8001482:	2000      	movs	r0, #0
 8001484:	e008      	b.n	8001498 <_printf_common+0xac>
 8001486:	2301      	movs	r3, #1
 8001488:	4652      	mov	r2, sl
 800148a:	4649      	mov	r1, r9
 800148c:	4638      	mov	r0, r7
 800148e:	47c0      	blx	r8
 8001490:	3001      	adds	r0, #1
 8001492:	d103      	bne.n	800149c <_printf_common+0xb0>
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800149c:	3501      	adds	r5, #1
 800149e:	e7c4      	b.n	800142a <_printf_common+0x3e>
 80014a0:	2030      	movs	r0, #48	; 0x30
 80014a2:	18e1      	adds	r1, r4, r3
 80014a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80014ae:	4422      	add	r2, r4
 80014b0:	3302      	adds	r3, #2
 80014b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80014b6:	e7c5      	b.n	8001444 <_printf_common+0x58>
 80014b8:	2301      	movs	r3, #1
 80014ba:	4622      	mov	r2, r4
 80014bc:	4649      	mov	r1, r9
 80014be:	4638      	mov	r0, r7
 80014c0:	47c0      	blx	r8
 80014c2:	3001      	adds	r0, #1
 80014c4:	d0e6      	beq.n	8001494 <_printf_common+0xa8>
 80014c6:	3601      	adds	r6, #1
 80014c8:	e7d9      	b.n	800147e <_printf_common+0x92>
	...

080014cc <_printf_i>:
 80014cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80014d0:	7e0f      	ldrb	r7, [r1, #24]
 80014d2:	4691      	mov	r9, r2
 80014d4:	2f78      	cmp	r7, #120	; 0x78
 80014d6:	4680      	mov	r8, r0
 80014d8:	460c      	mov	r4, r1
 80014da:	469a      	mov	sl, r3
 80014dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80014de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80014e2:	d807      	bhi.n	80014f4 <_printf_i+0x28>
 80014e4:	2f62      	cmp	r7, #98	; 0x62
 80014e6:	d80a      	bhi.n	80014fe <_printf_i+0x32>
 80014e8:	2f00      	cmp	r7, #0
 80014ea:	f000 80d9 	beq.w	80016a0 <_printf_i+0x1d4>
 80014ee:	2f58      	cmp	r7, #88	; 0x58
 80014f0:	f000 80a4 	beq.w	800163c <_printf_i+0x170>
 80014f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80014fc:	e03a      	b.n	8001574 <_printf_i+0xa8>
 80014fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001502:	2b15      	cmp	r3, #21
 8001504:	d8f6      	bhi.n	80014f4 <_printf_i+0x28>
 8001506:	a101      	add	r1, pc, #4	; (adr r1, 800150c <_printf_i+0x40>)
 8001508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800150c:	08001565 	.word	0x08001565
 8001510:	08001579 	.word	0x08001579
 8001514:	080014f5 	.word	0x080014f5
 8001518:	080014f5 	.word	0x080014f5
 800151c:	080014f5 	.word	0x080014f5
 8001520:	080014f5 	.word	0x080014f5
 8001524:	08001579 	.word	0x08001579
 8001528:	080014f5 	.word	0x080014f5
 800152c:	080014f5 	.word	0x080014f5
 8001530:	080014f5 	.word	0x080014f5
 8001534:	080014f5 	.word	0x080014f5
 8001538:	08001687 	.word	0x08001687
 800153c:	080015a9 	.word	0x080015a9
 8001540:	08001669 	.word	0x08001669
 8001544:	080014f5 	.word	0x080014f5
 8001548:	080014f5 	.word	0x080014f5
 800154c:	080016a9 	.word	0x080016a9
 8001550:	080014f5 	.word	0x080014f5
 8001554:	080015a9 	.word	0x080015a9
 8001558:	080014f5 	.word	0x080014f5
 800155c:	080014f5 	.word	0x080014f5
 8001560:	08001671 	.word	0x08001671
 8001564:	682b      	ldr	r3, [r5, #0]
 8001566:	1d1a      	adds	r2, r3, #4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	602a      	str	r2, [r5, #0]
 800156c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001574:	2301      	movs	r3, #1
 8001576:	e0a4      	b.n	80016c2 <_printf_i+0x1f6>
 8001578:	6820      	ldr	r0, [r4, #0]
 800157a:	6829      	ldr	r1, [r5, #0]
 800157c:	0606      	lsls	r6, r0, #24
 800157e:	f101 0304 	add.w	r3, r1, #4
 8001582:	d50a      	bpl.n	800159a <_printf_i+0xce>
 8001584:	680e      	ldr	r6, [r1, #0]
 8001586:	602b      	str	r3, [r5, #0]
 8001588:	2e00      	cmp	r6, #0
 800158a:	da03      	bge.n	8001594 <_printf_i+0xc8>
 800158c:	232d      	movs	r3, #45	; 0x2d
 800158e:	4276      	negs	r6, r6
 8001590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001594:	230a      	movs	r3, #10
 8001596:	485e      	ldr	r0, [pc, #376]	; (8001710 <_printf_i+0x244>)
 8001598:	e019      	b.n	80015ce <_printf_i+0x102>
 800159a:	680e      	ldr	r6, [r1, #0]
 800159c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80015a0:	602b      	str	r3, [r5, #0]
 80015a2:	bf18      	it	ne
 80015a4:	b236      	sxthne	r6, r6
 80015a6:	e7ef      	b.n	8001588 <_printf_i+0xbc>
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	6820      	ldr	r0, [r4, #0]
 80015ac:	1d19      	adds	r1, r3, #4
 80015ae:	6029      	str	r1, [r5, #0]
 80015b0:	0601      	lsls	r1, r0, #24
 80015b2:	d501      	bpl.n	80015b8 <_printf_i+0xec>
 80015b4:	681e      	ldr	r6, [r3, #0]
 80015b6:	e002      	b.n	80015be <_printf_i+0xf2>
 80015b8:	0646      	lsls	r6, r0, #25
 80015ba:	d5fb      	bpl.n	80015b4 <_printf_i+0xe8>
 80015bc:	881e      	ldrh	r6, [r3, #0]
 80015be:	2f6f      	cmp	r7, #111	; 0x6f
 80015c0:	bf0c      	ite	eq
 80015c2:	2308      	moveq	r3, #8
 80015c4:	230a      	movne	r3, #10
 80015c6:	4852      	ldr	r0, [pc, #328]	; (8001710 <_printf_i+0x244>)
 80015c8:	2100      	movs	r1, #0
 80015ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80015ce:	6865      	ldr	r5, [r4, #4]
 80015d0:	2d00      	cmp	r5, #0
 80015d2:	bfa8      	it	ge
 80015d4:	6821      	ldrge	r1, [r4, #0]
 80015d6:	60a5      	str	r5, [r4, #8]
 80015d8:	bfa4      	itt	ge
 80015da:	f021 0104 	bicge.w	r1, r1, #4
 80015de:	6021      	strge	r1, [r4, #0]
 80015e0:	b90e      	cbnz	r6, 80015e6 <_printf_i+0x11a>
 80015e2:	2d00      	cmp	r5, #0
 80015e4:	d04d      	beq.n	8001682 <_printf_i+0x1b6>
 80015e6:	4615      	mov	r5, r2
 80015e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80015ec:	fb03 6711 	mls	r7, r3, r1, r6
 80015f0:	5dc7      	ldrb	r7, [r0, r7]
 80015f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80015f6:	4637      	mov	r7, r6
 80015f8:	42bb      	cmp	r3, r7
 80015fa:	460e      	mov	r6, r1
 80015fc:	d9f4      	bls.n	80015e8 <_printf_i+0x11c>
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d10b      	bne.n	800161a <_printf_i+0x14e>
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	07de      	lsls	r6, r3, #31
 8001606:	d508      	bpl.n	800161a <_printf_i+0x14e>
 8001608:	6923      	ldr	r3, [r4, #16]
 800160a:	6861      	ldr	r1, [r4, #4]
 800160c:	4299      	cmp	r1, r3
 800160e:	bfde      	ittt	le
 8001610:	2330      	movle	r3, #48	; 0x30
 8001612:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001616:	f105 35ff 	addle.w	r5, r5, #4294967295
 800161a:	1b52      	subs	r2, r2, r5
 800161c:	6122      	str	r2, [r4, #16]
 800161e:	464b      	mov	r3, r9
 8001620:	4621      	mov	r1, r4
 8001622:	4640      	mov	r0, r8
 8001624:	f8cd a000 	str.w	sl, [sp]
 8001628:	aa03      	add	r2, sp, #12
 800162a:	f7ff fedf 	bl	80013ec <_printf_common>
 800162e:	3001      	adds	r0, #1
 8001630:	d14c      	bne.n	80016cc <_printf_i+0x200>
 8001632:	f04f 30ff 	mov.w	r0, #4294967295
 8001636:	b004      	add	sp, #16
 8001638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800163c:	4834      	ldr	r0, [pc, #208]	; (8001710 <_printf_i+0x244>)
 800163e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001642:	6829      	ldr	r1, [r5, #0]
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	f851 6b04 	ldr.w	r6, [r1], #4
 800164a:	6029      	str	r1, [r5, #0]
 800164c:	061d      	lsls	r5, r3, #24
 800164e:	d514      	bpl.n	800167a <_printf_i+0x1ae>
 8001650:	07df      	lsls	r7, r3, #31
 8001652:	bf44      	itt	mi
 8001654:	f043 0320 	orrmi.w	r3, r3, #32
 8001658:	6023      	strmi	r3, [r4, #0]
 800165a:	b91e      	cbnz	r6, 8001664 <_printf_i+0x198>
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	f023 0320 	bic.w	r3, r3, #32
 8001662:	6023      	str	r3, [r4, #0]
 8001664:	2310      	movs	r3, #16
 8001666:	e7af      	b.n	80015c8 <_printf_i+0xfc>
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	f043 0320 	orr.w	r3, r3, #32
 800166e:	6023      	str	r3, [r4, #0]
 8001670:	2378      	movs	r3, #120	; 0x78
 8001672:	4828      	ldr	r0, [pc, #160]	; (8001714 <_printf_i+0x248>)
 8001674:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001678:	e7e3      	b.n	8001642 <_printf_i+0x176>
 800167a:	0659      	lsls	r1, r3, #25
 800167c:	bf48      	it	mi
 800167e:	b2b6      	uxthmi	r6, r6
 8001680:	e7e6      	b.n	8001650 <_printf_i+0x184>
 8001682:	4615      	mov	r5, r2
 8001684:	e7bb      	b.n	80015fe <_printf_i+0x132>
 8001686:	682b      	ldr	r3, [r5, #0]
 8001688:	6826      	ldr	r6, [r4, #0]
 800168a:	1d18      	adds	r0, r3, #4
 800168c:	6961      	ldr	r1, [r4, #20]
 800168e:	6028      	str	r0, [r5, #0]
 8001690:	0635      	lsls	r5, r6, #24
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	d501      	bpl.n	800169a <_printf_i+0x1ce>
 8001696:	6019      	str	r1, [r3, #0]
 8001698:	e002      	b.n	80016a0 <_printf_i+0x1d4>
 800169a:	0670      	lsls	r0, r6, #25
 800169c:	d5fb      	bpl.n	8001696 <_printf_i+0x1ca>
 800169e:	8019      	strh	r1, [r3, #0]
 80016a0:	2300      	movs	r3, #0
 80016a2:	4615      	mov	r5, r2
 80016a4:	6123      	str	r3, [r4, #16]
 80016a6:	e7ba      	b.n	800161e <_printf_i+0x152>
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	2100      	movs	r1, #0
 80016ac:	1d1a      	adds	r2, r3, #4
 80016ae:	602a      	str	r2, [r5, #0]
 80016b0:	681d      	ldr	r5, [r3, #0]
 80016b2:	6862      	ldr	r2, [r4, #4]
 80016b4:	4628      	mov	r0, r5
 80016b6:	f000 f8d9 	bl	800186c <memchr>
 80016ba:	b108      	cbz	r0, 80016c0 <_printf_i+0x1f4>
 80016bc:	1b40      	subs	r0, r0, r5
 80016be:	6060      	str	r0, [r4, #4]
 80016c0:	6863      	ldr	r3, [r4, #4]
 80016c2:	6123      	str	r3, [r4, #16]
 80016c4:	2300      	movs	r3, #0
 80016c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80016ca:	e7a8      	b.n	800161e <_printf_i+0x152>
 80016cc:	462a      	mov	r2, r5
 80016ce:	4649      	mov	r1, r9
 80016d0:	4640      	mov	r0, r8
 80016d2:	6923      	ldr	r3, [r4, #16]
 80016d4:	47d0      	blx	sl
 80016d6:	3001      	adds	r0, #1
 80016d8:	d0ab      	beq.n	8001632 <_printf_i+0x166>
 80016da:	6823      	ldr	r3, [r4, #0]
 80016dc:	079b      	lsls	r3, r3, #30
 80016de:	d413      	bmi.n	8001708 <_printf_i+0x23c>
 80016e0:	68e0      	ldr	r0, [r4, #12]
 80016e2:	9b03      	ldr	r3, [sp, #12]
 80016e4:	4298      	cmp	r0, r3
 80016e6:	bfb8      	it	lt
 80016e8:	4618      	movlt	r0, r3
 80016ea:	e7a4      	b.n	8001636 <_printf_i+0x16a>
 80016ec:	2301      	movs	r3, #1
 80016ee:	4632      	mov	r2, r6
 80016f0:	4649      	mov	r1, r9
 80016f2:	4640      	mov	r0, r8
 80016f4:	47d0      	blx	sl
 80016f6:	3001      	adds	r0, #1
 80016f8:	d09b      	beq.n	8001632 <_printf_i+0x166>
 80016fa:	3501      	adds	r5, #1
 80016fc:	68e3      	ldr	r3, [r4, #12]
 80016fe:	9903      	ldr	r1, [sp, #12]
 8001700:	1a5b      	subs	r3, r3, r1
 8001702:	42ab      	cmp	r3, r5
 8001704:	dcf2      	bgt.n	80016ec <_printf_i+0x220>
 8001706:	e7eb      	b.n	80016e0 <_printf_i+0x214>
 8001708:	2500      	movs	r5, #0
 800170a:	f104 0619 	add.w	r6, r4, #25
 800170e:	e7f5      	b.n	80016fc <_printf_i+0x230>
 8001710:	08001a11 	.word	0x08001a11
 8001714:	08001a22 	.word	0x08001a22

08001718 <_sbrk_r>:
 8001718:	b538      	push	{r3, r4, r5, lr}
 800171a:	2300      	movs	r3, #0
 800171c:	4d05      	ldr	r5, [pc, #20]	; (8001734 <_sbrk_r+0x1c>)
 800171e:	4604      	mov	r4, r0
 8001720:	4608      	mov	r0, r1
 8001722:	602b      	str	r3, [r5, #0]
 8001724:	f000 f8f6 	bl	8001914 <_sbrk>
 8001728:	1c43      	adds	r3, r0, #1
 800172a:	d102      	bne.n	8001732 <_sbrk_r+0x1a>
 800172c:	682b      	ldr	r3, [r5, #0]
 800172e:	b103      	cbz	r3, 8001732 <_sbrk_r+0x1a>
 8001730:	6023      	str	r3, [r4, #0]
 8001732:	bd38      	pop	{r3, r4, r5, pc}
 8001734:	200000f0 	.word	0x200000f0

08001738 <__sread>:
 8001738:	b510      	push	{r4, lr}
 800173a:	460c      	mov	r4, r1
 800173c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001740:	f000 f8ae 	bl	80018a0 <_read_r>
 8001744:	2800      	cmp	r0, #0
 8001746:	bfab      	itete	ge
 8001748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800174a:	89a3      	ldrhlt	r3, [r4, #12]
 800174c:	181b      	addge	r3, r3, r0
 800174e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001752:	bfac      	ite	ge
 8001754:	6563      	strge	r3, [r4, #84]	; 0x54
 8001756:	81a3      	strhlt	r3, [r4, #12]
 8001758:	bd10      	pop	{r4, pc}

0800175a <__swrite>:
 800175a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800175e:	461f      	mov	r7, r3
 8001760:	898b      	ldrh	r3, [r1, #12]
 8001762:	4605      	mov	r5, r0
 8001764:	05db      	lsls	r3, r3, #23
 8001766:	460c      	mov	r4, r1
 8001768:	4616      	mov	r6, r2
 800176a:	d505      	bpl.n	8001778 <__swrite+0x1e>
 800176c:	2302      	movs	r3, #2
 800176e:	2200      	movs	r2, #0
 8001770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001774:	f000 f868 	bl	8001848 <_lseek_r>
 8001778:	89a3      	ldrh	r3, [r4, #12]
 800177a:	4632      	mov	r2, r6
 800177c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001780:	81a3      	strh	r3, [r4, #12]
 8001782:	4628      	mov	r0, r5
 8001784:	463b      	mov	r3, r7
 8001786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800178a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800178e:	f000 b817 	b.w	80017c0 <_write_r>

08001792 <__sseek>:
 8001792:	b510      	push	{r4, lr}
 8001794:	460c      	mov	r4, r1
 8001796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800179a:	f000 f855 	bl	8001848 <_lseek_r>
 800179e:	1c43      	adds	r3, r0, #1
 80017a0:	89a3      	ldrh	r3, [r4, #12]
 80017a2:	bf15      	itete	ne
 80017a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80017a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80017aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80017ae:	81a3      	strheq	r3, [r4, #12]
 80017b0:	bf18      	it	ne
 80017b2:	81a3      	strhne	r3, [r4, #12]
 80017b4:	bd10      	pop	{r4, pc}

080017b6 <__sclose>:
 80017b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017ba:	f000 b813 	b.w	80017e4 <_close_r>
	...

080017c0 <_write_r>:
 80017c0:	b538      	push	{r3, r4, r5, lr}
 80017c2:	4604      	mov	r4, r0
 80017c4:	4608      	mov	r0, r1
 80017c6:	4611      	mov	r1, r2
 80017c8:	2200      	movs	r2, #0
 80017ca:	4d05      	ldr	r5, [pc, #20]	; (80017e0 <_write_r+0x20>)
 80017cc:	602a      	str	r2, [r5, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	f000 f8ae 	bl	8001930 <_write>
 80017d4:	1c43      	adds	r3, r0, #1
 80017d6:	d102      	bne.n	80017de <_write_r+0x1e>
 80017d8:	682b      	ldr	r3, [r5, #0]
 80017da:	b103      	cbz	r3, 80017de <_write_r+0x1e>
 80017dc:	6023      	str	r3, [r4, #0]
 80017de:	bd38      	pop	{r3, r4, r5, pc}
 80017e0:	200000f0 	.word	0x200000f0

080017e4 <_close_r>:
 80017e4:	b538      	push	{r3, r4, r5, lr}
 80017e6:	2300      	movs	r3, #0
 80017e8:	4d05      	ldr	r5, [pc, #20]	; (8001800 <_close_r+0x1c>)
 80017ea:	4604      	mov	r4, r0
 80017ec:	4608      	mov	r0, r1
 80017ee:	602b      	str	r3, [r5, #0]
 80017f0:	f000 f868 	bl	80018c4 <_close>
 80017f4:	1c43      	adds	r3, r0, #1
 80017f6:	d102      	bne.n	80017fe <_close_r+0x1a>
 80017f8:	682b      	ldr	r3, [r5, #0]
 80017fa:	b103      	cbz	r3, 80017fe <_close_r+0x1a>
 80017fc:	6023      	str	r3, [r4, #0]
 80017fe:	bd38      	pop	{r3, r4, r5, pc}
 8001800:	200000f0 	.word	0x200000f0

08001804 <_fstat_r>:
 8001804:	b538      	push	{r3, r4, r5, lr}
 8001806:	2300      	movs	r3, #0
 8001808:	4d06      	ldr	r5, [pc, #24]	; (8001824 <_fstat_r+0x20>)
 800180a:	4604      	mov	r4, r0
 800180c:	4608      	mov	r0, r1
 800180e:	4611      	mov	r1, r2
 8001810:	602b      	str	r3, [r5, #0]
 8001812:	f000 f85f 	bl	80018d4 <_fstat>
 8001816:	1c43      	adds	r3, r0, #1
 8001818:	d102      	bne.n	8001820 <_fstat_r+0x1c>
 800181a:	682b      	ldr	r3, [r5, #0]
 800181c:	b103      	cbz	r3, 8001820 <_fstat_r+0x1c>
 800181e:	6023      	str	r3, [r4, #0]
 8001820:	bd38      	pop	{r3, r4, r5, pc}
 8001822:	bf00      	nop
 8001824:	200000f0 	.word	0x200000f0

08001828 <_isatty_r>:
 8001828:	b538      	push	{r3, r4, r5, lr}
 800182a:	2300      	movs	r3, #0
 800182c:	4d05      	ldr	r5, [pc, #20]	; (8001844 <_isatty_r+0x1c>)
 800182e:	4604      	mov	r4, r0
 8001830:	4608      	mov	r0, r1
 8001832:	602b      	str	r3, [r5, #0]
 8001834:	f000 f856 	bl	80018e4 <_isatty>
 8001838:	1c43      	adds	r3, r0, #1
 800183a:	d102      	bne.n	8001842 <_isatty_r+0x1a>
 800183c:	682b      	ldr	r3, [r5, #0]
 800183e:	b103      	cbz	r3, 8001842 <_isatty_r+0x1a>
 8001840:	6023      	str	r3, [r4, #0]
 8001842:	bd38      	pop	{r3, r4, r5, pc}
 8001844:	200000f0 	.word	0x200000f0

08001848 <_lseek_r>:
 8001848:	b538      	push	{r3, r4, r5, lr}
 800184a:	4604      	mov	r4, r0
 800184c:	4608      	mov	r0, r1
 800184e:	4611      	mov	r1, r2
 8001850:	2200      	movs	r2, #0
 8001852:	4d05      	ldr	r5, [pc, #20]	; (8001868 <_lseek_r+0x20>)
 8001854:	602a      	str	r2, [r5, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	f000 f84c 	bl	80018f4 <_lseek>
 800185c:	1c43      	adds	r3, r0, #1
 800185e:	d102      	bne.n	8001866 <_lseek_r+0x1e>
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	b103      	cbz	r3, 8001866 <_lseek_r+0x1e>
 8001864:	6023      	str	r3, [r4, #0]
 8001866:	bd38      	pop	{r3, r4, r5, pc}
 8001868:	200000f0 	.word	0x200000f0

0800186c <memchr>:
 800186c:	4603      	mov	r3, r0
 800186e:	b510      	push	{r4, lr}
 8001870:	b2c9      	uxtb	r1, r1
 8001872:	4402      	add	r2, r0
 8001874:	4293      	cmp	r3, r2
 8001876:	4618      	mov	r0, r3
 8001878:	d101      	bne.n	800187e <memchr+0x12>
 800187a:	2000      	movs	r0, #0
 800187c:	e003      	b.n	8001886 <memchr+0x1a>
 800187e:	7804      	ldrb	r4, [r0, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	428c      	cmp	r4, r1
 8001884:	d1f6      	bne.n	8001874 <memchr+0x8>
 8001886:	bd10      	pop	{r4, pc}

08001888 <__malloc_lock>:
 8001888:	4801      	ldr	r0, [pc, #4]	; (8001890 <__malloc_lock+0x8>)
 800188a:	f7ff bb13 	b.w	8000eb4 <__retarget_lock_acquire_recursive>
 800188e:	bf00      	nop
 8001890:	200000e4 	.word	0x200000e4

08001894 <__malloc_unlock>:
 8001894:	4801      	ldr	r0, [pc, #4]	; (800189c <__malloc_unlock+0x8>)
 8001896:	f7ff bb0e 	b.w	8000eb6 <__retarget_lock_release_recursive>
 800189a:	bf00      	nop
 800189c:	200000e4 	.word	0x200000e4

080018a0 <_read_r>:
 80018a0:	b538      	push	{r3, r4, r5, lr}
 80018a2:	4604      	mov	r4, r0
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	2200      	movs	r2, #0
 80018aa:	4d05      	ldr	r5, [pc, #20]	; (80018c0 <_read_r+0x20>)
 80018ac:	602a      	str	r2, [r5, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	f000 f828 	bl	8001904 <_read>
 80018b4:	1c43      	adds	r3, r0, #1
 80018b6:	d102      	bne.n	80018be <_read_r+0x1e>
 80018b8:	682b      	ldr	r3, [r5, #0]
 80018ba:	b103      	cbz	r3, 80018be <_read_r+0x1e>
 80018bc:	6023      	str	r3, [r4, #0]
 80018be:	bd38      	pop	{r3, r4, r5, pc}
 80018c0:	200000f0 	.word	0x200000f0

080018c4 <_close>:
 80018c4:	2258      	movs	r2, #88	; 0x58
 80018c6:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <_close+0xc>)
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	4770      	bx	lr
 80018d0:	200000f0 	.word	0x200000f0

080018d4 <_fstat>:
 80018d4:	2258      	movs	r2, #88	; 0x58
 80018d6:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <_fstat+0xc>)
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	4770      	bx	lr
 80018e0:	200000f0 	.word	0x200000f0

080018e4 <_isatty>:
 80018e4:	2258      	movs	r2, #88	; 0x58
 80018e6:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <_isatty+0xc>)
 80018e8:	2000      	movs	r0, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	200000f0 	.word	0x200000f0

080018f4 <_lseek>:
 80018f4:	2258      	movs	r2, #88	; 0x58
 80018f6:	4b02      	ldr	r3, [pc, #8]	; (8001900 <_lseek+0xc>)
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	4770      	bx	lr
 8001900:	200000f0 	.word	0x200000f0

08001904 <_read>:
 8001904:	2258      	movs	r2, #88	; 0x58
 8001906:	4b02      	ldr	r3, [pc, #8]	; (8001910 <_read+0xc>)
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	4770      	bx	lr
 8001910:	200000f0 	.word	0x200000f0

08001914 <_sbrk>:
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <_sbrk+0x14>)
 8001916:	4603      	mov	r3, r0
 8001918:	6811      	ldr	r1, [r2, #0]
 800191a:	b909      	cbnz	r1, 8001920 <_sbrk+0xc>
 800191c:	4903      	ldr	r1, [pc, #12]	; (800192c <_sbrk+0x18>)
 800191e:	6011      	str	r1, [r2, #0]
 8001920:	6810      	ldr	r0, [r2, #0]
 8001922:	4403      	add	r3, r0
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4770      	bx	lr
 8001928:	200000f4 	.word	0x200000f4
 800192c:	200000f8 	.word	0x200000f8

08001930 <_write>:
 8001930:	2258      	movs	r2, #88	; 0x58
 8001932:	4b02      	ldr	r3, [pc, #8]	; (800193c <_write+0xc>)
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	4770      	bx	lr
 800193c:	200000f0 	.word	0x200000f0

08001940 <_init>:
 8001940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001942:	bf00      	nop
 8001944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001946:	bc08      	pop	{r3}
 8001948:	469e      	mov	lr, r3
 800194a:	4770      	bx	lr

0800194c <_fini>:
 800194c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194e:	bf00      	nop
 8001950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001952:	bc08      	pop	{r3}
 8001954:	469e      	mov	lr, r3
 8001956:	4770      	bx	lr
