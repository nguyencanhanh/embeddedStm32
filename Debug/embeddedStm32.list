
embeddedStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b88  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08001cb8  08001cb8  00011cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d94  08001d94  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001d94  08001d94  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d94  08001d94  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d94  08001d94  00011d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d98  08001d98  00011d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000068  08001e04  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08001e04  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000129a  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006a2  00000000  00000000  0002132b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  000219d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000170  00000000  00000000  00021b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000995  00000000  00000000  00021cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001eb3  00000000  00000000  0002268d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059108  00000000  00000000  00024540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007d648  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ef4  00000000  00000000  0007d698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  0007e58c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  0007e628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08001ca0 	.word	0x08001ca0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08001ca0 	.word	0x08001ca0

08000170 <GPIO_configureRCC>:
 *  Created on: Jun 5, 2023
 *      Author: nguye
 */
#include "GPIO_configure.h"

void GPIO_configureRCC(char* GPIOx){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	while(*GPIOx){
 8000178:	e020      	b.n	80001bc <GPIO_configureRCC+0x4c>
		if(*GPIOx == 'C') RCC->APB2ENR |= (1 << 4);
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	2b43      	cmp	r3, #67	; 0x43
 8000180:	d105      	bne.n	800018e <GPIO_configureRCC+0x1e>
 8000182:	4b13      	ldr	r3, [pc, #76]	; (80001d0 <GPIO_configureRCC+0x60>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a12      	ldr	r2, [pc, #72]	; (80001d0 <GPIO_configureRCC+0x60>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'B') RCC->APB2ENR |= (1 << 3);
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	2b42      	cmp	r3, #66	; 0x42
 8000194:	d105      	bne.n	80001a2 <GPIO_configureRCC+0x32>
 8000196:	4b0e      	ldr	r3, [pc, #56]	; (80001d0 <GPIO_configureRCC+0x60>)
 8000198:	699b      	ldr	r3, [r3, #24]
 800019a:	4a0d      	ldr	r2, [pc, #52]	; (80001d0 <GPIO_configureRCC+0x60>)
 800019c:	f043 0308 	orr.w	r3, r3, #8
 80001a0:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'A') RCC->APB2ENR |= (1 << 2);
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	2b41      	cmp	r3, #65	; 0x41
 80001a8:	d105      	bne.n	80001b6 <GPIO_configureRCC+0x46>
 80001aa:	4b09      	ldr	r3, [pc, #36]	; (80001d0 <GPIO_configureRCC+0x60>)
 80001ac:	699b      	ldr	r3, [r3, #24]
 80001ae:	4a08      	ldr	r2, [pc, #32]	; (80001d0 <GPIO_configureRCC+0x60>)
 80001b0:	f043 0304 	orr.w	r3, r3, #4
 80001b4:	6193      	str	r3, [r2, #24]
		GPIOx++;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	3301      	adds	r3, #1
 80001ba:	607b      	str	r3, [r7, #4]
	while(*GPIOx){
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d1da      	bne.n	800017a <GPIO_configureRCC+0xa>
	}
}
 80001c4:	bf00      	nop
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40021000 	.word	0x40021000

080001d4 <GPIO_configure>:
void GPIO_configure(GPIO_TypeDef*GPIOx, uint8_t Pin, uint8_t mode){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	70fb      	strb	r3, [r7, #3]
 80001e0:	4613      	mov	r3, r2
 80001e2:	70bb      	strb	r3, [r7, #2]
	if(Pin > 7){
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	2b07      	cmp	r3, #7
 80001e8:	d917      	bls.n	800021a <GPIO_configure+0x46>
		GPIOx->CRH &= ~(15<<(Pin * 4 - 32));
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	78fa      	ldrb	r2, [r7, #3]
 80001f0:	3a08      	subs	r2, #8
 80001f2:	0092      	lsls	r2, r2, #2
 80001f4:	210f      	movs	r1, #15
 80001f6:	fa01 f202 	lsl.w	r2, r1, r2
 80001fa:	43d2      	mvns	r2, r2
 80001fc:	401a      	ands	r2, r3
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |= mode << (Pin * 4 - 32);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	78b9      	ldrb	r1, [r7, #2]
 8000208:	78fa      	ldrb	r2, [r7, #3]
 800020a:	3a08      	subs	r2, #8
 800020c:	0092      	lsls	r2, r2, #2
 800020e:	fa01 f202 	lsl.w	r2, r1, r2
 8000212:	431a      	orrs	r2, r3
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	605a      	str	r2, [r3, #4]
	}else{
		GPIOx->CRL &= ~(15<<(Pin * 4));
		GPIOx->CRL |=mode << (Pin * 4);
	}
}
 8000218:	e014      	b.n	8000244 <GPIO_configure+0x70>
		GPIOx->CRL &= ~(15<<(Pin * 4));
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	78fa      	ldrb	r2, [r7, #3]
 8000220:	0092      	lsls	r2, r2, #2
 8000222:	210f      	movs	r1, #15
 8000224:	fa01 f202 	lsl.w	r2, r1, r2
 8000228:	43d2      	mvns	r2, r2
 800022a:	401a      	ands	r2, r3
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |=mode << (Pin * 4);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	78b9      	ldrb	r1, [r7, #2]
 8000236:	78fa      	ldrb	r2, [r7, #3]
 8000238:	0092      	lsls	r2, r2, #2
 800023a:	fa01 f202 	lsl.w	r2, r1, r2
 800023e:	431a      	orrs	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	601a      	str	r2, [r3, #0]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr

0800024e <GPIO_Init_Pin_Mode>:
	  else
		return 0;
}


void GPIO_Init_Pin_Mode(GPIO_TypeDef* GPIOx, ...) {
 800024e:	b40f      	push	{r0, r1, r2, r3}
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, GPIOx);
 8000256:	f107 0314 	add.w	r3, r7, #20
 800025a:	603b      	str	r3, [r7, #0]
	uint8_t Pin = (uint8_t)va_arg(args, int);
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	1d1a      	adds	r2, r3, #4
 8000260:	603a      	str	r2, [r7, #0]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	71fb      	strb	r3, [r7, #7]
	uint8_t Mode;
	while ((int)Pin != 255) {
 8000266:	e00f      	b.n	8000288 <GPIO_Init_Pin_Mode+0x3a>
		Mode = (uint8_t)va_arg(args, int);
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	1d1a      	adds	r2, r3, #4
 800026c:	603a      	str	r2, [r7, #0]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	71bb      	strb	r3, [r7, #6]
		GPIO_configure(GPIOx, Pin, Mode);
 8000272:	79ba      	ldrb	r2, [r7, #6]
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4619      	mov	r1, r3
 8000278:	6938      	ldr	r0, [r7, #16]
 800027a:	f7ff ffab 	bl	80001d4 <GPIO_configure>
		Pin = (uint8_t)va_arg(args, int);
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	1d1a      	adds	r2, r3, #4
 8000282:	603a      	str	r2, [r7, #0]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	71fb      	strb	r3, [r7, #7]
	while ((int)Pin != 255) {
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	2bff      	cmp	r3, #255	; 0xff
 800028c:	d1ec      	bne.n	8000268 <GPIO_Init_Pin_Mode+0x1a>
	}
	va_end(args);
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800029a:	b004      	add	sp, #16
 800029c:	4770      	bx	lr

0800029e <vQueueCreate>:
TCB_t user_task[MAX_TASK];
GTIME gTime[MAX_TASK];

// QUEUE

Queue* vQueueCreate(uint8_t size) {
 800029e:	b580      	push	{r7, lr}
 80002a0:	b084      	sub	sp, #16
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	4603      	mov	r3, r0
 80002a6:	71fb      	strb	r3, [r7, #7]
    Queue *queue = (Queue*)malloc(sizeof(Queue));
 80002a8:	2054      	movs	r0, #84	; 0x54
 80002aa:	f000 fc8b 	bl	8000bc4 <malloc>
 80002ae:	4603      	mov	r3, r0
 80002b0:	60fb      	str	r3, [r7, #12]

    if (queue != NULL) {
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d00f      	beq.n	80002d8 <vQueueCreate+0x3a>
        queue->front = 0;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	2200      	movs	r2, #0
 80002bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        queue->rear = 0;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	2200      	movs	r2, #0
 80002c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        queue->count = 0;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	2200      	movs	r2, #0
 80002cc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        queue->size = size;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	79fa      	ldrb	r2, [r7, #7]
 80002d4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    }
    return queue;
 80002d8:	68fb      	ldr	r3, [r7, #12]
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <vQueueSend>:
        queue->items[queue->front] = item;
        queue->count++;
    }
}

void vQueueSend(Queue *queue, void *data, uint8_t dataSize) {
 80002e2:	b580      	push	{r7, lr}
 80002e4:	b086      	sub	sp, #24
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	60f8      	str	r0, [r7, #12]
 80002ea:	60b9      	str	r1, [r7, #8]
 80002ec:	4613      	mov	r3, r2
 80002ee:	71fb      	strb	r3, [r7, #7]
	if (queue->count < queue->size) {
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d231      	bcs.n	8000364 <vQueueSend+0x82>
		QueueItem item;
		item.data = malloc(dataSize);
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fc5e 	bl	8000bc4 <malloc>
 8000308:	4603      	mov	r3, r0
 800030a:	613b      	str	r3, [r7, #16]
		memcpy(item.data, data, dataSize);
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	79fa      	ldrb	r2, [r7, #7]
 8000310:	68b9      	ldr	r1, [r7, #8]
 8000312:	4618      	mov	r0, r3
 8000314:	f000 fc66 	bl	8000be4 <memcpy>
		item.dataSize = dataSize;
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	753b      	strb	r3, [r7, #20]
		queue->items[queue->rear] = item;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	00db      	lsls	r3, r3, #3
 8000326:	4413      	add	r3, r2
 8000328:	f107 0210 	add.w	r2, r7, #16
 800032c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000330:	e883 0003 	stmia.w	r3, {r0, r1}
		queue->rear = (queue->rear + 1) % queue->size;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800033a:	3301      	adds	r3, #1
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 8000342:	fb93 f1f2 	sdiv	r1, r3, r2
 8000346:	fb01 f202 	mul.w	r2, r1, r2
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	b2da      	uxtb	r2, r3
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		queue->count++;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800035a:	3301      	adds	r3, #1
 800035c:	b2da      	uxtb	r2, r3
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	}
}
 8000364:	bf00      	nop
 8000366:	3718      	adds	r7, #24
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <vQueueReceive>:

void vQueueReceive(Queue *queue, void *outputData) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
    if (queue->count > 0) {
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800037c:	2b00      	cmp	r3, #0
 800037e:	d02d      	beq.n	80003dc <vQueueReceive+0x70>
        QueueItem item = queue->items[queue->front];
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000386:	6879      	ldr	r1, [r7, #4]
 8000388:	f107 0208 	add.w	r2, r7, #8
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	440b      	add	r3, r1
 8000390:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000394:	e882 0003 	stmia.w	r2, {r0, r1}
        memcpy(outputData, item.data, item.dataSize);
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	7b3a      	ldrb	r2, [r7, #12]
 800039c:	4619      	mov	r1, r3
 800039e:	6838      	ldr	r0, [r7, #0]
 80003a0:	f000 fc20 	bl	8000be4 <memcpy>

        free(item.data);
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fc14 	bl	8000bd4 <free>

        queue->front = (queue->front + 1) % queue->size;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80003b2:	3301      	adds	r3, #1
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 80003ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80003be:	fb01 f202 	mul.w	r2, r1, r2
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        queue->count--;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80003d2:	3b01      	subs	r3, #1
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    }
}
 80003dc:	bf00      	nop
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <createTask>:

void createTask(void (*myTask)(void)){
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  user_task[numberTask+1].task_handler = myTask;
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <createTask+0x3c>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	3301      	adds	r3, #1
 80003f2:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <createTask+0x40>)
 80003f4:	011b      	lsls	r3, r3, #4
 80003f6:	4413      	add	r3, r2
 80003f8:	330c      	adds	r3, #12
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	601a      	str	r2, [r3, #0]
  numberTask++;
 80003fe:	4b08      	ldr	r3, [pc, #32]	; (8000420 <createTask+0x3c>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	3301      	adds	r3, #1
 8000404:	b2da      	uxtb	r2, r3
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <createTask+0x3c>)
 8000408:	701a      	strb	r2, [r3, #0]
  maxTask = numberTask+1;
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <createTask+0x3c>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	3301      	adds	r3, #1
 8000410:	b2da      	uxtb	r2, r3
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <createTask+0x44>)
 8000414:	701a      	strb	r2, [r3, #0]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	20000084 	.word	0x20000084
 8000424:	20000088 	.word	0x20000088
 8000428:	20000085 	.word	0x20000085

0800042c <init_systick_timer>:

void init_systick_timer(uint32_t tick_hz){
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	SysTick->LOAD |= ((SYSTICK_TIM_CLK / TICK_HZ) - 1) & 0x00FFFFFF;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <init_systick_timer+0x30>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	4a08      	ldr	r2, [pc, #32]	; (800045c <init_systick_timer+0x30>)
 800043a:	f443 53f9 	orr.w	r3, r3, #7968	; 0x1f20
 800043e:	f043 031f 	orr.w	r3, r3, #31
 8000442:	6053      	str	r3, [r2, #4]
	SysTick->CTRL |= (7 << 0);
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <init_systick_timer+0x30>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <init_systick_timer+0x30>)
 800044a:	f043 0307 	orr.w	r3, r3, #7
 800044e:	6013      	str	r3, [r2, #0]
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	e000e010 	.word	0xe000e010

08000460 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack){
 8000460:	4603      	mov	r3, r0
	__asm volatile ("MSR MSP, %0": : "r"(sched_top_of_stack));
 8000462:	f383 8808 	msr	MSP, r3
	__asm volatile ("BX LR");
 8000466:	4770      	bx	lr
}
 8000468:	bf00      	nop
	...

0800046c <init_task_stack>:

void init_task_stack(void(*idleTask)(void)){
 800046c:	b480      	push	{r7}
 800046e:	b087      	sub	sp, #28
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	user_task[0].psp_value = (SRAM_END - (numberTask * SIZE_TASK_STACK));
 8000474:	4b3a      	ldr	r3, [pc, #232]	; (8000560 <init_task_stack+0xf4>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	025b      	lsls	r3, r3, #9
 800047a:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 800047e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8000482:	4a38      	ldr	r2, [pc, #224]	; (8000564 <init_task_stack+0xf8>)
 8000484:	6013      	str	r3, [r2, #0]
	user_task[0].task_handler = idleTask;
 8000486:	4a37      	ldr	r2, [pc, #220]	; (8000564 <init_task_stack+0xf8>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	60d3      	str	r3, [r2, #12]

	uint32_t *pPSP;
	for(int i = 0; i < maxTask; i++){
 800048c:	2300      	movs	r3, #0
 800048e:	613b      	str	r3, [r7, #16]
 8000490:	e059      	b.n	8000546 <init_task_stack+0xda>
		user_task[i].curent_state = TASK_RUNNING_STATE;
 8000492:	4a34      	ldr	r2, [pc, #208]	; (8000564 <init_task_stack+0xf8>)
 8000494:	693b      	ldr	r3, [r7, #16]
 8000496:	011b      	lsls	r3, r3, #4
 8000498:	4413      	add	r3, r2
 800049a:	3308      	adds	r3, #8
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
		gTime[i].suspenTask = RESUME_TASK;
 80004a0:	4a31      	ldr	r2, [pc, #196]	; (8000568 <init_task_stack+0xfc>)
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	00db      	lsls	r3, r3, #3
 80004a6:	4413      	add	r3, r2
 80004a8:	2201      	movs	r2, #1
 80004aa:	715a      	strb	r2, [r3, #5]
		if(i < numberTask){
 80004ac:	4b2c      	ldr	r3, [pc, #176]	; (8000560 <init_task_stack+0xf4>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	461a      	mov	r2, r3
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	4293      	cmp	r3, r2
 80004b6:	da0c      	bge.n	80004d2 <init_task_stack+0x66>
			user_task[i+1].psp_value = (SRAM_END - (i * SIZE_TASK_STACK));
 80004b8:	693b      	ldr	r3, [r7, #16]
 80004ba:	025b      	lsls	r3, r3, #9
 80004bc:	4619      	mov	r1, r3
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	1c5a      	adds	r2, r3, #1
 80004c2:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
 80004c6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80004ca:	4926      	ldr	r1, [pc, #152]	; (8000564 <init_task_stack+0xf8>)
 80004cc:	0112      	lsls	r2, r2, #4
 80004ce:	440a      	add	r2, r1
 80004d0:	6013      	str	r3, [r2, #0]
		}
		pPSP = (uint32_t*) user_task[i].psp_value;
 80004d2:	4a24      	ldr	r2, [pc, #144]	; (8000564 <init_task_stack+0xf8>)
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	011b      	lsls	r3, r3, #4
 80004d8:	4413      	add	r3, r2
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	617b      	str	r3, [r7, #20]
		pPSP--;
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	3b04      	subs	r3, #4
 80004e2:	617b      	str	r3, [r7, #20]
		*pPSP = DUMMY_XPSR;
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004ea:	601a      	str	r2, [r3, #0]
		pPSP--;
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	3b04      	subs	r3, #4
 80004f0:	617b      	str	r3, [r7, #20]
		*pPSP = (uint32_t) user_task[i].task_handler;
 80004f2:	4a1c      	ldr	r2, [pc, #112]	; (8000564 <init_task_stack+0xf8>)
 80004f4:	693b      	ldr	r3, [r7, #16]
 80004f6:	011b      	lsls	r3, r3, #4
 80004f8:	4413      	add	r3, r2
 80004fa:	330c      	adds	r3, #12
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	461a      	mov	r2, r3
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	601a      	str	r2, [r3, #0]
		pPSP--;
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	3b04      	subs	r3, #4
 8000508:	617b      	str	r3, [r7, #20]
		*pPSP |= 0xFFFFFFFD;
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f063 0202 	orn	r2, r3, #2
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	601a      	str	r2, [r3, #0]
		for (int j = 0; j<13; j++){
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	e008      	b.n	800052e <init_task_stack+0xc2>
			pPSP--;
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	3b04      	subs	r3, #4
 8000520:	617b      	str	r3, [r7, #20]
			*pPSP = 0;
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
		for (int j = 0; j<13; j++){
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	3301      	adds	r3, #1
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2b0c      	cmp	r3, #12
 8000532:	ddf3      	ble.n	800051c <init_task_stack+0xb0>

		}
		user_task[i].psp_value = (uint32_t)pPSP;
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	490b      	ldr	r1, [pc, #44]	; (8000564 <init_task_stack+0xf8>)
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	440b      	add	r3, r1
 800053e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < maxTask; i++){
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	3301      	adds	r3, #1
 8000544:	613b      	str	r3, [r7, #16]
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <init_task_stack+0x100>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	461a      	mov	r2, r3
 800054c:	693b      	ldr	r3, [r7, #16]
 800054e:	4293      	cmp	r3, r2
 8000550:	db9f      	blt.n	8000492 <init_task_stack+0x26>
	}
}
 8000552:	bf00      	nop
 8000554:	bf00      	nop
 8000556:	371c      	adds	r7, #28
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000084 	.word	0x20000084
 8000564:	20000088 	.word	0x20000088
 8000568:	20000108 	.word	0x20000108
 800056c:	20000085 	.word	0x20000085

08000570 <enable_rpocessor_faults>:
void enable_rpocessor_faults(void){
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	SCB->SHCSR |= (7 << 16);
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <enable_rpocessor_faults+0x18>)
 8000576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <enable_rpocessor_faults+0x18>)
 800057a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800057e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <get_psp_value>:

uint32_t get_psp_value(void){
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	return user_task[curent_task].psp_value;
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <get_psp_value+0x18>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <get_psp_value+0x1c>)
 8000596:	011b      	lsls	r3, r3, #4
 8000598:	4413      	add	r3, r2
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000088 	.word	0x20000088

080005ac <save_psp_value>:

void save_psp_value(uint32_t curent_psp_value){
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	user_task[curent_task].psp_value = curent_psp_value;
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <save_psp_value+0x20>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4a05      	ldr	r2, [pc, #20]	; (80005d0 <save_psp_value+0x24>)
 80005ba:	011b      	lsls	r3, r3, #4
 80005bc:	4413      	add	r3, r2
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	601a      	str	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20000088 	.word	0x20000088

080005d4 <update_next_task>:

void update_next_task(void){
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
	int state = TASK_BLOCK_STATE;
 80005da:	2301      	movs	r3, #1
 80005dc:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < maxTask; i++){
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	e023      	b.n	800062c <update_next_task+0x58>
		curent_task ++;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <update_next_task+0x80>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <update_next_task+0x80>)
 80005ee:	701a      	strb	r2, [r3, #0]
		curent_task %= maxTask;
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <update_next_task+0x80>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4a18      	ldr	r2, [pc, #96]	; (8000658 <update_next_task+0x84>)
 80005f6:	7812      	ldrb	r2, [r2, #0]
 80005f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80005fc:	fb01 f202 	mul.w	r2, r1, r2
 8000600:	1a9b      	subs	r3, r3, r2
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <update_next_task+0x80>)
 8000606:	701a      	strb	r2, [r3, #0]
		state = user_task[curent_task].curent_state;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <update_next_task+0x80>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4a13      	ldr	r2, [pc, #76]	; (800065c <update_next_task+0x88>)
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	4413      	add	r3, r2
 8000612:	3308      	adds	r3, #8
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	607b      	str	r3, [r7, #4]
		if((state == TASK_RUNNING_STATE) && (curent_task != 0))
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d103      	bne.n	8000626 <update_next_task+0x52>
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <update_next_task+0x80>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d109      	bne.n	800063a <update_next_task+0x66>
	for (int i = 0; i < maxTask; i++){
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <update_next_task+0x84>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	4293      	cmp	r3, r2
 8000636:	dbd5      	blt.n	80005e4 <update_next_task+0x10>
 8000638:	e000      	b.n	800063c <update_next_task+0x68>
			break;
 800063a:	bf00      	nop
	}
	if (state != TASK_RUNNING_STATE)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <update_next_task+0x74>
		curent_task = 0;
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <update_next_task+0x80>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000
 8000658:	20000085 	.word	0x20000085
 800065c:	20000088 	.word	0x20000088

08000660 <swich_sp_to_psp>:

__attribute__((naked)) void swich_sp_to_psp(void){
	__asm volatile ("PUSH {LR}");
 8000660:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 8000662:	f7ff ff93 	bl	800058c <get_psp_value>
	__asm volatile ("MSR PSP, R0");
 8000666:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");
 800066a:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile ("MOV R0, #0x02");
 800066e:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 8000672:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 8000676:	4770      	bx	lr

}
 8000678:	bf00      	nop
	...

0800067c <task_delay>:


void task_delay(uint32_t tick_count){
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	DISABLE_IRQ();
 8000684:	f04f 0001 	mov.w	r0, #1
 8000688:	f380 8810 	msr	PRIMASK, r0
	gTime[curent_task].g_tick_count = 0;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <task_delay+0x74>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <task_delay+0x78>)
 8000694:	2200      	movs	r2, #0
 8000696:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
	gTime[curent_task].stateDelay = IN_DELAY;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <task_delay+0x74>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <task_delay+0x78>)
 80006a0:	00db      	lsls	r3, r3, #3
 80006a2:	4413      	add	r3, r2
 80006a4:	2201      	movs	r2, #1
 80006a6:	711a      	strb	r2, [r3, #4]
	if(curent_task){
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <task_delay+0x74>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d015      	beq.n	80006dc <task_delay+0x60>
		user_task[curent_task].block_count = tick_count;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <task_delay+0x74>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <task_delay+0x7c>)
 80006b6:	011b      	lsls	r3, r3, #4
 80006b8:	4413      	add	r3, r2
 80006ba:	3304      	adds	r3, #4
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	601a      	str	r2, [r3, #0]
		user_task[curent_task].curent_state = TASK_BLOCK_STATE;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <task_delay+0x74>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <task_delay+0x7c>)
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	4413      	add	r3, r2
 80006ca:	3308      	adds	r3, #8
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <task_delay+0x80>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	4a09      	ldr	r2, [pc, #36]	; (80006fc <task_delay+0x80>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006da:	6053      	str	r3, [r2, #4]
	}
	ENABLE_IRQ();
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	f380 8810 	msr	PRIMASK, r0
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000108 	.word	0x20000108
 80006f8:	20000088 	.word	0x20000088
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <unblock_task>:

void unblock_task(void){
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
	for (int i = 1; i < maxTask; i++){
 8000706:	2301      	movs	r3, #1
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	e02a      	b.n	8000762 <unblock_task+0x62>
		if (user_task[i].curent_state != TASK_RUNNING_STATE){
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <unblock_task+0x7c>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	011b      	lsls	r3, r3, #4
 8000712:	4413      	add	r3, r2
 8000714:	3308      	adds	r3, #8
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d01f      	beq.n	800075c <unblock_task+0x5c>
			if((user_task[i].block_count <= gTime[i].g_tick_count) && (gTime[i].suspenTask != SUSPEN_TASK)){
 800071c:	4a17      	ldr	r2, [pc, #92]	; (800077c <unblock_task+0x7c>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	011b      	lsls	r3, r3, #4
 8000722:	4413      	add	r3, r2
 8000724:	3304      	adds	r3, #4
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4915      	ldr	r1, [pc, #84]	; (8000780 <unblock_task+0x80>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8000730:	429a      	cmp	r2, r3
 8000732:	d813      	bhi.n	800075c <unblock_task+0x5c>
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <unblock_task+0x80>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	4413      	add	r3, r2
 800073c:	795b      	ldrb	r3, [r3, #5]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00c      	beq.n	800075c <unblock_task+0x5c>
				user_task[i].curent_state = TASK_RUNNING_STATE;
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <unblock_task+0x7c>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	011b      	lsls	r3, r3, #4
 8000748:	4413      	add	r3, r2
 800074a:	3308      	adds	r3, #8
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
				gTime[i].stateDelay = OUT_DELAY;
 8000750:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <unblock_task+0x80>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	4413      	add	r3, r2
 8000758:	2200      	movs	r2, #0
 800075a:	711a      	strb	r2, [r3, #4]
	for (int i = 1; i < maxTask; i++){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3301      	adds	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <unblock_task+0x84>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4293      	cmp	r3, r2
 800076c:	dbce      	blt.n	800070c <unblock_task+0xc>
			}
		}
	}
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000088 	.word	0x20000088
 8000780:	20000108 	.word	0x20000108
 8000784:	20000085 	.word	0x20000085

08000788 <rtosInit>:

void rtosInit(void (*idleTask)(void)){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	enable_rpocessor_faults();
 8000790:	f7ff feee 	bl	8000570 <enable_rpocessor_faults>
	init_scheduler_stack((SRAM_END - ((numberTask+1) * SIZE_TASK_STACK)));
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <rtosInit+0x44>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	025b      	lsls	r3, r3, #9
 800079c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 80007a0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fe5b 	bl	8000460 <init_scheduler_stack>
	init_task_stack(idleTask);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fe5e 	bl	800046c <init_task_stack>
	init_systick_timer(TICK_HZ);
 80007b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b4:	f7ff fe3a 	bl	800042c <init_systick_timer>
	swich_sp_to_psp();
 80007b8:	f7ff ff52 	bl	8000660 <swich_sp_to_psp>
	user_task[1].task_handler();
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <rtosInit+0x48>)
 80007be:	69db      	ldr	r3, [r3, #28]
 80007c0:	4798      	blx	r3
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000084 	.word	0x20000084
 80007d0:	20000088 	.word	0x20000088

080007d4 <suspenTask>:


void suspenTask(void (*task)(void)){
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	for (int i = 1; i < numberTask + 1; i++){
 80007dc:	2301      	movs	r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	e019      	b.n	8000816 <suspenTask+0x42>
		if (user_task[i].task_handler == task){
 80007e2:	4a13      	ldr	r2, [pc, #76]	; (8000830 <suspenTask+0x5c>)
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	4413      	add	r3, r2
 80007ea:	330c      	adds	r3, #12
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d10d      	bne.n	8000810 <suspenTask+0x3c>
			user_task[i].curent_state = TASK_BLOCK_STATE;
 80007f4:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <suspenTask+0x5c>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	4413      	add	r3, r2
 80007fc:	3308      	adds	r3, #8
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
			gTime[i].suspenTask = SUSPEN_TASK;
 8000802:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <suspenTask+0x60>)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	4413      	add	r3, r2
 800080a:	2200      	movs	r2, #0
 800080c:	715a      	strb	r2, [r3, #5]
			break;
 800080e:	e009      	b.n	8000824 <suspenTask+0x50>
	for (int i = 1; i < numberTask + 1; i++){
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	3301      	adds	r3, #1
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <suspenTask+0x64>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4293      	cmp	r3, r2
 8000820:	dddf      	ble.n	80007e2 <suspenTask+0xe>
		}
	}
}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000088 	.word	0x20000088
 8000834:	20000108 	.word	0x20000108
 8000838:	20000084 	.word	0x20000084

0800083c <resumeTask>:

void resumeTask(void (*task)(void)){
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	for (int i = 1; i < numberTask + 1; i++){
 8000844:	2301      	movs	r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	e019      	b.n	800087e <resumeTask+0x42>
		if (user_task[i].task_handler == task){
 800084a:	4a13      	ldr	r2, [pc, #76]	; (8000898 <resumeTask+0x5c>)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	4413      	add	r3, r2
 8000852:	330c      	adds	r3, #12
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	429a      	cmp	r2, r3
 800085a:	d10d      	bne.n	8000878 <resumeTask+0x3c>
			user_task[i].curent_state = TASK_RUNNING_STATE;
 800085c:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <resumeTask+0x5c>)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	011b      	lsls	r3, r3, #4
 8000862:	4413      	add	r3, r2
 8000864:	3308      	adds	r3, #8
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
			gTime[i].suspenTask = RESUME_TASK;
 800086a:	4a0c      	ldr	r2, [pc, #48]	; (800089c <resumeTask+0x60>)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	4413      	add	r3, r2
 8000872:	2201      	movs	r2, #1
 8000874:	715a      	strb	r2, [r3, #5]
			break;
 8000876:	e009      	b.n	800088c <resumeTask+0x50>
	for (int i = 1; i < numberTask + 1; i++){
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	3301      	adds	r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <resumeTask+0x64>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4293      	cmp	r3, r2
 8000888:	dddf      	ble.n	800084a <resumeTask+0xe>
		}
	}
}
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000088 	.word	0x20000088
 800089c:	20000108 	.word	0x20000108
 80008a0:	20000084 	.word	0x20000084

080008a4 <HardFault_Handler>:
//
void HardFault_Handler(void){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	printf("HardFault_Handler\n");
 80008a8:	4801      	ldr	r0, [pc, #4]	; (80008b0 <HardFault_Handler+0xc>)
 80008aa:	f000 fb13 	bl	8000ed4 <puts>
	while(1);
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0xa>
 80008b0:	08001cb8 	.word	0x08001cb8

080008b4 <MemManage_Handler>:
}

void MemManage_Handler(){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	printf("MemManage_Handler\n");
 80008b8:	4801      	ldr	r0, [pc, #4]	; (80008c0 <MemManage_Handler+0xc>)
 80008ba:	f000 fb0b 	bl	8000ed4 <puts>
	while(1);
 80008be:	e7fe      	b.n	80008be <MemManage_Handler+0xa>
 80008c0:	08001ccc 	.word	0x08001ccc

080008c4 <BusFault_Handler>:
}

void BusFault_Handler(){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	printf("BusFault_Handler\n");
 80008c8:	4801      	ldr	r0, [pc, #4]	; (80008d0 <BusFault_Handler+0xc>)
 80008ca:	f000 fb03 	bl	8000ed4 <puts>
	while(1);
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0xa>
 80008d0:	08001ce0 	.word	0x08001ce0

080008d4 <PendSV_Handler>:
}

__attribute__((naked)) void PendSV_Handler(void){
    // Save the current task's context
    __asm volatile ("MRS R0, PSP");
 80008d4:	f3ef 8009 	mrs	r0, PSP
    __asm volatile ("STMDB R0!, {R4-R11}");
 80008d8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    __asm volatile ("PUSH {LR}");
 80008dc:	b500      	push	{lr}
    __asm volatile ("BL save_psp_value");
 80008de:	f7ff fe65 	bl	80005ac <save_psp_value>
    __asm volatile ("BL update_next_task");
 80008e2:	f7ff fe77 	bl	80005d4 <update_next_task>

    // Load the next task's context
    __asm volatile ("BL get_psp_value");
 80008e6:	f7ff fe51 	bl	800058c <get_psp_value>
    __asm volatile ("LDMIA R0!, {R4-R11}");
 80008ea:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    __asm volatile ("MSR PSP, R0");
 80008ee:	f380 8809 	msr	PSP, r0
    __asm volatile ("POP {LR}");
 80008f2:	f85d eb04 	ldr.w	lr, [sp], #4
    __asm volatile ("BX LR");
 80008f6:	4770      	bx	lr
}
 80008f8:	bf00      	nop
	...

080008fc <SysTick_Handler>:
//
void SysTick_Handler(){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
	for (int i = 1; i < maxTask; i++){
 8000902:	2301      	movs	r3, #1
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	e012      	b.n	800092e <SysTick_Handler+0x32>
		if(gTime[i].stateDelay != OUT_DELAY)
 8000908:	4a12      	ldr	r2, [pc, #72]	; (8000954 <SysTick_Handler+0x58>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	4413      	add	r3, r2
 8000910:	791b      	ldrb	r3, [r3, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d008      	beq.n	8000928 <SysTick_Handler+0x2c>
			gTime[i].g_tick_count++;
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <SysTick_Handler+0x58>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	490c      	ldr	r1, [pc, #48]	; (8000954 <SysTick_Handler+0x58>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	for (int i = 1; i < maxTask; i++){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3301      	adds	r3, #1
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <SysTick_Handler+0x5c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4293      	cmp	r3, r2
 8000938:	dbe6      	blt.n	8000908 <SysTick_Handler+0xc>
	}
	unblock_task();
 800093a:	f7ff fee1 	bl	8000700 <unblock_task>
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <SysTick_Handler+0x60>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	4a06      	ldr	r2, [pc, #24]	; (800095c <SysTick_Handler+0x60>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6053      	str	r3, [r2, #4]
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000108 	.word	0x20000108
 8000958:	20000085 	.word	0x20000085
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <main>:
MyData receivedData;
uint8_t recive;


int main(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af02      	add	r7, sp, #8
	GPIO_configureRCC("B");
 8000966:	4810      	ldr	r0, [pc, #64]	; (80009a8 <main+0x48>)
 8000968:	f7ff fc02 	bl	8000170 <GPIO_configureRCC>
	BeginGPIO((GPIO_TypeDef*)GPIOB, 12, 1, 11, 1);
 800096c:	23ff      	movs	r3, #255	; 0xff
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	2301      	movs	r3, #1
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	230b      	movs	r3, #11
 8000976:	2201      	movs	r2, #1
 8000978:	210c      	movs	r1, #12
 800097a:	480c      	ldr	r0, [pc, #48]	; (80009ac <main+0x4c>)
 800097c:	f7ff fc67 	bl	800024e <GPIO_Init_Pin_Mode>

	createTask(task1_handler);
 8000980:	480b      	ldr	r0, [pc, #44]	; (80009b0 <main+0x50>)
 8000982:	f7ff fd2f 	bl	80003e4 <createTask>
	createTask(task2_handler);
 8000986:	480b      	ldr	r0, [pc, #44]	; (80009b4 <main+0x54>)
 8000988:	f7ff fd2c 	bl	80003e4 <createTask>
	createTask(task3_handler);
 800098c:	480a      	ldr	r0, [pc, #40]	; (80009b8 <main+0x58>)
 800098e:	f7ff fd29 	bl	80003e4 <createTask>
	createTask(task4_handler);
 8000992:	480a      	ldr	r0, [pc, #40]	; (80009bc <main+0x5c>)
 8000994:	f7ff fd26 	bl	80003e4 <createTask>
	createTask(task5_handler);
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <main+0x60>)
 800099a:	f7ff fd23 	bl	80003e4 <createTask>

	rtosInit(idle_task);
 800099e:	4809      	ldr	r0, [pc, #36]	; (80009c4 <main+0x64>)
 80009a0:	f7ff fef2 	bl	8000788 <rtosInit>
	 while (1)
 80009a4:	e7fe      	b.n	80009a4 <main+0x44>
 80009a6:	bf00      	nop
 80009a8:	08001cf4 	.word	0x08001cf4
 80009ac:	40010c00 	.word	0x40010c00
 80009b0:	080009d1 	.word	0x080009d1
 80009b4:	080009f9 	.word	0x080009f9
 80009b8:	08000a9d 	.word	0x08000a9d
 80009bc:	08000aad 	.word	0x08000aad
 80009c0:	08000ae9 	.word	0x08000ae9
 80009c4:	080009c9 	.word	0x080009c9

080009c8 <idle_task>:
	  {
	  }
}

void idle_task(void){
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	while(1);
 80009cc:	e7fe      	b.n	80009cc <idle_task+0x4>
	...

080009d0 <task1_handler>:
}

void task1_handler(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	while(1){
		GPIOB_TOGGLE(12);
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <task1_handler+0x20>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <task1_handler+0x20>)
 80009da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80009de:	60d3      	str	r3, [r2, #12]
		task_delay(1000);
 80009e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e4:	f7ff fe4a 	bl	800067c <task_delay>
		printf("oke");
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <task1_handler+0x24>)
 80009ea:	f000 f9ed 	bl	8000dc8 <iprintf>
		GPIOB_TOGGLE(12);
 80009ee:	e7f1      	b.n	80009d4 <task1_handler+0x4>
 80009f0:	40010c00 	.word	0x40010c00
 80009f4:	08001cf8 	.word	0x08001cf8

080009f8 <task2_handler>:
	}
}

void task2_handler(void){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	myQueue = vQueueCreate(5);
 80009fe:	2005      	movs	r0, #5
 8000a00:	f7ff fc4d 	bl	800029e <vQueueCreate>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <task2_handler+0x94>)
 8000a08:	6013      	str	r3, [r2, #0]
	MyData myData;
	myData.intValue = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
	while(1){
		if(count % 20 == 10)
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <task2_handler+0x98>)
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <task2_handler+0x9c>)
 8000a14:	fba3 1302 	umull	r1, r3, r3, r2
 8000a18:	0919      	lsrs	r1, r3, #4
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	440b      	add	r3, r1
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b0a      	cmp	r3, #10
 8000a28:	d102      	bne.n	8000a30 <task2_handler+0x38>
			suspenTask(task1_handler);
 8000a2a:	481b      	ldr	r0, [pc, #108]	; (8000a98 <task2_handler+0xa0>)
 8000a2c:	f7ff fed2 	bl	80007d4 <suspenTask>
		if(count % 20 == 0)
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <task2_handler+0x98>)
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <task2_handler+0x9c>)
 8000a36:	fba3 1302 	umull	r1, r3, r3, r2
 8000a3a:	0919      	lsrs	r1, r3, #4
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	440b      	add	r3, r1
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <task2_handler+0x5a>
			resumeTask(task1_handler);
 8000a4c:	4812      	ldr	r0, [pc, #72]	; (8000a98 <task2_handler+0xa0>)
 8000a4e:	f7ff fef5 	bl	800083c <resumeTask>
		count++;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <task2_handler+0x98>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <task2_handler+0x98>)
 8000a5c:	701a      	strb	r2, [r3, #0]
		myData.intValue+=2;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3302      	adds	r3, #2
 8000a62:	607b      	str	r3, [r7, #4]
		vQueueSend(myQueue, &count, sizeof(uint8_t));
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <task2_handler+0x94>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4909      	ldr	r1, [pc, #36]	; (8000a90 <task2_handler+0x98>)
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fc38 	bl	80002e2 <vQueueSend>
		vQueueSend(myQueue, &myData, sizeof(MyData));
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <task2_handler+0x94>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	1d39      	adds	r1, r7, #4
 8000a78:	2204      	movs	r2, #4
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fc31 	bl	80002e2 <vQueueSend>
		task_delay(1000);
 8000a80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a84:	f7ff fdfa 	bl	800067c <task_delay>
		if(count % 20 == 10)
 8000a88:	e7c1      	b.n	8000a0e <task2_handler+0x16>
 8000a8a:	bf00      	nop
 8000a8c:	20000148 	.word	0x20000148
 8000a90:	20000001 	.word	0x20000001
 8000a94:	cccccccd 	.word	0xcccccccd
 8000a98:	080009d1 	.word	0x080009d1

08000a9c <task3_handler>:
	}
}

void task3_handler(void){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	while(1){
		printf("oke");
 8000aa0:	4801      	ldr	r0, [pc, #4]	; (8000aa8 <task3_handler+0xc>)
 8000aa2:	f000 f991 	bl	8000dc8 <iprintf>
 8000aa6:	e7fb      	b.n	8000aa0 <task3_handler+0x4>
 8000aa8:	08001cf8 	.word	0x08001cf8

08000aac <task4_handler>:
	}
}

void task4_handler(void){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	while(1){
		GPIOB_ON(11);
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <task4_handler+0x34>)
 8000ab2:	691b      	ldr	r3, [r3, #16]
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <task4_handler+0x34>)
 8000ab6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aba:	6113      	str	r3, [r2, #16]
		task_delay(1);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff fddd 	bl	800067c <task_delay>
		GPIOB_OFF(11);
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <task4_handler+0x34>)
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <task4_handler+0x34>)
 8000ac8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000acc:	6113      	str	r3, [r2, #16]
		task_delay(10000);
 8000ace:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ad2:	f7ff fdd3 	bl	800067c <task_delay>
		printf("oke");
 8000ad6:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <task4_handler+0x38>)
 8000ad8:	f000 f976 	bl	8000dc8 <iprintf>
		GPIOB_ON(11);
 8000adc:	e7e8      	b.n	8000ab0 <task4_handler+0x4>
 8000ade:	bf00      	nop
 8000ae0:	40010c00 	.word	0x40010c00
 8000ae4:	08001cf8 	.word	0x08001cf8

08000ae8 <task5_handler>:
	}
}

void task5_handler(void){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	while(1){
		vQueueReceive(myQueue, &recive);
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <task5_handler+0x28>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4908      	ldr	r1, [pc, #32]	; (8000b14 <task5_handler+0x2c>)
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fc3a 	bl	800036c <vQueueReceive>
		vQueueReceive(myQueue, &receivedData);
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <task5_handler+0x28>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4906      	ldr	r1, [pc, #24]	; (8000b18 <task5_handler+0x30>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fc34 	bl	800036c <vQueueReceive>
		task_delay(1000);
 8000b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b08:	f7ff fdb8 	bl	800067c <task_delay>
		vQueueReceive(myQueue, &recive);
 8000b0c:	e7ee      	b.n	8000aec <task5_handler+0x4>
 8000b0e:	bf00      	nop
 8000b10:	20000148 	.word	0x20000148
 8000b14:	20000150 	.word	0x20000150
 8000b18:	2000014c 	.word	0x2000014c

08000b1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b2c:	f7ff fff6 	bl	8000b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <LoopForever+0xe>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	; (8000b74 <LoopForever+0x16>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b56:	f000 f811 	bl	8000b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b5a:	f7ff ff01 	bl	8000960 <main>

08000b5e <LoopForever>:

LoopForever:
  b LoopForever
 8000b5e:	e7fe      	b.n	8000b5e <LoopForever>
  ldr   r0, =_estack
 8000b60:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b6c:	08001d9c 	.word	0x08001d9c
  ldr r2, =_sbss
 8000b70:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b74:	20000168 	.word	0x20000168

08000b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC1_2_IRQHandler>
	...

08000b7c <__libc_init_array>:
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	2600      	movs	r6, #0
 8000b80:	4d0c      	ldr	r5, [pc, #48]	; (8000bb4 <__libc_init_array+0x38>)
 8000b82:	4c0d      	ldr	r4, [pc, #52]	; (8000bb8 <__libc_init_array+0x3c>)
 8000b84:	1b64      	subs	r4, r4, r5
 8000b86:	10a4      	asrs	r4, r4, #2
 8000b88:	42a6      	cmp	r6, r4
 8000b8a:	d109      	bne.n	8000ba0 <__libc_init_array+0x24>
 8000b8c:	f001 f888 	bl	8001ca0 <_init>
 8000b90:	2600      	movs	r6, #0
 8000b92:	4d0a      	ldr	r5, [pc, #40]	; (8000bbc <__libc_init_array+0x40>)
 8000b94:	4c0a      	ldr	r4, [pc, #40]	; (8000bc0 <__libc_init_array+0x44>)
 8000b96:	1b64      	subs	r4, r4, r5
 8000b98:	10a4      	asrs	r4, r4, #2
 8000b9a:	42a6      	cmp	r6, r4
 8000b9c:	d105      	bne.n	8000baa <__libc_init_array+0x2e>
 8000b9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ba4:	4798      	blx	r3
 8000ba6:	3601      	adds	r6, #1
 8000ba8:	e7ee      	b.n	8000b88 <__libc_init_array+0xc>
 8000baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bae:	4798      	blx	r3
 8000bb0:	3601      	adds	r6, #1
 8000bb2:	e7f2      	b.n	8000b9a <__libc_init_array+0x1e>
 8000bb4:	08001d94 	.word	0x08001d94
 8000bb8:	08001d94 	.word	0x08001d94
 8000bbc:	08001d94 	.word	0x08001d94
 8000bc0:	08001d98 	.word	0x08001d98

08000bc4 <malloc>:
 8000bc4:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <malloc+0xc>)
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	6818      	ldr	r0, [r3, #0]
 8000bca:	f000 b889 	b.w	8000ce0 <_malloc_r>
 8000bce:	bf00      	nop
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <free>:
 8000bd4:	4b02      	ldr	r3, [pc, #8]	; (8000be0 <free+0xc>)
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	f000 b819 	b.w	8000c10 <_free_r>
 8000bde:	bf00      	nop
 8000be0:	20000004 	.word	0x20000004

08000be4 <memcpy>:
 8000be4:	440a      	add	r2, r1
 8000be6:	4291      	cmp	r1, r2
 8000be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bec:	d100      	bne.n	8000bf0 <memcpy+0xc>
 8000bee:	4770      	bx	lr
 8000bf0:	b510      	push	{r4, lr}
 8000bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000bf6:	4291      	cmp	r1, r2
 8000bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000bfc:	d1f9      	bne.n	8000bf2 <memcpy+0xe>
 8000bfe:	bd10      	pop	{r4, pc}

08000c00 <memset>:
 8000c00:	4603      	mov	r3, r0
 8000c02:	4402      	add	r2, r0
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d100      	bne.n	8000c0a <memset+0xa>
 8000c08:	4770      	bx	lr
 8000c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8000c0e:	e7f9      	b.n	8000c04 <memset+0x4>

08000c10 <_free_r>:
 8000c10:	b538      	push	{r3, r4, r5, lr}
 8000c12:	4605      	mov	r5, r0
 8000c14:	2900      	cmp	r1, #0
 8000c16:	d040      	beq.n	8000c9a <_free_r+0x8a>
 8000c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c1c:	1f0c      	subs	r4, r1, #4
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bfb8      	it	lt
 8000c22:	18e4      	addlt	r4, r4, r3
 8000c24:	f000 fc4a 	bl	80014bc <__malloc_lock>
 8000c28:	4a1c      	ldr	r2, [pc, #112]	; (8000c9c <_free_r+0x8c>)
 8000c2a:	6813      	ldr	r3, [r2, #0]
 8000c2c:	b933      	cbnz	r3, 8000c3c <_free_r+0x2c>
 8000c2e:	6063      	str	r3, [r4, #4]
 8000c30:	6014      	str	r4, [r2, #0]
 8000c32:	4628      	mov	r0, r5
 8000c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c38:	f000 bc46 	b.w	80014c8 <__malloc_unlock>
 8000c3c:	42a3      	cmp	r3, r4
 8000c3e:	d908      	bls.n	8000c52 <_free_r+0x42>
 8000c40:	6820      	ldr	r0, [r4, #0]
 8000c42:	1821      	adds	r1, r4, r0
 8000c44:	428b      	cmp	r3, r1
 8000c46:	bf01      	itttt	eq
 8000c48:	6819      	ldreq	r1, [r3, #0]
 8000c4a:	685b      	ldreq	r3, [r3, #4]
 8000c4c:	1809      	addeq	r1, r1, r0
 8000c4e:	6021      	streq	r1, [r4, #0]
 8000c50:	e7ed      	b.n	8000c2e <_free_r+0x1e>
 8000c52:	461a      	mov	r2, r3
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	b10b      	cbz	r3, 8000c5c <_free_r+0x4c>
 8000c58:	42a3      	cmp	r3, r4
 8000c5a:	d9fa      	bls.n	8000c52 <_free_r+0x42>
 8000c5c:	6811      	ldr	r1, [r2, #0]
 8000c5e:	1850      	adds	r0, r2, r1
 8000c60:	42a0      	cmp	r0, r4
 8000c62:	d10b      	bne.n	8000c7c <_free_r+0x6c>
 8000c64:	6820      	ldr	r0, [r4, #0]
 8000c66:	4401      	add	r1, r0
 8000c68:	1850      	adds	r0, r2, r1
 8000c6a:	4283      	cmp	r3, r0
 8000c6c:	6011      	str	r1, [r2, #0]
 8000c6e:	d1e0      	bne.n	8000c32 <_free_r+0x22>
 8000c70:	6818      	ldr	r0, [r3, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	4401      	add	r1, r0
 8000c76:	6011      	str	r1, [r2, #0]
 8000c78:	6053      	str	r3, [r2, #4]
 8000c7a:	e7da      	b.n	8000c32 <_free_r+0x22>
 8000c7c:	d902      	bls.n	8000c84 <_free_r+0x74>
 8000c7e:	230c      	movs	r3, #12
 8000c80:	602b      	str	r3, [r5, #0]
 8000c82:	e7d6      	b.n	8000c32 <_free_r+0x22>
 8000c84:	6820      	ldr	r0, [r4, #0]
 8000c86:	1821      	adds	r1, r4, r0
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	bf01      	itttt	eq
 8000c8c:	6819      	ldreq	r1, [r3, #0]
 8000c8e:	685b      	ldreq	r3, [r3, #4]
 8000c90:	1809      	addeq	r1, r1, r0
 8000c92:	6021      	streq	r1, [r4, #0]
 8000c94:	6063      	str	r3, [r4, #4]
 8000c96:	6054      	str	r4, [r2, #4]
 8000c98:	e7cb      	b.n	8000c32 <_free_r+0x22>
 8000c9a:	bd38      	pop	{r3, r4, r5, pc}
 8000c9c:	20000154 	.word	0x20000154

08000ca0 <sbrk_aligned>:
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	4e0e      	ldr	r6, [pc, #56]	; (8000cdc <sbrk_aligned+0x3c>)
 8000ca4:	460c      	mov	r4, r1
 8000ca6:	6831      	ldr	r1, [r6, #0]
 8000ca8:	4605      	mov	r5, r0
 8000caa:	b911      	cbnz	r1, 8000cb2 <sbrk_aligned+0x12>
 8000cac:	f000 f91a 	bl	8000ee4 <_sbrk_r>
 8000cb0:	6030      	str	r0, [r6, #0]
 8000cb2:	4621      	mov	r1, r4
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	f000 f915 	bl	8000ee4 <_sbrk_r>
 8000cba:	1c43      	adds	r3, r0, #1
 8000cbc:	d00a      	beq.n	8000cd4 <sbrk_aligned+0x34>
 8000cbe:	1cc4      	adds	r4, r0, #3
 8000cc0:	f024 0403 	bic.w	r4, r4, #3
 8000cc4:	42a0      	cmp	r0, r4
 8000cc6:	d007      	beq.n	8000cd8 <sbrk_aligned+0x38>
 8000cc8:	1a21      	subs	r1, r4, r0
 8000cca:	4628      	mov	r0, r5
 8000ccc:	f000 f90a 	bl	8000ee4 <_sbrk_r>
 8000cd0:	3001      	adds	r0, #1
 8000cd2:	d101      	bne.n	8000cd8 <sbrk_aligned+0x38>
 8000cd4:	f04f 34ff 	mov.w	r4, #4294967295
 8000cd8:	4620      	mov	r0, r4
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	20000158 	.word	0x20000158

08000ce0 <_malloc_r>:
 8000ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce4:	1ccd      	adds	r5, r1, #3
 8000ce6:	f025 0503 	bic.w	r5, r5, #3
 8000cea:	3508      	adds	r5, #8
 8000cec:	2d0c      	cmp	r5, #12
 8000cee:	bf38      	it	cc
 8000cf0:	250c      	movcc	r5, #12
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	4607      	mov	r7, r0
 8000cf6:	db01      	blt.n	8000cfc <_malloc_r+0x1c>
 8000cf8:	42a9      	cmp	r1, r5
 8000cfa:	d905      	bls.n	8000d08 <_malloc_r+0x28>
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	2600      	movs	r6, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	4630      	mov	r0, r6
 8000d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d08:	4e2e      	ldr	r6, [pc, #184]	; (8000dc4 <_malloc_r+0xe4>)
 8000d0a:	f000 fbd7 	bl	80014bc <__malloc_lock>
 8000d0e:	6833      	ldr	r3, [r6, #0]
 8000d10:	461c      	mov	r4, r3
 8000d12:	bb34      	cbnz	r4, 8000d62 <_malloc_r+0x82>
 8000d14:	4629      	mov	r1, r5
 8000d16:	4638      	mov	r0, r7
 8000d18:	f7ff ffc2 	bl	8000ca0 <sbrk_aligned>
 8000d1c:	1c43      	adds	r3, r0, #1
 8000d1e:	4604      	mov	r4, r0
 8000d20:	d14d      	bne.n	8000dbe <_malloc_r+0xde>
 8000d22:	6834      	ldr	r4, [r6, #0]
 8000d24:	4626      	mov	r6, r4
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d140      	bne.n	8000dac <_malloc_r+0xcc>
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	4638      	mov	r0, r7
 8000d30:	eb04 0803 	add.w	r8, r4, r3
 8000d34:	f000 f8d6 	bl	8000ee4 <_sbrk_r>
 8000d38:	4580      	cmp	r8, r0
 8000d3a:	d13a      	bne.n	8000db2 <_malloc_r+0xd2>
 8000d3c:	6821      	ldr	r1, [r4, #0]
 8000d3e:	3503      	adds	r5, #3
 8000d40:	1a6d      	subs	r5, r5, r1
 8000d42:	f025 0503 	bic.w	r5, r5, #3
 8000d46:	3508      	adds	r5, #8
 8000d48:	2d0c      	cmp	r5, #12
 8000d4a:	bf38      	it	cc
 8000d4c:	250c      	movcc	r5, #12
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4629      	mov	r1, r5
 8000d52:	f7ff ffa5 	bl	8000ca0 <sbrk_aligned>
 8000d56:	3001      	adds	r0, #1
 8000d58:	d02b      	beq.n	8000db2 <_malloc_r+0xd2>
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	442b      	add	r3, r5
 8000d5e:	6023      	str	r3, [r4, #0]
 8000d60:	e00e      	b.n	8000d80 <_malloc_r+0xa0>
 8000d62:	6822      	ldr	r2, [r4, #0]
 8000d64:	1b52      	subs	r2, r2, r5
 8000d66:	d41e      	bmi.n	8000da6 <_malloc_r+0xc6>
 8000d68:	2a0b      	cmp	r2, #11
 8000d6a:	d916      	bls.n	8000d9a <_malloc_r+0xba>
 8000d6c:	1961      	adds	r1, r4, r5
 8000d6e:	42a3      	cmp	r3, r4
 8000d70:	6025      	str	r5, [r4, #0]
 8000d72:	bf18      	it	ne
 8000d74:	6059      	strne	r1, [r3, #4]
 8000d76:	6863      	ldr	r3, [r4, #4]
 8000d78:	bf08      	it	eq
 8000d7a:	6031      	streq	r1, [r6, #0]
 8000d7c:	5162      	str	r2, [r4, r5]
 8000d7e:	604b      	str	r3, [r1, #4]
 8000d80:	4638      	mov	r0, r7
 8000d82:	f104 060b 	add.w	r6, r4, #11
 8000d86:	f000 fb9f 	bl	80014c8 <__malloc_unlock>
 8000d8a:	f026 0607 	bic.w	r6, r6, #7
 8000d8e:	1d23      	adds	r3, r4, #4
 8000d90:	1af2      	subs	r2, r6, r3
 8000d92:	d0b6      	beq.n	8000d02 <_malloc_r+0x22>
 8000d94:	1b9b      	subs	r3, r3, r6
 8000d96:	50a3      	str	r3, [r4, r2]
 8000d98:	e7b3      	b.n	8000d02 <_malloc_r+0x22>
 8000d9a:	6862      	ldr	r2, [r4, #4]
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	bf0c      	ite	eq
 8000da0:	6032      	streq	r2, [r6, #0]
 8000da2:	605a      	strne	r2, [r3, #4]
 8000da4:	e7ec      	b.n	8000d80 <_malloc_r+0xa0>
 8000da6:	4623      	mov	r3, r4
 8000da8:	6864      	ldr	r4, [r4, #4]
 8000daa:	e7b2      	b.n	8000d12 <_malloc_r+0x32>
 8000dac:	4634      	mov	r4, r6
 8000dae:	6876      	ldr	r6, [r6, #4]
 8000db0:	e7b9      	b.n	8000d26 <_malloc_r+0x46>
 8000db2:	230c      	movs	r3, #12
 8000db4:	4638      	mov	r0, r7
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	f000 fb86 	bl	80014c8 <__malloc_unlock>
 8000dbc:	e7a1      	b.n	8000d02 <_malloc_r+0x22>
 8000dbe:	6025      	str	r5, [r4, #0]
 8000dc0:	e7de      	b.n	8000d80 <_malloc_r+0xa0>
 8000dc2:	bf00      	nop
 8000dc4:	20000154 	.word	0x20000154

08000dc8 <iprintf>:
 8000dc8:	b40f      	push	{r0, r1, r2, r3}
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <iprintf+0x2c>)
 8000dcc:	b513      	push	{r0, r1, r4, lr}
 8000dce:	681c      	ldr	r4, [r3, #0]
 8000dd0:	b124      	cbz	r4, 8000ddc <iprintf+0x14>
 8000dd2:	69a3      	ldr	r3, [r4, #24]
 8000dd4:	b913      	cbnz	r3, 8000ddc <iprintf+0x14>
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	f000 fa6a 	bl	80012b0 <__sinit>
 8000ddc:	ab05      	add	r3, sp, #20
 8000dde:	4620      	mov	r0, r4
 8000de0:	9a04      	ldr	r2, [sp, #16]
 8000de2:	68a1      	ldr	r1, [r4, #8]
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	f000 fb9d 	bl	8001524 <_vfiprintf_r>
 8000dea:	b002      	add	sp, #8
 8000dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000df0:	b004      	add	sp, #16
 8000df2:	4770      	bx	lr
 8000df4:	20000004 	.word	0x20000004

08000df8 <_puts_r>:
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	460e      	mov	r6, r1
 8000dfc:	4605      	mov	r5, r0
 8000dfe:	b118      	cbz	r0, 8000e08 <_puts_r+0x10>
 8000e00:	6983      	ldr	r3, [r0, #24]
 8000e02:	b90b      	cbnz	r3, 8000e08 <_puts_r+0x10>
 8000e04:	f000 fa54 	bl	80012b0 <__sinit>
 8000e08:	69ab      	ldr	r3, [r5, #24]
 8000e0a:	68ac      	ldr	r4, [r5, #8]
 8000e0c:	b913      	cbnz	r3, 8000e14 <_puts_r+0x1c>
 8000e0e:	4628      	mov	r0, r5
 8000e10:	f000 fa4e 	bl	80012b0 <__sinit>
 8000e14:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <_puts_r+0xd0>)
 8000e16:	429c      	cmp	r4, r3
 8000e18:	d120      	bne.n	8000e5c <_puts_r+0x64>
 8000e1a:	686c      	ldr	r4, [r5, #4]
 8000e1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e1e:	07db      	lsls	r3, r3, #31
 8000e20:	d405      	bmi.n	8000e2e <_puts_r+0x36>
 8000e22:	89a3      	ldrh	r3, [r4, #12]
 8000e24:	0598      	lsls	r0, r3, #22
 8000e26:	d402      	bmi.n	8000e2e <_puts_r+0x36>
 8000e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e2a:	f000 fadf 	bl	80013ec <__retarget_lock_acquire_recursive>
 8000e2e:	89a3      	ldrh	r3, [r4, #12]
 8000e30:	0719      	lsls	r1, r3, #28
 8000e32:	d51d      	bpl.n	8000e70 <_puts_r+0x78>
 8000e34:	6923      	ldr	r3, [r4, #16]
 8000e36:	b1db      	cbz	r3, 8000e70 <_puts_r+0x78>
 8000e38:	3e01      	subs	r6, #1
 8000e3a:	68a3      	ldr	r3, [r4, #8]
 8000e3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000e40:	3b01      	subs	r3, #1
 8000e42:	60a3      	str	r3, [r4, #8]
 8000e44:	bb39      	cbnz	r1, 8000e96 <_puts_r+0x9e>
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	da38      	bge.n	8000ebc <_puts_r+0xc4>
 8000e4a:	4622      	mov	r2, r4
 8000e4c:	210a      	movs	r1, #10
 8000e4e:	4628      	mov	r0, r5
 8000e50:	f000 f858 	bl	8000f04 <__swbuf_r>
 8000e54:	3001      	adds	r0, #1
 8000e56:	d011      	beq.n	8000e7c <_puts_r+0x84>
 8000e58:	250a      	movs	r5, #10
 8000e5a:	e011      	b.n	8000e80 <_puts_r+0x88>
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <_puts_r+0xd4>)
 8000e5e:	429c      	cmp	r4, r3
 8000e60:	d101      	bne.n	8000e66 <_puts_r+0x6e>
 8000e62:	68ac      	ldr	r4, [r5, #8]
 8000e64:	e7da      	b.n	8000e1c <_puts_r+0x24>
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <_puts_r+0xd8>)
 8000e68:	429c      	cmp	r4, r3
 8000e6a:	bf08      	it	eq
 8000e6c:	68ec      	ldreq	r4, [r5, #12]
 8000e6e:	e7d5      	b.n	8000e1c <_puts_r+0x24>
 8000e70:	4621      	mov	r1, r4
 8000e72:	4628      	mov	r0, r5
 8000e74:	f000 f898 	bl	8000fa8 <__swsetup_r>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d0dd      	beq.n	8000e38 <_puts_r+0x40>
 8000e7c:	f04f 35ff 	mov.w	r5, #4294967295
 8000e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e82:	07da      	lsls	r2, r3, #31
 8000e84:	d405      	bmi.n	8000e92 <_puts_r+0x9a>
 8000e86:	89a3      	ldrh	r3, [r4, #12]
 8000e88:	059b      	lsls	r3, r3, #22
 8000e8a:	d402      	bmi.n	8000e92 <_puts_r+0x9a>
 8000e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e8e:	f000 faae 	bl	80013ee <__retarget_lock_release_recursive>
 8000e92:	4628      	mov	r0, r5
 8000e94:	bd70      	pop	{r4, r5, r6, pc}
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	da04      	bge.n	8000ea4 <_puts_r+0xac>
 8000e9a:	69a2      	ldr	r2, [r4, #24]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	dc06      	bgt.n	8000eae <_puts_r+0xb6>
 8000ea0:	290a      	cmp	r1, #10
 8000ea2:	d004      	beq.n	8000eae <_puts_r+0xb6>
 8000ea4:	6823      	ldr	r3, [r4, #0]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	6022      	str	r2, [r4, #0]
 8000eaa:	7019      	strb	r1, [r3, #0]
 8000eac:	e7c5      	b.n	8000e3a <_puts_r+0x42>
 8000eae:	4622      	mov	r2, r4
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	f000 f827 	bl	8000f04 <__swbuf_r>
 8000eb6:	3001      	adds	r0, #1
 8000eb8:	d1bf      	bne.n	8000e3a <_puts_r+0x42>
 8000eba:	e7df      	b.n	8000e7c <_puts_r+0x84>
 8000ebc:	250a      	movs	r5, #10
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	6022      	str	r2, [r4, #0]
 8000ec4:	701d      	strb	r5, [r3, #0]
 8000ec6:	e7db      	b.n	8000e80 <_puts_r+0x88>
 8000ec8:	08001d20 	.word	0x08001d20
 8000ecc:	08001d40 	.word	0x08001d40
 8000ed0:	08001d00 	.word	0x08001d00

08000ed4 <puts>:
 8000ed4:	4b02      	ldr	r3, [pc, #8]	; (8000ee0 <puts+0xc>)
 8000ed6:	4601      	mov	r1, r0
 8000ed8:	6818      	ldr	r0, [r3, #0]
 8000eda:	f7ff bf8d 	b.w	8000df8 <_puts_r>
 8000ede:	bf00      	nop
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <_sbrk_r>:
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	4d05      	ldr	r5, [pc, #20]	; (8000f00 <_sbrk_r+0x1c>)
 8000eea:	4604      	mov	r4, r0
 8000eec:	4608      	mov	r0, r1
 8000eee:	602b      	str	r3, [r5, #0]
 8000ef0:	f000 fec0 	bl	8001c74 <_sbrk>
 8000ef4:	1c43      	adds	r3, r0, #1
 8000ef6:	d102      	bne.n	8000efe <_sbrk_r+0x1a>
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	b103      	cbz	r3, 8000efe <_sbrk_r+0x1a>
 8000efc:	6023      	str	r3, [r4, #0]
 8000efe:	bd38      	pop	{r3, r4, r5, pc}
 8000f00:	20000160 	.word	0x20000160

08000f04 <__swbuf_r>:
 8000f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f06:	460e      	mov	r6, r1
 8000f08:	4614      	mov	r4, r2
 8000f0a:	4605      	mov	r5, r0
 8000f0c:	b118      	cbz	r0, 8000f16 <__swbuf_r+0x12>
 8000f0e:	6983      	ldr	r3, [r0, #24]
 8000f10:	b90b      	cbnz	r3, 8000f16 <__swbuf_r+0x12>
 8000f12:	f000 f9cd 	bl	80012b0 <__sinit>
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <__swbuf_r+0x98>)
 8000f18:	429c      	cmp	r4, r3
 8000f1a:	d12b      	bne.n	8000f74 <__swbuf_r+0x70>
 8000f1c:	686c      	ldr	r4, [r5, #4]
 8000f1e:	69a3      	ldr	r3, [r4, #24]
 8000f20:	60a3      	str	r3, [r4, #8]
 8000f22:	89a3      	ldrh	r3, [r4, #12]
 8000f24:	071a      	lsls	r2, r3, #28
 8000f26:	d52f      	bpl.n	8000f88 <__swbuf_r+0x84>
 8000f28:	6923      	ldr	r3, [r4, #16]
 8000f2a:	b36b      	cbz	r3, 8000f88 <__swbuf_r+0x84>
 8000f2c:	6923      	ldr	r3, [r4, #16]
 8000f2e:	6820      	ldr	r0, [r4, #0]
 8000f30:	b2f6      	uxtb	r6, r6
 8000f32:	1ac0      	subs	r0, r0, r3
 8000f34:	6963      	ldr	r3, [r4, #20]
 8000f36:	4637      	mov	r7, r6
 8000f38:	4283      	cmp	r3, r0
 8000f3a:	dc04      	bgt.n	8000f46 <__swbuf_r+0x42>
 8000f3c:	4621      	mov	r1, r4
 8000f3e:	4628      	mov	r0, r5
 8000f40:	f000 f922 	bl	8001188 <_fflush_r>
 8000f44:	bb30      	cbnz	r0, 8000f94 <__swbuf_r+0x90>
 8000f46:	68a3      	ldr	r3, [r4, #8]
 8000f48:	3001      	adds	r0, #1
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	60a3      	str	r3, [r4, #8]
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	6022      	str	r2, [r4, #0]
 8000f54:	701e      	strb	r6, [r3, #0]
 8000f56:	6963      	ldr	r3, [r4, #20]
 8000f58:	4283      	cmp	r3, r0
 8000f5a:	d004      	beq.n	8000f66 <__swbuf_r+0x62>
 8000f5c:	89a3      	ldrh	r3, [r4, #12]
 8000f5e:	07db      	lsls	r3, r3, #31
 8000f60:	d506      	bpl.n	8000f70 <__swbuf_r+0x6c>
 8000f62:	2e0a      	cmp	r6, #10
 8000f64:	d104      	bne.n	8000f70 <__swbuf_r+0x6c>
 8000f66:	4621      	mov	r1, r4
 8000f68:	4628      	mov	r0, r5
 8000f6a:	f000 f90d 	bl	8001188 <_fflush_r>
 8000f6e:	b988      	cbnz	r0, 8000f94 <__swbuf_r+0x90>
 8000f70:	4638      	mov	r0, r7
 8000f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <__swbuf_r+0x9c>)
 8000f76:	429c      	cmp	r4, r3
 8000f78:	d101      	bne.n	8000f7e <__swbuf_r+0x7a>
 8000f7a:	68ac      	ldr	r4, [r5, #8]
 8000f7c:	e7cf      	b.n	8000f1e <__swbuf_r+0x1a>
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <__swbuf_r+0xa0>)
 8000f80:	429c      	cmp	r4, r3
 8000f82:	bf08      	it	eq
 8000f84:	68ec      	ldreq	r4, [r5, #12]
 8000f86:	e7ca      	b.n	8000f1e <__swbuf_r+0x1a>
 8000f88:	4621      	mov	r1, r4
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	f000 f80c 	bl	8000fa8 <__swsetup_r>
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d0cb      	beq.n	8000f2c <__swbuf_r+0x28>
 8000f94:	f04f 37ff 	mov.w	r7, #4294967295
 8000f98:	e7ea      	b.n	8000f70 <__swbuf_r+0x6c>
 8000f9a:	bf00      	nop
 8000f9c:	08001d20 	.word	0x08001d20
 8000fa0:	08001d40 	.word	0x08001d40
 8000fa4:	08001d00 	.word	0x08001d00

08000fa8 <__swsetup_r>:
 8000fa8:	4b32      	ldr	r3, [pc, #200]	; (8001074 <__swsetup_r+0xcc>)
 8000faa:	b570      	push	{r4, r5, r6, lr}
 8000fac:	681d      	ldr	r5, [r3, #0]
 8000fae:	4606      	mov	r6, r0
 8000fb0:	460c      	mov	r4, r1
 8000fb2:	b125      	cbz	r5, 8000fbe <__swsetup_r+0x16>
 8000fb4:	69ab      	ldr	r3, [r5, #24]
 8000fb6:	b913      	cbnz	r3, 8000fbe <__swsetup_r+0x16>
 8000fb8:	4628      	mov	r0, r5
 8000fba:	f000 f979 	bl	80012b0 <__sinit>
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <__swsetup_r+0xd0>)
 8000fc0:	429c      	cmp	r4, r3
 8000fc2:	d10f      	bne.n	8000fe4 <__swsetup_r+0x3c>
 8000fc4:	686c      	ldr	r4, [r5, #4]
 8000fc6:	89a3      	ldrh	r3, [r4, #12]
 8000fc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000fcc:	0719      	lsls	r1, r3, #28
 8000fce:	d42c      	bmi.n	800102a <__swsetup_r+0x82>
 8000fd0:	06dd      	lsls	r5, r3, #27
 8000fd2:	d411      	bmi.n	8000ff8 <__swsetup_r+0x50>
 8000fd4:	2309      	movs	r3, #9
 8000fd6:	6033      	str	r3, [r6, #0]
 8000fd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	81a3      	strh	r3, [r4, #12]
 8000fe2:	e03e      	b.n	8001062 <__swsetup_r+0xba>
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <__swsetup_r+0xd4>)
 8000fe6:	429c      	cmp	r4, r3
 8000fe8:	d101      	bne.n	8000fee <__swsetup_r+0x46>
 8000fea:	68ac      	ldr	r4, [r5, #8]
 8000fec:	e7eb      	b.n	8000fc6 <__swsetup_r+0x1e>
 8000fee:	4b24      	ldr	r3, [pc, #144]	; (8001080 <__swsetup_r+0xd8>)
 8000ff0:	429c      	cmp	r4, r3
 8000ff2:	bf08      	it	eq
 8000ff4:	68ec      	ldreq	r4, [r5, #12]
 8000ff6:	e7e6      	b.n	8000fc6 <__swsetup_r+0x1e>
 8000ff8:	0758      	lsls	r0, r3, #29
 8000ffa:	d512      	bpl.n	8001022 <__swsetup_r+0x7a>
 8000ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ffe:	b141      	cbz	r1, 8001012 <__swsetup_r+0x6a>
 8001000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001004:	4299      	cmp	r1, r3
 8001006:	d002      	beq.n	800100e <__swsetup_r+0x66>
 8001008:	4630      	mov	r0, r6
 800100a:	f7ff fe01 	bl	8000c10 <_free_r>
 800100e:	2300      	movs	r3, #0
 8001010:	6363      	str	r3, [r4, #52]	; 0x34
 8001012:	89a3      	ldrh	r3, [r4, #12]
 8001014:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001018:	81a3      	strh	r3, [r4, #12]
 800101a:	2300      	movs	r3, #0
 800101c:	6063      	str	r3, [r4, #4]
 800101e:	6923      	ldr	r3, [r4, #16]
 8001020:	6023      	str	r3, [r4, #0]
 8001022:	89a3      	ldrh	r3, [r4, #12]
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	81a3      	strh	r3, [r4, #12]
 800102a:	6923      	ldr	r3, [r4, #16]
 800102c:	b94b      	cbnz	r3, 8001042 <__swsetup_r+0x9a>
 800102e:	89a3      	ldrh	r3, [r4, #12]
 8001030:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001038:	d003      	beq.n	8001042 <__swsetup_r+0x9a>
 800103a:	4621      	mov	r1, r4
 800103c:	4630      	mov	r0, r6
 800103e:	f000 f9fd 	bl	800143c <__smakebuf_r>
 8001042:	89a0      	ldrh	r0, [r4, #12]
 8001044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001048:	f010 0301 	ands.w	r3, r0, #1
 800104c:	d00a      	beq.n	8001064 <__swsetup_r+0xbc>
 800104e:	2300      	movs	r3, #0
 8001050:	60a3      	str	r3, [r4, #8]
 8001052:	6963      	ldr	r3, [r4, #20]
 8001054:	425b      	negs	r3, r3
 8001056:	61a3      	str	r3, [r4, #24]
 8001058:	6923      	ldr	r3, [r4, #16]
 800105a:	b943      	cbnz	r3, 800106e <__swsetup_r+0xc6>
 800105c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001060:	d1ba      	bne.n	8000fd8 <__swsetup_r+0x30>
 8001062:	bd70      	pop	{r4, r5, r6, pc}
 8001064:	0781      	lsls	r1, r0, #30
 8001066:	bf58      	it	pl
 8001068:	6963      	ldrpl	r3, [r4, #20]
 800106a:	60a3      	str	r3, [r4, #8]
 800106c:	e7f4      	b.n	8001058 <__swsetup_r+0xb0>
 800106e:	2000      	movs	r0, #0
 8001070:	e7f7      	b.n	8001062 <__swsetup_r+0xba>
 8001072:	bf00      	nop
 8001074:	20000004 	.word	0x20000004
 8001078:	08001d20 	.word	0x08001d20
 800107c:	08001d40 	.word	0x08001d40
 8001080:	08001d00 	.word	0x08001d00

08001084 <__sflush_r>:
 8001084:	898a      	ldrh	r2, [r1, #12]
 8001086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001088:	4605      	mov	r5, r0
 800108a:	0710      	lsls	r0, r2, #28
 800108c:	460c      	mov	r4, r1
 800108e:	d457      	bmi.n	8001140 <__sflush_r+0xbc>
 8001090:	684b      	ldr	r3, [r1, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	dc04      	bgt.n	80010a0 <__sflush_r+0x1c>
 8001096:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001098:	2b00      	cmp	r3, #0
 800109a:	dc01      	bgt.n	80010a0 <__sflush_r+0x1c>
 800109c:	2000      	movs	r0, #0
 800109e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010a2:	2e00      	cmp	r6, #0
 80010a4:	d0fa      	beq.n	800109c <__sflush_r+0x18>
 80010a6:	2300      	movs	r3, #0
 80010a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80010ac:	682f      	ldr	r7, [r5, #0]
 80010ae:	602b      	str	r3, [r5, #0]
 80010b0:	d032      	beq.n	8001118 <__sflush_r+0x94>
 80010b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80010b4:	89a3      	ldrh	r3, [r4, #12]
 80010b6:	075a      	lsls	r2, r3, #29
 80010b8:	d505      	bpl.n	80010c6 <__sflush_r+0x42>
 80010ba:	6863      	ldr	r3, [r4, #4]
 80010bc:	1ac0      	subs	r0, r0, r3
 80010be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80010c0:	b10b      	cbz	r3, 80010c6 <__sflush_r+0x42>
 80010c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010c4:	1ac0      	subs	r0, r0, r3
 80010c6:	2300      	movs	r3, #0
 80010c8:	4602      	mov	r2, r0
 80010ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010cc:	4628      	mov	r0, r5
 80010ce:	6a21      	ldr	r1, [r4, #32]
 80010d0:	47b0      	blx	r6
 80010d2:	1c43      	adds	r3, r0, #1
 80010d4:	89a3      	ldrh	r3, [r4, #12]
 80010d6:	d106      	bne.n	80010e6 <__sflush_r+0x62>
 80010d8:	6829      	ldr	r1, [r5, #0]
 80010da:	291d      	cmp	r1, #29
 80010dc:	d82c      	bhi.n	8001138 <__sflush_r+0xb4>
 80010de:	4a29      	ldr	r2, [pc, #164]	; (8001184 <__sflush_r+0x100>)
 80010e0:	40ca      	lsrs	r2, r1
 80010e2:	07d6      	lsls	r6, r2, #31
 80010e4:	d528      	bpl.n	8001138 <__sflush_r+0xb4>
 80010e6:	2200      	movs	r2, #0
 80010e8:	6062      	str	r2, [r4, #4]
 80010ea:	6922      	ldr	r2, [r4, #16]
 80010ec:	04d9      	lsls	r1, r3, #19
 80010ee:	6022      	str	r2, [r4, #0]
 80010f0:	d504      	bpl.n	80010fc <__sflush_r+0x78>
 80010f2:	1c42      	adds	r2, r0, #1
 80010f4:	d101      	bne.n	80010fa <__sflush_r+0x76>
 80010f6:	682b      	ldr	r3, [r5, #0]
 80010f8:	b903      	cbnz	r3, 80010fc <__sflush_r+0x78>
 80010fa:	6560      	str	r0, [r4, #84]	; 0x54
 80010fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010fe:	602f      	str	r7, [r5, #0]
 8001100:	2900      	cmp	r1, #0
 8001102:	d0cb      	beq.n	800109c <__sflush_r+0x18>
 8001104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001108:	4299      	cmp	r1, r3
 800110a:	d002      	beq.n	8001112 <__sflush_r+0x8e>
 800110c:	4628      	mov	r0, r5
 800110e:	f7ff fd7f 	bl	8000c10 <_free_r>
 8001112:	2000      	movs	r0, #0
 8001114:	6360      	str	r0, [r4, #52]	; 0x34
 8001116:	e7c2      	b.n	800109e <__sflush_r+0x1a>
 8001118:	6a21      	ldr	r1, [r4, #32]
 800111a:	2301      	movs	r3, #1
 800111c:	4628      	mov	r0, r5
 800111e:	47b0      	blx	r6
 8001120:	1c41      	adds	r1, r0, #1
 8001122:	d1c7      	bne.n	80010b4 <__sflush_r+0x30>
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0c4      	beq.n	80010b4 <__sflush_r+0x30>
 800112a:	2b1d      	cmp	r3, #29
 800112c:	d001      	beq.n	8001132 <__sflush_r+0xae>
 800112e:	2b16      	cmp	r3, #22
 8001130:	d101      	bne.n	8001136 <__sflush_r+0xb2>
 8001132:	602f      	str	r7, [r5, #0]
 8001134:	e7b2      	b.n	800109c <__sflush_r+0x18>
 8001136:	89a3      	ldrh	r3, [r4, #12]
 8001138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113c:	81a3      	strh	r3, [r4, #12]
 800113e:	e7ae      	b.n	800109e <__sflush_r+0x1a>
 8001140:	690f      	ldr	r7, [r1, #16]
 8001142:	2f00      	cmp	r7, #0
 8001144:	d0aa      	beq.n	800109c <__sflush_r+0x18>
 8001146:	0793      	lsls	r3, r2, #30
 8001148:	bf18      	it	ne
 800114a:	2300      	movne	r3, #0
 800114c:	680e      	ldr	r6, [r1, #0]
 800114e:	bf08      	it	eq
 8001150:	694b      	ldreq	r3, [r1, #20]
 8001152:	1bf6      	subs	r6, r6, r7
 8001154:	600f      	str	r7, [r1, #0]
 8001156:	608b      	str	r3, [r1, #8]
 8001158:	2e00      	cmp	r6, #0
 800115a:	dd9f      	ble.n	800109c <__sflush_r+0x18>
 800115c:	4633      	mov	r3, r6
 800115e:	463a      	mov	r2, r7
 8001160:	4628      	mov	r0, r5
 8001162:	6a21      	ldr	r1, [r4, #32]
 8001164:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001168:	47e0      	blx	ip
 800116a:	2800      	cmp	r0, #0
 800116c:	dc06      	bgt.n	800117c <__sflush_r+0xf8>
 800116e:	89a3      	ldrh	r3, [r4, #12]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001178:	81a3      	strh	r3, [r4, #12]
 800117a:	e790      	b.n	800109e <__sflush_r+0x1a>
 800117c:	4407      	add	r7, r0
 800117e:	1a36      	subs	r6, r6, r0
 8001180:	e7ea      	b.n	8001158 <__sflush_r+0xd4>
 8001182:	bf00      	nop
 8001184:	20400001 	.word	0x20400001

08001188 <_fflush_r>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	690b      	ldr	r3, [r1, #16]
 800118c:	4605      	mov	r5, r0
 800118e:	460c      	mov	r4, r1
 8001190:	b913      	cbnz	r3, 8001198 <_fflush_r+0x10>
 8001192:	2500      	movs	r5, #0
 8001194:	4628      	mov	r0, r5
 8001196:	bd38      	pop	{r3, r4, r5, pc}
 8001198:	b118      	cbz	r0, 80011a2 <_fflush_r+0x1a>
 800119a:	6983      	ldr	r3, [r0, #24]
 800119c:	b90b      	cbnz	r3, 80011a2 <_fflush_r+0x1a>
 800119e:	f000 f887 	bl	80012b0 <__sinit>
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <_fflush_r+0x6c>)
 80011a4:	429c      	cmp	r4, r3
 80011a6:	d11b      	bne.n	80011e0 <_fflush_r+0x58>
 80011a8:	686c      	ldr	r4, [r5, #4]
 80011aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0ef      	beq.n	8001192 <_fflush_r+0xa>
 80011b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80011b4:	07d0      	lsls	r0, r2, #31
 80011b6:	d404      	bmi.n	80011c2 <_fflush_r+0x3a>
 80011b8:	0599      	lsls	r1, r3, #22
 80011ba:	d402      	bmi.n	80011c2 <_fflush_r+0x3a>
 80011bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011be:	f000 f915 	bl	80013ec <__retarget_lock_acquire_recursive>
 80011c2:	4628      	mov	r0, r5
 80011c4:	4621      	mov	r1, r4
 80011c6:	f7ff ff5d 	bl	8001084 <__sflush_r>
 80011ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80011cc:	4605      	mov	r5, r0
 80011ce:	07da      	lsls	r2, r3, #31
 80011d0:	d4e0      	bmi.n	8001194 <_fflush_r+0xc>
 80011d2:	89a3      	ldrh	r3, [r4, #12]
 80011d4:	059b      	lsls	r3, r3, #22
 80011d6:	d4dd      	bmi.n	8001194 <_fflush_r+0xc>
 80011d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011da:	f000 f908 	bl	80013ee <__retarget_lock_release_recursive>
 80011de:	e7d9      	b.n	8001194 <_fflush_r+0xc>
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <_fflush_r+0x70>)
 80011e2:	429c      	cmp	r4, r3
 80011e4:	d101      	bne.n	80011ea <_fflush_r+0x62>
 80011e6:	68ac      	ldr	r4, [r5, #8]
 80011e8:	e7df      	b.n	80011aa <_fflush_r+0x22>
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <_fflush_r+0x74>)
 80011ec:	429c      	cmp	r4, r3
 80011ee:	bf08      	it	eq
 80011f0:	68ec      	ldreq	r4, [r5, #12]
 80011f2:	e7da      	b.n	80011aa <_fflush_r+0x22>
 80011f4:	08001d20 	.word	0x08001d20
 80011f8:	08001d40 	.word	0x08001d40
 80011fc:	08001d00 	.word	0x08001d00

08001200 <std>:
 8001200:	2300      	movs	r3, #0
 8001202:	b510      	push	{r4, lr}
 8001204:	4604      	mov	r4, r0
 8001206:	e9c0 3300 	strd	r3, r3, [r0]
 800120a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800120e:	6083      	str	r3, [r0, #8]
 8001210:	8181      	strh	r1, [r0, #12]
 8001212:	6643      	str	r3, [r0, #100]	; 0x64
 8001214:	81c2      	strh	r2, [r0, #14]
 8001216:	6183      	str	r3, [r0, #24]
 8001218:	4619      	mov	r1, r3
 800121a:	2208      	movs	r2, #8
 800121c:	305c      	adds	r0, #92	; 0x5c
 800121e:	f7ff fcef 	bl	8000c00 <memset>
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <std+0x38>)
 8001224:	6224      	str	r4, [r4, #32]
 8001226:	6263      	str	r3, [r4, #36]	; 0x24
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <std+0x3c>)
 800122a:	62a3      	str	r3, [r4, #40]	; 0x28
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <std+0x40>)
 800122e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <std+0x44>)
 8001232:	6323      	str	r3, [r4, #48]	; 0x30
 8001234:	bd10      	pop	{r4, pc}
 8001236:	bf00      	nop
 8001238:	08001ab1 	.word	0x08001ab1
 800123c:	08001ad3 	.word	0x08001ad3
 8001240:	08001b0b 	.word	0x08001b0b
 8001244:	08001b2f 	.word	0x08001b2f

08001248 <_cleanup_r>:
 8001248:	4901      	ldr	r1, [pc, #4]	; (8001250 <_cleanup_r+0x8>)
 800124a:	f000 b8af 	b.w	80013ac <_fwalk_reent>
 800124e:	bf00      	nop
 8001250:	08001189 	.word	0x08001189

08001254 <__sfmoreglue>:
 8001254:	2268      	movs	r2, #104	; 0x68
 8001256:	b570      	push	{r4, r5, r6, lr}
 8001258:	1e4d      	subs	r5, r1, #1
 800125a:	4355      	muls	r5, r2
 800125c:	460e      	mov	r6, r1
 800125e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001262:	f7ff fd3d 	bl	8000ce0 <_malloc_r>
 8001266:	4604      	mov	r4, r0
 8001268:	b140      	cbz	r0, 800127c <__sfmoreglue+0x28>
 800126a:	2100      	movs	r1, #0
 800126c:	e9c0 1600 	strd	r1, r6, [r0]
 8001270:	300c      	adds	r0, #12
 8001272:	60a0      	str	r0, [r4, #8]
 8001274:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001278:	f7ff fcc2 	bl	8000c00 <memset>
 800127c:	4620      	mov	r0, r4
 800127e:	bd70      	pop	{r4, r5, r6, pc}

08001280 <__sfp_lock_acquire>:
 8001280:	4801      	ldr	r0, [pc, #4]	; (8001288 <__sfp_lock_acquire+0x8>)
 8001282:	f000 b8b3 	b.w	80013ec <__retarget_lock_acquire_recursive>
 8001286:	bf00      	nop
 8001288:	2000015d 	.word	0x2000015d

0800128c <__sfp_lock_release>:
 800128c:	4801      	ldr	r0, [pc, #4]	; (8001294 <__sfp_lock_release+0x8>)
 800128e:	f000 b8ae 	b.w	80013ee <__retarget_lock_release_recursive>
 8001292:	bf00      	nop
 8001294:	2000015d 	.word	0x2000015d

08001298 <__sinit_lock_acquire>:
 8001298:	4801      	ldr	r0, [pc, #4]	; (80012a0 <__sinit_lock_acquire+0x8>)
 800129a:	f000 b8a7 	b.w	80013ec <__retarget_lock_acquire_recursive>
 800129e:	bf00      	nop
 80012a0:	2000015e 	.word	0x2000015e

080012a4 <__sinit_lock_release>:
 80012a4:	4801      	ldr	r0, [pc, #4]	; (80012ac <__sinit_lock_release+0x8>)
 80012a6:	f000 b8a2 	b.w	80013ee <__retarget_lock_release_recursive>
 80012aa:	bf00      	nop
 80012ac:	2000015e 	.word	0x2000015e

080012b0 <__sinit>:
 80012b0:	b510      	push	{r4, lr}
 80012b2:	4604      	mov	r4, r0
 80012b4:	f7ff fff0 	bl	8001298 <__sinit_lock_acquire>
 80012b8:	69a3      	ldr	r3, [r4, #24]
 80012ba:	b11b      	cbz	r3, 80012c4 <__sinit+0x14>
 80012bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012c0:	f7ff bff0 	b.w	80012a4 <__sinit_lock_release>
 80012c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80012c8:	6523      	str	r3, [r4, #80]	; 0x50
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <__sinit+0x68>)
 80012cc:	4a13      	ldr	r2, [pc, #76]	; (800131c <__sinit+0x6c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80012d2:	42a3      	cmp	r3, r4
 80012d4:	bf08      	it	eq
 80012d6:	2301      	moveq	r3, #1
 80012d8:	4620      	mov	r0, r4
 80012da:	bf08      	it	eq
 80012dc:	61a3      	streq	r3, [r4, #24]
 80012de:	f000 f81f 	bl	8001320 <__sfp>
 80012e2:	6060      	str	r0, [r4, #4]
 80012e4:	4620      	mov	r0, r4
 80012e6:	f000 f81b 	bl	8001320 <__sfp>
 80012ea:	60a0      	str	r0, [r4, #8]
 80012ec:	4620      	mov	r0, r4
 80012ee:	f000 f817 	bl	8001320 <__sfp>
 80012f2:	2200      	movs	r2, #0
 80012f4:	2104      	movs	r1, #4
 80012f6:	60e0      	str	r0, [r4, #12]
 80012f8:	6860      	ldr	r0, [r4, #4]
 80012fa:	f7ff ff81 	bl	8001200 <std>
 80012fe:	2201      	movs	r2, #1
 8001300:	2109      	movs	r1, #9
 8001302:	68a0      	ldr	r0, [r4, #8]
 8001304:	f7ff ff7c 	bl	8001200 <std>
 8001308:	2202      	movs	r2, #2
 800130a:	2112      	movs	r1, #18
 800130c:	68e0      	ldr	r0, [r4, #12]
 800130e:	f7ff ff77 	bl	8001200 <std>
 8001312:	2301      	movs	r3, #1
 8001314:	61a3      	str	r3, [r4, #24]
 8001316:	e7d1      	b.n	80012bc <__sinit+0xc>
 8001318:	08001cfc 	.word	0x08001cfc
 800131c:	08001249 	.word	0x08001249

08001320 <__sfp>:
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001322:	4607      	mov	r7, r0
 8001324:	f7ff ffac 	bl	8001280 <__sfp_lock_acquire>
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <__sfp+0x84>)
 800132a:	681e      	ldr	r6, [r3, #0]
 800132c:	69b3      	ldr	r3, [r6, #24]
 800132e:	b913      	cbnz	r3, 8001336 <__sfp+0x16>
 8001330:	4630      	mov	r0, r6
 8001332:	f7ff ffbd 	bl	80012b0 <__sinit>
 8001336:	3648      	adds	r6, #72	; 0x48
 8001338:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800133c:	3b01      	subs	r3, #1
 800133e:	d503      	bpl.n	8001348 <__sfp+0x28>
 8001340:	6833      	ldr	r3, [r6, #0]
 8001342:	b30b      	cbz	r3, 8001388 <__sfp+0x68>
 8001344:	6836      	ldr	r6, [r6, #0]
 8001346:	e7f7      	b.n	8001338 <__sfp+0x18>
 8001348:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800134c:	b9d5      	cbnz	r5, 8001384 <__sfp+0x64>
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <__sfp+0x88>)
 8001350:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001354:	60e3      	str	r3, [r4, #12]
 8001356:	6665      	str	r5, [r4, #100]	; 0x64
 8001358:	f000 f847 	bl	80013ea <__retarget_lock_init_recursive>
 800135c:	f7ff ff96 	bl	800128c <__sfp_lock_release>
 8001360:	2208      	movs	r2, #8
 8001362:	4629      	mov	r1, r5
 8001364:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001368:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800136c:	6025      	str	r5, [r4, #0]
 800136e:	61a5      	str	r5, [r4, #24]
 8001370:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001374:	f7ff fc44 	bl	8000c00 <memset>
 8001378:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800137c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001380:	4620      	mov	r0, r4
 8001382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001384:	3468      	adds	r4, #104	; 0x68
 8001386:	e7d9      	b.n	800133c <__sfp+0x1c>
 8001388:	2104      	movs	r1, #4
 800138a:	4638      	mov	r0, r7
 800138c:	f7ff ff62 	bl	8001254 <__sfmoreglue>
 8001390:	4604      	mov	r4, r0
 8001392:	6030      	str	r0, [r6, #0]
 8001394:	2800      	cmp	r0, #0
 8001396:	d1d5      	bne.n	8001344 <__sfp+0x24>
 8001398:	f7ff ff78 	bl	800128c <__sfp_lock_release>
 800139c:	230c      	movs	r3, #12
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	e7ee      	b.n	8001380 <__sfp+0x60>
 80013a2:	bf00      	nop
 80013a4:	08001cfc 	.word	0x08001cfc
 80013a8:	ffff0001 	.word	0xffff0001

080013ac <_fwalk_reent>:
 80013ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013b0:	4606      	mov	r6, r0
 80013b2:	4688      	mov	r8, r1
 80013b4:	2700      	movs	r7, #0
 80013b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80013ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80013be:	f1b9 0901 	subs.w	r9, r9, #1
 80013c2:	d505      	bpl.n	80013d0 <_fwalk_reent+0x24>
 80013c4:	6824      	ldr	r4, [r4, #0]
 80013c6:	2c00      	cmp	r4, #0
 80013c8:	d1f7      	bne.n	80013ba <_fwalk_reent+0xe>
 80013ca:	4638      	mov	r0, r7
 80013cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013d0:	89ab      	ldrh	r3, [r5, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d907      	bls.n	80013e6 <_fwalk_reent+0x3a>
 80013d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80013da:	3301      	adds	r3, #1
 80013dc:	d003      	beq.n	80013e6 <_fwalk_reent+0x3a>
 80013de:	4629      	mov	r1, r5
 80013e0:	4630      	mov	r0, r6
 80013e2:	47c0      	blx	r8
 80013e4:	4307      	orrs	r7, r0
 80013e6:	3568      	adds	r5, #104	; 0x68
 80013e8:	e7e9      	b.n	80013be <_fwalk_reent+0x12>

080013ea <__retarget_lock_init_recursive>:
 80013ea:	4770      	bx	lr

080013ec <__retarget_lock_acquire_recursive>:
 80013ec:	4770      	bx	lr

080013ee <__retarget_lock_release_recursive>:
 80013ee:	4770      	bx	lr

080013f0 <__swhatbuf_r>:
 80013f0:	b570      	push	{r4, r5, r6, lr}
 80013f2:	460e      	mov	r6, r1
 80013f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013f8:	4614      	mov	r4, r2
 80013fa:	2900      	cmp	r1, #0
 80013fc:	461d      	mov	r5, r3
 80013fe:	b096      	sub	sp, #88	; 0x58
 8001400:	da08      	bge.n	8001414 <__swhatbuf_r+0x24>
 8001402:	2200      	movs	r2, #0
 8001404:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001408:	602a      	str	r2, [r5, #0]
 800140a:	061a      	lsls	r2, r3, #24
 800140c:	d410      	bmi.n	8001430 <__swhatbuf_r+0x40>
 800140e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001412:	e00e      	b.n	8001432 <__swhatbuf_r+0x42>
 8001414:	466a      	mov	r2, sp
 8001416:	f000 fbb1 	bl	8001b7c <_fstat_r>
 800141a:	2800      	cmp	r0, #0
 800141c:	dbf1      	blt.n	8001402 <__swhatbuf_r+0x12>
 800141e:	9a01      	ldr	r2, [sp, #4]
 8001420:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001424:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001428:	425a      	negs	r2, r3
 800142a:	415a      	adcs	r2, r3
 800142c:	602a      	str	r2, [r5, #0]
 800142e:	e7ee      	b.n	800140e <__swhatbuf_r+0x1e>
 8001430:	2340      	movs	r3, #64	; 0x40
 8001432:	2000      	movs	r0, #0
 8001434:	6023      	str	r3, [r4, #0]
 8001436:	b016      	add	sp, #88	; 0x58
 8001438:	bd70      	pop	{r4, r5, r6, pc}
	...

0800143c <__smakebuf_r>:
 800143c:	898b      	ldrh	r3, [r1, #12]
 800143e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001440:	079d      	lsls	r5, r3, #30
 8001442:	4606      	mov	r6, r0
 8001444:	460c      	mov	r4, r1
 8001446:	d507      	bpl.n	8001458 <__smakebuf_r+0x1c>
 8001448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800144c:	6023      	str	r3, [r4, #0]
 800144e:	6123      	str	r3, [r4, #16]
 8001450:	2301      	movs	r3, #1
 8001452:	6163      	str	r3, [r4, #20]
 8001454:	b002      	add	sp, #8
 8001456:	bd70      	pop	{r4, r5, r6, pc}
 8001458:	466a      	mov	r2, sp
 800145a:	ab01      	add	r3, sp, #4
 800145c:	f7ff ffc8 	bl	80013f0 <__swhatbuf_r>
 8001460:	9900      	ldr	r1, [sp, #0]
 8001462:	4605      	mov	r5, r0
 8001464:	4630      	mov	r0, r6
 8001466:	f7ff fc3b 	bl	8000ce0 <_malloc_r>
 800146a:	b948      	cbnz	r0, 8001480 <__smakebuf_r+0x44>
 800146c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001470:	059a      	lsls	r2, r3, #22
 8001472:	d4ef      	bmi.n	8001454 <__smakebuf_r+0x18>
 8001474:	f023 0303 	bic.w	r3, r3, #3
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	81a3      	strh	r3, [r4, #12]
 800147e:	e7e3      	b.n	8001448 <__smakebuf_r+0xc>
 8001480:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <__smakebuf_r+0x7c>)
 8001482:	62b3      	str	r3, [r6, #40]	; 0x28
 8001484:	89a3      	ldrh	r3, [r4, #12]
 8001486:	6020      	str	r0, [r4, #0]
 8001488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148c:	81a3      	strh	r3, [r4, #12]
 800148e:	9b00      	ldr	r3, [sp, #0]
 8001490:	6120      	str	r0, [r4, #16]
 8001492:	6163      	str	r3, [r4, #20]
 8001494:	9b01      	ldr	r3, [sp, #4]
 8001496:	b15b      	cbz	r3, 80014b0 <__smakebuf_r+0x74>
 8001498:	4630      	mov	r0, r6
 800149a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800149e:	f000 fb7f 	bl	8001ba0 <_isatty_r>
 80014a2:	b128      	cbz	r0, 80014b0 <__smakebuf_r+0x74>
 80014a4:	89a3      	ldrh	r3, [r4, #12]
 80014a6:	f023 0303 	bic.w	r3, r3, #3
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	81a3      	strh	r3, [r4, #12]
 80014b0:	89a0      	ldrh	r0, [r4, #12]
 80014b2:	4305      	orrs	r5, r0
 80014b4:	81a5      	strh	r5, [r4, #12]
 80014b6:	e7cd      	b.n	8001454 <__smakebuf_r+0x18>
 80014b8:	08001249 	.word	0x08001249

080014bc <__malloc_lock>:
 80014bc:	4801      	ldr	r0, [pc, #4]	; (80014c4 <__malloc_lock+0x8>)
 80014be:	f7ff bf95 	b.w	80013ec <__retarget_lock_acquire_recursive>
 80014c2:	bf00      	nop
 80014c4:	2000015c 	.word	0x2000015c

080014c8 <__malloc_unlock>:
 80014c8:	4801      	ldr	r0, [pc, #4]	; (80014d0 <__malloc_unlock+0x8>)
 80014ca:	f7ff bf90 	b.w	80013ee <__retarget_lock_release_recursive>
 80014ce:	bf00      	nop
 80014d0:	2000015c 	.word	0x2000015c

080014d4 <__sfputc_r>:
 80014d4:	6893      	ldr	r3, [r2, #8]
 80014d6:	b410      	push	{r4}
 80014d8:	3b01      	subs	r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	6093      	str	r3, [r2, #8]
 80014de:	da07      	bge.n	80014f0 <__sfputc_r+0x1c>
 80014e0:	6994      	ldr	r4, [r2, #24]
 80014e2:	42a3      	cmp	r3, r4
 80014e4:	db01      	blt.n	80014ea <__sfputc_r+0x16>
 80014e6:	290a      	cmp	r1, #10
 80014e8:	d102      	bne.n	80014f0 <__sfputc_r+0x1c>
 80014ea:	bc10      	pop	{r4}
 80014ec:	f7ff bd0a 	b.w	8000f04 <__swbuf_r>
 80014f0:	6813      	ldr	r3, [r2, #0]
 80014f2:	1c58      	adds	r0, r3, #1
 80014f4:	6010      	str	r0, [r2, #0]
 80014f6:	7019      	strb	r1, [r3, #0]
 80014f8:	4608      	mov	r0, r1
 80014fa:	bc10      	pop	{r4}
 80014fc:	4770      	bx	lr

080014fe <__sfputs_r>:
 80014fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001500:	4606      	mov	r6, r0
 8001502:	460f      	mov	r7, r1
 8001504:	4614      	mov	r4, r2
 8001506:	18d5      	adds	r5, r2, r3
 8001508:	42ac      	cmp	r4, r5
 800150a:	d101      	bne.n	8001510 <__sfputs_r+0x12>
 800150c:	2000      	movs	r0, #0
 800150e:	e007      	b.n	8001520 <__sfputs_r+0x22>
 8001510:	463a      	mov	r2, r7
 8001512:	4630      	mov	r0, r6
 8001514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001518:	f7ff ffdc 	bl	80014d4 <__sfputc_r>
 800151c:	1c43      	adds	r3, r0, #1
 800151e:	d1f3      	bne.n	8001508 <__sfputs_r+0xa>
 8001520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001524 <_vfiprintf_r>:
 8001524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001528:	460d      	mov	r5, r1
 800152a:	4614      	mov	r4, r2
 800152c:	4698      	mov	r8, r3
 800152e:	4606      	mov	r6, r0
 8001530:	b09d      	sub	sp, #116	; 0x74
 8001532:	b118      	cbz	r0, 800153c <_vfiprintf_r+0x18>
 8001534:	6983      	ldr	r3, [r0, #24]
 8001536:	b90b      	cbnz	r3, 800153c <_vfiprintf_r+0x18>
 8001538:	f7ff feba 	bl	80012b0 <__sinit>
 800153c:	4b89      	ldr	r3, [pc, #548]	; (8001764 <_vfiprintf_r+0x240>)
 800153e:	429d      	cmp	r5, r3
 8001540:	d11b      	bne.n	800157a <_vfiprintf_r+0x56>
 8001542:	6875      	ldr	r5, [r6, #4]
 8001544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001546:	07d9      	lsls	r1, r3, #31
 8001548:	d405      	bmi.n	8001556 <_vfiprintf_r+0x32>
 800154a:	89ab      	ldrh	r3, [r5, #12]
 800154c:	059a      	lsls	r2, r3, #22
 800154e:	d402      	bmi.n	8001556 <_vfiprintf_r+0x32>
 8001550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001552:	f7ff ff4b 	bl	80013ec <__retarget_lock_acquire_recursive>
 8001556:	89ab      	ldrh	r3, [r5, #12]
 8001558:	071b      	lsls	r3, r3, #28
 800155a:	d501      	bpl.n	8001560 <_vfiprintf_r+0x3c>
 800155c:	692b      	ldr	r3, [r5, #16]
 800155e:	b9eb      	cbnz	r3, 800159c <_vfiprintf_r+0x78>
 8001560:	4629      	mov	r1, r5
 8001562:	4630      	mov	r0, r6
 8001564:	f7ff fd20 	bl	8000fa8 <__swsetup_r>
 8001568:	b1c0      	cbz	r0, 800159c <_vfiprintf_r+0x78>
 800156a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800156c:	07dc      	lsls	r4, r3, #31
 800156e:	d50e      	bpl.n	800158e <_vfiprintf_r+0x6a>
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	b01d      	add	sp, #116	; 0x74
 8001576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800157a:	4b7b      	ldr	r3, [pc, #492]	; (8001768 <_vfiprintf_r+0x244>)
 800157c:	429d      	cmp	r5, r3
 800157e:	d101      	bne.n	8001584 <_vfiprintf_r+0x60>
 8001580:	68b5      	ldr	r5, [r6, #8]
 8001582:	e7df      	b.n	8001544 <_vfiprintf_r+0x20>
 8001584:	4b79      	ldr	r3, [pc, #484]	; (800176c <_vfiprintf_r+0x248>)
 8001586:	429d      	cmp	r5, r3
 8001588:	bf08      	it	eq
 800158a:	68f5      	ldreq	r5, [r6, #12]
 800158c:	e7da      	b.n	8001544 <_vfiprintf_r+0x20>
 800158e:	89ab      	ldrh	r3, [r5, #12]
 8001590:	0598      	lsls	r0, r3, #22
 8001592:	d4ed      	bmi.n	8001570 <_vfiprintf_r+0x4c>
 8001594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001596:	f7ff ff2a 	bl	80013ee <__retarget_lock_release_recursive>
 800159a:	e7e9      	b.n	8001570 <_vfiprintf_r+0x4c>
 800159c:	2300      	movs	r3, #0
 800159e:	9309      	str	r3, [sp, #36]	; 0x24
 80015a0:	2320      	movs	r3, #32
 80015a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80015a6:	2330      	movs	r3, #48	; 0x30
 80015a8:	f04f 0901 	mov.w	r9, #1
 80015ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80015b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001770 <_vfiprintf_r+0x24c>
 80015b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80015b8:	4623      	mov	r3, r4
 80015ba:	469a      	mov	sl, r3
 80015bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015c0:	b10a      	cbz	r2, 80015c6 <_vfiprintf_r+0xa2>
 80015c2:	2a25      	cmp	r2, #37	; 0x25
 80015c4:	d1f9      	bne.n	80015ba <_vfiprintf_r+0x96>
 80015c6:	ebba 0b04 	subs.w	fp, sl, r4
 80015ca:	d00b      	beq.n	80015e4 <_vfiprintf_r+0xc0>
 80015cc:	465b      	mov	r3, fp
 80015ce:	4622      	mov	r2, r4
 80015d0:	4629      	mov	r1, r5
 80015d2:	4630      	mov	r0, r6
 80015d4:	f7ff ff93 	bl	80014fe <__sfputs_r>
 80015d8:	3001      	adds	r0, #1
 80015da:	f000 80aa 	beq.w	8001732 <_vfiprintf_r+0x20e>
 80015de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015e0:	445a      	add	r2, fp
 80015e2:	9209      	str	r2, [sp, #36]	; 0x24
 80015e4:	f89a 3000 	ldrb.w	r3, [sl]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80a2 	beq.w	8001732 <_vfiprintf_r+0x20e>
 80015ee:	2300      	movs	r3, #0
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295
 80015f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015f8:	f10a 0a01 	add.w	sl, sl, #1
 80015fc:	9304      	str	r3, [sp, #16]
 80015fe:	9307      	str	r3, [sp, #28]
 8001600:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001604:	931a      	str	r3, [sp, #104]	; 0x68
 8001606:	4654      	mov	r4, sl
 8001608:	2205      	movs	r2, #5
 800160a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800160e:	4858      	ldr	r0, [pc, #352]	; (8001770 <_vfiprintf_r+0x24c>)
 8001610:	f000 fae8 	bl	8001be4 <memchr>
 8001614:	9a04      	ldr	r2, [sp, #16]
 8001616:	b9d8      	cbnz	r0, 8001650 <_vfiprintf_r+0x12c>
 8001618:	06d1      	lsls	r1, r2, #27
 800161a:	bf44      	itt	mi
 800161c:	2320      	movmi	r3, #32
 800161e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001622:	0713      	lsls	r3, r2, #28
 8001624:	bf44      	itt	mi
 8001626:	232b      	movmi	r3, #43	; 0x2b
 8001628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800162c:	f89a 3000 	ldrb.w	r3, [sl]
 8001630:	2b2a      	cmp	r3, #42	; 0x2a
 8001632:	d015      	beq.n	8001660 <_vfiprintf_r+0x13c>
 8001634:	4654      	mov	r4, sl
 8001636:	2000      	movs	r0, #0
 8001638:	f04f 0c0a 	mov.w	ip, #10
 800163c:	9a07      	ldr	r2, [sp, #28]
 800163e:	4621      	mov	r1, r4
 8001640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001644:	3b30      	subs	r3, #48	; 0x30
 8001646:	2b09      	cmp	r3, #9
 8001648:	d94e      	bls.n	80016e8 <_vfiprintf_r+0x1c4>
 800164a:	b1b0      	cbz	r0, 800167a <_vfiprintf_r+0x156>
 800164c:	9207      	str	r2, [sp, #28]
 800164e:	e014      	b.n	800167a <_vfiprintf_r+0x156>
 8001650:	eba0 0308 	sub.w	r3, r0, r8
 8001654:	fa09 f303 	lsl.w	r3, r9, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	46a2      	mov	sl, r4
 800165c:	9304      	str	r3, [sp, #16]
 800165e:	e7d2      	b.n	8001606 <_vfiprintf_r+0xe2>
 8001660:	9b03      	ldr	r3, [sp, #12]
 8001662:	1d19      	adds	r1, r3, #4
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	9103      	str	r1, [sp, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	bfbb      	ittet	lt
 800166c:	425b      	neglt	r3, r3
 800166e:	f042 0202 	orrlt.w	r2, r2, #2
 8001672:	9307      	strge	r3, [sp, #28]
 8001674:	9307      	strlt	r3, [sp, #28]
 8001676:	bfb8      	it	lt
 8001678:	9204      	strlt	r2, [sp, #16]
 800167a:	7823      	ldrb	r3, [r4, #0]
 800167c:	2b2e      	cmp	r3, #46	; 0x2e
 800167e:	d10c      	bne.n	800169a <_vfiprintf_r+0x176>
 8001680:	7863      	ldrb	r3, [r4, #1]
 8001682:	2b2a      	cmp	r3, #42	; 0x2a
 8001684:	d135      	bne.n	80016f2 <_vfiprintf_r+0x1ce>
 8001686:	9b03      	ldr	r3, [sp, #12]
 8001688:	3402      	adds	r4, #2
 800168a:	1d1a      	adds	r2, r3, #4
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	9203      	str	r2, [sp, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	bfb8      	it	lt
 8001694:	f04f 33ff 	movlt.w	r3, #4294967295
 8001698:	9305      	str	r3, [sp, #20]
 800169a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001774 <_vfiprintf_r+0x250>
 800169e:	2203      	movs	r2, #3
 80016a0:	4650      	mov	r0, sl
 80016a2:	7821      	ldrb	r1, [r4, #0]
 80016a4:	f000 fa9e 	bl	8001be4 <memchr>
 80016a8:	b140      	cbz	r0, 80016bc <_vfiprintf_r+0x198>
 80016aa:	2340      	movs	r3, #64	; 0x40
 80016ac:	eba0 000a 	sub.w	r0, r0, sl
 80016b0:	fa03 f000 	lsl.w	r0, r3, r0
 80016b4:	9b04      	ldr	r3, [sp, #16]
 80016b6:	3401      	adds	r4, #1
 80016b8:	4303      	orrs	r3, r0
 80016ba:	9304      	str	r3, [sp, #16]
 80016bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016c0:	2206      	movs	r2, #6
 80016c2:	482d      	ldr	r0, [pc, #180]	; (8001778 <_vfiprintf_r+0x254>)
 80016c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80016c8:	f000 fa8c 	bl	8001be4 <memchr>
 80016cc:	2800      	cmp	r0, #0
 80016ce:	d03f      	beq.n	8001750 <_vfiprintf_r+0x22c>
 80016d0:	4b2a      	ldr	r3, [pc, #168]	; (800177c <_vfiprintf_r+0x258>)
 80016d2:	bb1b      	cbnz	r3, 800171c <_vfiprintf_r+0x1f8>
 80016d4:	9b03      	ldr	r3, [sp, #12]
 80016d6:	3307      	adds	r3, #7
 80016d8:	f023 0307 	bic.w	r3, r3, #7
 80016dc:	3308      	adds	r3, #8
 80016de:	9303      	str	r3, [sp, #12]
 80016e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016e2:	443b      	add	r3, r7
 80016e4:	9309      	str	r3, [sp, #36]	; 0x24
 80016e6:	e767      	b.n	80015b8 <_vfiprintf_r+0x94>
 80016e8:	460c      	mov	r4, r1
 80016ea:	2001      	movs	r0, #1
 80016ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80016f0:	e7a5      	b.n	800163e <_vfiprintf_r+0x11a>
 80016f2:	2300      	movs	r3, #0
 80016f4:	f04f 0c0a 	mov.w	ip, #10
 80016f8:	4619      	mov	r1, r3
 80016fa:	3401      	adds	r4, #1
 80016fc:	9305      	str	r3, [sp, #20]
 80016fe:	4620      	mov	r0, r4
 8001700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001704:	3a30      	subs	r2, #48	; 0x30
 8001706:	2a09      	cmp	r2, #9
 8001708:	d903      	bls.n	8001712 <_vfiprintf_r+0x1ee>
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0c5      	beq.n	800169a <_vfiprintf_r+0x176>
 800170e:	9105      	str	r1, [sp, #20]
 8001710:	e7c3      	b.n	800169a <_vfiprintf_r+0x176>
 8001712:	4604      	mov	r4, r0
 8001714:	2301      	movs	r3, #1
 8001716:	fb0c 2101 	mla	r1, ip, r1, r2
 800171a:	e7f0      	b.n	80016fe <_vfiprintf_r+0x1da>
 800171c:	ab03      	add	r3, sp, #12
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	462a      	mov	r2, r5
 8001722:	4630      	mov	r0, r6
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <_vfiprintf_r+0x25c>)
 8001726:	a904      	add	r1, sp, #16
 8001728:	f3af 8000 	nop.w
 800172c:	4607      	mov	r7, r0
 800172e:	1c78      	adds	r0, r7, #1
 8001730:	d1d6      	bne.n	80016e0 <_vfiprintf_r+0x1bc>
 8001732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001734:	07d9      	lsls	r1, r3, #31
 8001736:	d405      	bmi.n	8001744 <_vfiprintf_r+0x220>
 8001738:	89ab      	ldrh	r3, [r5, #12]
 800173a:	059a      	lsls	r2, r3, #22
 800173c:	d402      	bmi.n	8001744 <_vfiprintf_r+0x220>
 800173e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001740:	f7ff fe55 	bl	80013ee <__retarget_lock_release_recursive>
 8001744:	89ab      	ldrh	r3, [r5, #12]
 8001746:	065b      	lsls	r3, r3, #25
 8001748:	f53f af12 	bmi.w	8001570 <_vfiprintf_r+0x4c>
 800174c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800174e:	e711      	b.n	8001574 <_vfiprintf_r+0x50>
 8001750:	ab03      	add	r3, sp, #12
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	462a      	mov	r2, r5
 8001756:	4630      	mov	r0, r6
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <_vfiprintf_r+0x25c>)
 800175a:	a904      	add	r1, sp, #16
 800175c:	f000 f882 	bl	8001864 <_printf_i>
 8001760:	e7e4      	b.n	800172c <_vfiprintf_r+0x208>
 8001762:	bf00      	nop
 8001764:	08001d20 	.word	0x08001d20
 8001768:	08001d40 	.word	0x08001d40
 800176c:	08001d00 	.word	0x08001d00
 8001770:	08001d60 	.word	0x08001d60
 8001774:	08001d66 	.word	0x08001d66
 8001778:	08001d6a 	.word	0x08001d6a
 800177c:	00000000 	.word	0x00000000
 8001780:	080014ff 	.word	0x080014ff

08001784 <_printf_common>:
 8001784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001788:	4616      	mov	r6, r2
 800178a:	4699      	mov	r9, r3
 800178c:	688a      	ldr	r2, [r1, #8]
 800178e:	690b      	ldr	r3, [r1, #16]
 8001790:	4607      	mov	r7, r0
 8001792:	4293      	cmp	r3, r2
 8001794:	bfb8      	it	lt
 8001796:	4613      	movlt	r3, r2
 8001798:	6033      	str	r3, [r6, #0]
 800179a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800179e:	460c      	mov	r4, r1
 80017a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80017a4:	b10a      	cbz	r2, 80017aa <_printf_common+0x26>
 80017a6:	3301      	adds	r3, #1
 80017a8:	6033      	str	r3, [r6, #0]
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	0699      	lsls	r1, r3, #26
 80017ae:	bf42      	ittt	mi
 80017b0:	6833      	ldrmi	r3, [r6, #0]
 80017b2:	3302      	addmi	r3, #2
 80017b4:	6033      	strmi	r3, [r6, #0]
 80017b6:	6825      	ldr	r5, [r4, #0]
 80017b8:	f015 0506 	ands.w	r5, r5, #6
 80017bc:	d106      	bne.n	80017cc <_printf_common+0x48>
 80017be:	f104 0a19 	add.w	sl, r4, #25
 80017c2:	68e3      	ldr	r3, [r4, #12]
 80017c4:	6832      	ldr	r2, [r6, #0]
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	42ab      	cmp	r3, r5
 80017ca:	dc28      	bgt.n	800181e <_printf_common+0x9a>
 80017cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80017d0:	1e13      	subs	r3, r2, #0
 80017d2:	6822      	ldr	r2, [r4, #0]
 80017d4:	bf18      	it	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	0692      	lsls	r2, r2, #26
 80017da:	d42d      	bmi.n	8001838 <_printf_common+0xb4>
 80017dc:	4649      	mov	r1, r9
 80017de:	4638      	mov	r0, r7
 80017e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80017e4:	47c0      	blx	r8
 80017e6:	3001      	adds	r0, #1
 80017e8:	d020      	beq.n	800182c <_printf_common+0xa8>
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	68e5      	ldr	r5, [r4, #12]
 80017ee:	f003 0306 	and.w	r3, r3, #6
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf18      	it	ne
 80017f6:	2500      	movne	r5, #0
 80017f8:	6832      	ldr	r2, [r6, #0]
 80017fa:	f04f 0600 	mov.w	r6, #0
 80017fe:	68a3      	ldr	r3, [r4, #8]
 8001800:	bf08      	it	eq
 8001802:	1aad      	subeq	r5, r5, r2
 8001804:	6922      	ldr	r2, [r4, #16]
 8001806:	bf08      	it	eq
 8001808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800180c:	4293      	cmp	r3, r2
 800180e:	bfc4      	itt	gt
 8001810:	1a9b      	subgt	r3, r3, r2
 8001812:	18ed      	addgt	r5, r5, r3
 8001814:	341a      	adds	r4, #26
 8001816:	42b5      	cmp	r5, r6
 8001818:	d11a      	bne.n	8001850 <_printf_common+0xcc>
 800181a:	2000      	movs	r0, #0
 800181c:	e008      	b.n	8001830 <_printf_common+0xac>
 800181e:	2301      	movs	r3, #1
 8001820:	4652      	mov	r2, sl
 8001822:	4649      	mov	r1, r9
 8001824:	4638      	mov	r0, r7
 8001826:	47c0      	blx	r8
 8001828:	3001      	adds	r0, #1
 800182a:	d103      	bne.n	8001834 <_printf_common+0xb0>
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001834:	3501      	adds	r5, #1
 8001836:	e7c4      	b.n	80017c2 <_printf_common+0x3e>
 8001838:	2030      	movs	r0, #48	; 0x30
 800183a:	18e1      	adds	r1, r4, r3
 800183c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001846:	4422      	add	r2, r4
 8001848:	3302      	adds	r3, #2
 800184a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800184e:	e7c5      	b.n	80017dc <_printf_common+0x58>
 8001850:	2301      	movs	r3, #1
 8001852:	4622      	mov	r2, r4
 8001854:	4649      	mov	r1, r9
 8001856:	4638      	mov	r0, r7
 8001858:	47c0      	blx	r8
 800185a:	3001      	adds	r0, #1
 800185c:	d0e6      	beq.n	800182c <_printf_common+0xa8>
 800185e:	3601      	adds	r6, #1
 8001860:	e7d9      	b.n	8001816 <_printf_common+0x92>
	...

08001864 <_printf_i>:
 8001864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001868:	7e0f      	ldrb	r7, [r1, #24]
 800186a:	4691      	mov	r9, r2
 800186c:	2f78      	cmp	r7, #120	; 0x78
 800186e:	4680      	mov	r8, r0
 8001870:	460c      	mov	r4, r1
 8001872:	469a      	mov	sl, r3
 8001874:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001876:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800187a:	d807      	bhi.n	800188c <_printf_i+0x28>
 800187c:	2f62      	cmp	r7, #98	; 0x62
 800187e:	d80a      	bhi.n	8001896 <_printf_i+0x32>
 8001880:	2f00      	cmp	r7, #0
 8001882:	f000 80d9 	beq.w	8001a38 <_printf_i+0x1d4>
 8001886:	2f58      	cmp	r7, #88	; 0x58
 8001888:	f000 80a4 	beq.w	80019d4 <_printf_i+0x170>
 800188c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001894:	e03a      	b.n	800190c <_printf_i+0xa8>
 8001896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800189a:	2b15      	cmp	r3, #21
 800189c:	d8f6      	bhi.n	800188c <_printf_i+0x28>
 800189e:	a101      	add	r1, pc, #4	; (adr r1, 80018a4 <_printf_i+0x40>)
 80018a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80018a4:	080018fd 	.word	0x080018fd
 80018a8:	08001911 	.word	0x08001911
 80018ac:	0800188d 	.word	0x0800188d
 80018b0:	0800188d 	.word	0x0800188d
 80018b4:	0800188d 	.word	0x0800188d
 80018b8:	0800188d 	.word	0x0800188d
 80018bc:	08001911 	.word	0x08001911
 80018c0:	0800188d 	.word	0x0800188d
 80018c4:	0800188d 	.word	0x0800188d
 80018c8:	0800188d 	.word	0x0800188d
 80018cc:	0800188d 	.word	0x0800188d
 80018d0:	08001a1f 	.word	0x08001a1f
 80018d4:	08001941 	.word	0x08001941
 80018d8:	08001a01 	.word	0x08001a01
 80018dc:	0800188d 	.word	0x0800188d
 80018e0:	0800188d 	.word	0x0800188d
 80018e4:	08001a41 	.word	0x08001a41
 80018e8:	0800188d 	.word	0x0800188d
 80018ec:	08001941 	.word	0x08001941
 80018f0:	0800188d 	.word	0x0800188d
 80018f4:	0800188d 	.word	0x0800188d
 80018f8:	08001a09 	.word	0x08001a09
 80018fc:	682b      	ldr	r3, [r5, #0]
 80018fe:	1d1a      	adds	r2, r3, #4
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	602a      	str	r2, [r5, #0]
 8001904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800190c:	2301      	movs	r3, #1
 800190e:	e0a4      	b.n	8001a5a <_printf_i+0x1f6>
 8001910:	6820      	ldr	r0, [r4, #0]
 8001912:	6829      	ldr	r1, [r5, #0]
 8001914:	0606      	lsls	r6, r0, #24
 8001916:	f101 0304 	add.w	r3, r1, #4
 800191a:	d50a      	bpl.n	8001932 <_printf_i+0xce>
 800191c:	680e      	ldr	r6, [r1, #0]
 800191e:	602b      	str	r3, [r5, #0]
 8001920:	2e00      	cmp	r6, #0
 8001922:	da03      	bge.n	800192c <_printf_i+0xc8>
 8001924:	232d      	movs	r3, #45	; 0x2d
 8001926:	4276      	negs	r6, r6
 8001928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800192c:	230a      	movs	r3, #10
 800192e:	485e      	ldr	r0, [pc, #376]	; (8001aa8 <_printf_i+0x244>)
 8001930:	e019      	b.n	8001966 <_printf_i+0x102>
 8001932:	680e      	ldr	r6, [r1, #0]
 8001934:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001938:	602b      	str	r3, [r5, #0]
 800193a:	bf18      	it	ne
 800193c:	b236      	sxthne	r6, r6
 800193e:	e7ef      	b.n	8001920 <_printf_i+0xbc>
 8001940:	682b      	ldr	r3, [r5, #0]
 8001942:	6820      	ldr	r0, [r4, #0]
 8001944:	1d19      	adds	r1, r3, #4
 8001946:	6029      	str	r1, [r5, #0]
 8001948:	0601      	lsls	r1, r0, #24
 800194a:	d501      	bpl.n	8001950 <_printf_i+0xec>
 800194c:	681e      	ldr	r6, [r3, #0]
 800194e:	e002      	b.n	8001956 <_printf_i+0xf2>
 8001950:	0646      	lsls	r6, r0, #25
 8001952:	d5fb      	bpl.n	800194c <_printf_i+0xe8>
 8001954:	881e      	ldrh	r6, [r3, #0]
 8001956:	2f6f      	cmp	r7, #111	; 0x6f
 8001958:	bf0c      	ite	eq
 800195a:	2308      	moveq	r3, #8
 800195c:	230a      	movne	r3, #10
 800195e:	4852      	ldr	r0, [pc, #328]	; (8001aa8 <_printf_i+0x244>)
 8001960:	2100      	movs	r1, #0
 8001962:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001966:	6865      	ldr	r5, [r4, #4]
 8001968:	2d00      	cmp	r5, #0
 800196a:	bfa8      	it	ge
 800196c:	6821      	ldrge	r1, [r4, #0]
 800196e:	60a5      	str	r5, [r4, #8]
 8001970:	bfa4      	itt	ge
 8001972:	f021 0104 	bicge.w	r1, r1, #4
 8001976:	6021      	strge	r1, [r4, #0]
 8001978:	b90e      	cbnz	r6, 800197e <_printf_i+0x11a>
 800197a:	2d00      	cmp	r5, #0
 800197c:	d04d      	beq.n	8001a1a <_printf_i+0x1b6>
 800197e:	4615      	mov	r5, r2
 8001980:	fbb6 f1f3 	udiv	r1, r6, r3
 8001984:	fb03 6711 	mls	r7, r3, r1, r6
 8001988:	5dc7      	ldrb	r7, [r0, r7]
 800198a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800198e:	4637      	mov	r7, r6
 8001990:	42bb      	cmp	r3, r7
 8001992:	460e      	mov	r6, r1
 8001994:	d9f4      	bls.n	8001980 <_printf_i+0x11c>
 8001996:	2b08      	cmp	r3, #8
 8001998:	d10b      	bne.n	80019b2 <_printf_i+0x14e>
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	07de      	lsls	r6, r3, #31
 800199e:	d508      	bpl.n	80019b2 <_printf_i+0x14e>
 80019a0:	6923      	ldr	r3, [r4, #16]
 80019a2:	6861      	ldr	r1, [r4, #4]
 80019a4:	4299      	cmp	r1, r3
 80019a6:	bfde      	ittt	le
 80019a8:	2330      	movle	r3, #48	; 0x30
 80019aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80019ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80019b2:	1b52      	subs	r2, r2, r5
 80019b4:	6122      	str	r2, [r4, #16]
 80019b6:	464b      	mov	r3, r9
 80019b8:	4621      	mov	r1, r4
 80019ba:	4640      	mov	r0, r8
 80019bc:	f8cd a000 	str.w	sl, [sp]
 80019c0:	aa03      	add	r2, sp, #12
 80019c2:	f7ff fedf 	bl	8001784 <_printf_common>
 80019c6:	3001      	adds	r0, #1
 80019c8:	d14c      	bne.n	8001a64 <_printf_i+0x200>
 80019ca:	f04f 30ff 	mov.w	r0, #4294967295
 80019ce:	b004      	add	sp, #16
 80019d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019d4:	4834      	ldr	r0, [pc, #208]	; (8001aa8 <_printf_i+0x244>)
 80019d6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80019da:	6829      	ldr	r1, [r5, #0]
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	f851 6b04 	ldr.w	r6, [r1], #4
 80019e2:	6029      	str	r1, [r5, #0]
 80019e4:	061d      	lsls	r5, r3, #24
 80019e6:	d514      	bpl.n	8001a12 <_printf_i+0x1ae>
 80019e8:	07df      	lsls	r7, r3, #31
 80019ea:	bf44      	itt	mi
 80019ec:	f043 0320 	orrmi.w	r3, r3, #32
 80019f0:	6023      	strmi	r3, [r4, #0]
 80019f2:	b91e      	cbnz	r6, 80019fc <_printf_i+0x198>
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	f023 0320 	bic.w	r3, r3, #32
 80019fa:	6023      	str	r3, [r4, #0]
 80019fc:	2310      	movs	r3, #16
 80019fe:	e7af      	b.n	8001960 <_printf_i+0xfc>
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	f043 0320 	orr.w	r3, r3, #32
 8001a06:	6023      	str	r3, [r4, #0]
 8001a08:	2378      	movs	r3, #120	; 0x78
 8001a0a:	4828      	ldr	r0, [pc, #160]	; (8001aac <_printf_i+0x248>)
 8001a0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001a10:	e7e3      	b.n	80019da <_printf_i+0x176>
 8001a12:	0659      	lsls	r1, r3, #25
 8001a14:	bf48      	it	mi
 8001a16:	b2b6      	uxthmi	r6, r6
 8001a18:	e7e6      	b.n	80019e8 <_printf_i+0x184>
 8001a1a:	4615      	mov	r5, r2
 8001a1c:	e7bb      	b.n	8001996 <_printf_i+0x132>
 8001a1e:	682b      	ldr	r3, [r5, #0]
 8001a20:	6826      	ldr	r6, [r4, #0]
 8001a22:	1d18      	adds	r0, r3, #4
 8001a24:	6961      	ldr	r1, [r4, #20]
 8001a26:	6028      	str	r0, [r5, #0]
 8001a28:	0635      	lsls	r5, r6, #24
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	d501      	bpl.n	8001a32 <_printf_i+0x1ce>
 8001a2e:	6019      	str	r1, [r3, #0]
 8001a30:	e002      	b.n	8001a38 <_printf_i+0x1d4>
 8001a32:	0670      	lsls	r0, r6, #25
 8001a34:	d5fb      	bpl.n	8001a2e <_printf_i+0x1ca>
 8001a36:	8019      	strh	r1, [r3, #0]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	4615      	mov	r5, r2
 8001a3c:	6123      	str	r3, [r4, #16]
 8001a3e:	e7ba      	b.n	80019b6 <_printf_i+0x152>
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	2100      	movs	r1, #0
 8001a44:	1d1a      	adds	r2, r3, #4
 8001a46:	602a      	str	r2, [r5, #0]
 8001a48:	681d      	ldr	r5, [r3, #0]
 8001a4a:	6862      	ldr	r2, [r4, #4]
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f000 f8c9 	bl	8001be4 <memchr>
 8001a52:	b108      	cbz	r0, 8001a58 <_printf_i+0x1f4>
 8001a54:	1b40      	subs	r0, r0, r5
 8001a56:	6060      	str	r0, [r4, #4]
 8001a58:	6863      	ldr	r3, [r4, #4]
 8001a5a:	6123      	str	r3, [r4, #16]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a62:	e7a8      	b.n	80019b6 <_printf_i+0x152>
 8001a64:	462a      	mov	r2, r5
 8001a66:	4649      	mov	r1, r9
 8001a68:	4640      	mov	r0, r8
 8001a6a:	6923      	ldr	r3, [r4, #16]
 8001a6c:	47d0      	blx	sl
 8001a6e:	3001      	adds	r0, #1
 8001a70:	d0ab      	beq.n	80019ca <_printf_i+0x166>
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	079b      	lsls	r3, r3, #30
 8001a76:	d413      	bmi.n	8001aa0 <_printf_i+0x23c>
 8001a78:	68e0      	ldr	r0, [r4, #12]
 8001a7a:	9b03      	ldr	r3, [sp, #12]
 8001a7c:	4298      	cmp	r0, r3
 8001a7e:	bfb8      	it	lt
 8001a80:	4618      	movlt	r0, r3
 8001a82:	e7a4      	b.n	80019ce <_printf_i+0x16a>
 8001a84:	2301      	movs	r3, #1
 8001a86:	4632      	mov	r2, r6
 8001a88:	4649      	mov	r1, r9
 8001a8a:	4640      	mov	r0, r8
 8001a8c:	47d0      	blx	sl
 8001a8e:	3001      	adds	r0, #1
 8001a90:	d09b      	beq.n	80019ca <_printf_i+0x166>
 8001a92:	3501      	adds	r5, #1
 8001a94:	68e3      	ldr	r3, [r4, #12]
 8001a96:	9903      	ldr	r1, [sp, #12]
 8001a98:	1a5b      	subs	r3, r3, r1
 8001a9a:	42ab      	cmp	r3, r5
 8001a9c:	dcf2      	bgt.n	8001a84 <_printf_i+0x220>
 8001a9e:	e7eb      	b.n	8001a78 <_printf_i+0x214>
 8001aa0:	2500      	movs	r5, #0
 8001aa2:	f104 0619 	add.w	r6, r4, #25
 8001aa6:	e7f5      	b.n	8001a94 <_printf_i+0x230>
 8001aa8:	08001d71 	.word	0x08001d71
 8001aac:	08001d82 	.word	0x08001d82

08001ab0 <__sread>:
 8001ab0:	b510      	push	{r4, lr}
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ab8:	f000 f8a2 	bl	8001c00 <_read_r>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	bfab      	itete	ge
 8001ac0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001ac2:	89a3      	ldrhlt	r3, [r4, #12]
 8001ac4:	181b      	addge	r3, r3, r0
 8001ac6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001aca:	bfac      	ite	ge
 8001acc:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ace:	81a3      	strhlt	r3, [r4, #12]
 8001ad0:	bd10      	pop	{r4, pc}

08001ad2 <__swrite>:
 8001ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad6:	461f      	mov	r7, r3
 8001ad8:	898b      	ldrh	r3, [r1, #12]
 8001ada:	4605      	mov	r5, r0
 8001adc:	05db      	lsls	r3, r3, #23
 8001ade:	460c      	mov	r4, r1
 8001ae0:	4616      	mov	r6, r2
 8001ae2:	d505      	bpl.n	8001af0 <__swrite+0x1e>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aec:	f000 f868 	bl	8001bc0 <_lseek_r>
 8001af0:	89a3      	ldrh	r3, [r4, #12]
 8001af2:	4632      	mov	r2, r6
 8001af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001af8:	81a3      	strh	r3, [r4, #12]
 8001afa:	4628      	mov	r0, r5
 8001afc:	463b      	mov	r3, r7
 8001afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b06:	f000 b817 	b.w	8001b38 <_write_r>

08001b0a <__sseek>:
 8001b0a:	b510      	push	{r4, lr}
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b12:	f000 f855 	bl	8001bc0 <_lseek_r>
 8001b16:	1c43      	adds	r3, r0, #1
 8001b18:	89a3      	ldrh	r3, [r4, #12]
 8001b1a:	bf15      	itete	ne
 8001b1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b26:	81a3      	strheq	r3, [r4, #12]
 8001b28:	bf18      	it	ne
 8001b2a:	81a3      	strhne	r3, [r4, #12]
 8001b2c:	bd10      	pop	{r4, pc}

08001b2e <__sclose>:
 8001b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b32:	f000 b813 	b.w	8001b5c <_close_r>
	...

08001b38 <_write_r>:
 8001b38:	b538      	push	{r3, r4, r5, lr}
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	4608      	mov	r0, r1
 8001b3e:	4611      	mov	r1, r2
 8001b40:	2200      	movs	r2, #0
 8001b42:	4d05      	ldr	r5, [pc, #20]	; (8001b58 <_write_r+0x20>)
 8001b44:	602a      	str	r2, [r5, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	f000 f8a2 	bl	8001c90 <_write>
 8001b4c:	1c43      	adds	r3, r0, #1
 8001b4e:	d102      	bne.n	8001b56 <_write_r+0x1e>
 8001b50:	682b      	ldr	r3, [r5, #0]
 8001b52:	b103      	cbz	r3, 8001b56 <_write_r+0x1e>
 8001b54:	6023      	str	r3, [r4, #0]
 8001b56:	bd38      	pop	{r3, r4, r5, pc}
 8001b58:	20000160 	.word	0x20000160

08001b5c <_close_r>:
 8001b5c:	b538      	push	{r3, r4, r5, lr}
 8001b5e:	2300      	movs	r3, #0
 8001b60:	4d05      	ldr	r5, [pc, #20]	; (8001b78 <_close_r+0x1c>)
 8001b62:	4604      	mov	r4, r0
 8001b64:	4608      	mov	r0, r1
 8001b66:	602b      	str	r3, [r5, #0]
 8001b68:	f000 f85c 	bl	8001c24 <_close>
 8001b6c:	1c43      	adds	r3, r0, #1
 8001b6e:	d102      	bne.n	8001b76 <_close_r+0x1a>
 8001b70:	682b      	ldr	r3, [r5, #0]
 8001b72:	b103      	cbz	r3, 8001b76 <_close_r+0x1a>
 8001b74:	6023      	str	r3, [r4, #0]
 8001b76:	bd38      	pop	{r3, r4, r5, pc}
 8001b78:	20000160 	.word	0x20000160

08001b7c <_fstat_r>:
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 8001b7e:	2300      	movs	r3, #0
 8001b80:	4d06      	ldr	r5, [pc, #24]	; (8001b9c <_fstat_r+0x20>)
 8001b82:	4604      	mov	r4, r0
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	602b      	str	r3, [r5, #0]
 8001b8a:	f000 f853 	bl	8001c34 <_fstat>
 8001b8e:	1c43      	adds	r3, r0, #1
 8001b90:	d102      	bne.n	8001b98 <_fstat_r+0x1c>
 8001b92:	682b      	ldr	r3, [r5, #0]
 8001b94:	b103      	cbz	r3, 8001b98 <_fstat_r+0x1c>
 8001b96:	6023      	str	r3, [r4, #0]
 8001b98:	bd38      	pop	{r3, r4, r5, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000160 	.word	0x20000160

08001ba0 <_isatty_r>:
 8001ba0:	b538      	push	{r3, r4, r5, lr}
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	4d05      	ldr	r5, [pc, #20]	; (8001bbc <_isatty_r+0x1c>)
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	4608      	mov	r0, r1
 8001baa:	602b      	str	r3, [r5, #0]
 8001bac:	f000 f84a 	bl	8001c44 <_isatty>
 8001bb0:	1c43      	adds	r3, r0, #1
 8001bb2:	d102      	bne.n	8001bba <_isatty_r+0x1a>
 8001bb4:	682b      	ldr	r3, [r5, #0]
 8001bb6:	b103      	cbz	r3, 8001bba <_isatty_r+0x1a>
 8001bb8:	6023      	str	r3, [r4, #0]
 8001bba:	bd38      	pop	{r3, r4, r5, pc}
 8001bbc:	20000160 	.word	0x20000160

08001bc0 <_lseek_r>:
 8001bc0:	b538      	push	{r3, r4, r5, lr}
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4d05      	ldr	r5, [pc, #20]	; (8001be0 <_lseek_r+0x20>)
 8001bcc:	602a      	str	r2, [r5, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f000 f840 	bl	8001c54 <_lseek>
 8001bd4:	1c43      	adds	r3, r0, #1
 8001bd6:	d102      	bne.n	8001bde <_lseek_r+0x1e>
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	b103      	cbz	r3, 8001bde <_lseek_r+0x1e>
 8001bdc:	6023      	str	r3, [r4, #0]
 8001bde:	bd38      	pop	{r3, r4, r5, pc}
 8001be0:	20000160 	.word	0x20000160

08001be4 <memchr>:
 8001be4:	4603      	mov	r3, r0
 8001be6:	b510      	push	{r4, lr}
 8001be8:	b2c9      	uxtb	r1, r1
 8001bea:	4402      	add	r2, r0
 8001bec:	4293      	cmp	r3, r2
 8001bee:	4618      	mov	r0, r3
 8001bf0:	d101      	bne.n	8001bf6 <memchr+0x12>
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	e003      	b.n	8001bfe <memchr+0x1a>
 8001bf6:	7804      	ldrb	r4, [r0, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	428c      	cmp	r4, r1
 8001bfc:	d1f6      	bne.n	8001bec <memchr+0x8>
 8001bfe:	bd10      	pop	{r4, pc}

08001c00 <_read_r>:
 8001c00:	b538      	push	{r3, r4, r5, lr}
 8001c02:	4604      	mov	r4, r0
 8001c04:	4608      	mov	r0, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4d05      	ldr	r5, [pc, #20]	; (8001c20 <_read_r+0x20>)
 8001c0c:	602a      	str	r2, [r5, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f000 f828 	bl	8001c64 <_read>
 8001c14:	1c43      	adds	r3, r0, #1
 8001c16:	d102      	bne.n	8001c1e <_read_r+0x1e>
 8001c18:	682b      	ldr	r3, [r5, #0]
 8001c1a:	b103      	cbz	r3, 8001c1e <_read_r+0x1e>
 8001c1c:	6023      	str	r3, [r4, #0]
 8001c1e:	bd38      	pop	{r3, r4, r5, pc}
 8001c20:	20000160 	.word	0x20000160

08001c24 <_close>:
 8001c24:	2258      	movs	r2, #88	; 0x58
 8001c26:	4b02      	ldr	r3, [pc, #8]	; (8001c30 <_close+0xc>)
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	4770      	bx	lr
 8001c30:	20000160 	.word	0x20000160

08001c34 <_fstat>:
 8001c34:	2258      	movs	r2, #88	; 0x58
 8001c36:	4b02      	ldr	r3, [pc, #8]	; (8001c40 <_fstat+0xc>)
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	4770      	bx	lr
 8001c40:	20000160 	.word	0x20000160

08001c44 <_isatty>:
 8001c44:	2258      	movs	r2, #88	; 0x58
 8001c46:	4b02      	ldr	r3, [pc, #8]	; (8001c50 <_isatty+0xc>)
 8001c48:	2000      	movs	r0, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000160 	.word	0x20000160

08001c54 <_lseek>:
 8001c54:	2258      	movs	r2, #88	; 0x58
 8001c56:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <_lseek+0xc>)
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	4770      	bx	lr
 8001c60:	20000160 	.word	0x20000160

08001c64 <_read>:
 8001c64:	2258      	movs	r2, #88	; 0x58
 8001c66:	4b02      	ldr	r3, [pc, #8]	; (8001c70 <_read+0xc>)
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	4770      	bx	lr
 8001c70:	20000160 	.word	0x20000160

08001c74 <_sbrk>:
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <_sbrk+0x14>)
 8001c76:	4603      	mov	r3, r0
 8001c78:	6811      	ldr	r1, [r2, #0]
 8001c7a:	b909      	cbnz	r1, 8001c80 <_sbrk+0xc>
 8001c7c:	4903      	ldr	r1, [pc, #12]	; (8001c8c <_sbrk+0x18>)
 8001c7e:	6011      	str	r1, [r2, #0]
 8001c80:	6810      	ldr	r0, [r2, #0]
 8001c82:	4403      	add	r3, r0
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4770      	bx	lr
 8001c88:	20000164 	.word	0x20000164
 8001c8c:	20000168 	.word	0x20000168

08001c90 <_write>:
 8001c90:	2258      	movs	r2, #88	; 0x58
 8001c92:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <_write+0xc>)
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	4770      	bx	lr
 8001c9c:	20000160 	.word	0x20000160

08001ca0 <_init>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	bf00      	nop
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr

08001cac <_fini>:
 8001cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cae:	bf00      	nop
 8001cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb2:	bc08      	pop	{r3}
 8001cb4:	469e      	mov	lr, r3
 8001cb6:	4770      	bx	lr
