
embeddedStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001838  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08001968  08001968  00011968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a44  08001a44  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001a44  08001a44  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a44  08001a44  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a44  08001a44  00011a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a48  08001a48  00011a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  08001abc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08001abc  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001029  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000662  00000000  00000000  000210c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00021728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  000218d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000008bc  00000000  00000000  00021a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020ad  00000000  00000000  000222dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058f02  00000000  00000000  00024389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007d28b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dc0  00000000  00000000  0007d2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  0007e09c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  0007e138  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000070 	.word	0x20000070
 800014c:	00000000 	.word	0x00000000
 8000150:	08001950 	.word	0x08001950

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000074 	.word	0x20000074
 800016c:	08001950 	.word	0x08001950

08000170 <GPIO_configureRCC>:
 *  Created on: Jun 5, 2023
 *      Author: nguye
 */
#include "GPIO_configure.h"

void GPIO_configureRCC(char* GPIOx){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	while(*GPIOx){
 8000178:	e020      	b.n	80001bc <GPIO_configureRCC+0x4c>
		if(*GPIOx == 'C') RCC->APB2ENR |= (1 << 4);
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	2b43      	cmp	r3, #67	; 0x43
 8000180:	d105      	bne.n	800018e <GPIO_configureRCC+0x1e>
 8000182:	4b13      	ldr	r3, [pc, #76]	; (80001d0 <GPIO_configureRCC+0x60>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a12      	ldr	r2, [pc, #72]	; (80001d0 <GPIO_configureRCC+0x60>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'B') RCC->APB2ENR |= (1 << 3);
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	2b42      	cmp	r3, #66	; 0x42
 8000194:	d105      	bne.n	80001a2 <GPIO_configureRCC+0x32>
 8000196:	4b0e      	ldr	r3, [pc, #56]	; (80001d0 <GPIO_configureRCC+0x60>)
 8000198:	699b      	ldr	r3, [r3, #24]
 800019a:	4a0d      	ldr	r2, [pc, #52]	; (80001d0 <GPIO_configureRCC+0x60>)
 800019c:	f043 0308 	orr.w	r3, r3, #8
 80001a0:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'A') RCC->APB2ENR |= (1 << 2);
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	2b41      	cmp	r3, #65	; 0x41
 80001a8:	d105      	bne.n	80001b6 <GPIO_configureRCC+0x46>
 80001aa:	4b09      	ldr	r3, [pc, #36]	; (80001d0 <GPIO_configureRCC+0x60>)
 80001ac:	699b      	ldr	r3, [r3, #24]
 80001ae:	4a08      	ldr	r2, [pc, #32]	; (80001d0 <GPIO_configureRCC+0x60>)
 80001b0:	f043 0304 	orr.w	r3, r3, #4
 80001b4:	6193      	str	r3, [r2, #24]
		GPIOx++;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	3301      	adds	r3, #1
 80001ba:	607b      	str	r3, [r7, #4]
	while(*GPIOx){
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d1da      	bne.n	800017a <GPIO_configureRCC+0xa>
	}
}
 80001c4:	bf00      	nop
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40021000 	.word	0x40021000

080001d4 <GPIO_configure>:
void GPIO_configure(GPIO_TypeDef*GPIOx, uint8_t* Pin, uint8_t* mode){
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
	while(*Pin){
 80001e0:	e03e      	b.n	8000260 <GPIO_configure+0x8c>
		if(*Pin > 7){
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	2b07      	cmp	r3, #7
 80001e8:	d91b      	bls.n	8000222 <GPIO_configure+0x4e>
			GPIOx->CRH &= ~(15<<(*Pin * 4 - 32));
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	68ba      	ldr	r2, [r7, #8]
 80001f0:	7812      	ldrb	r2, [r2, #0]
 80001f2:	3a08      	subs	r2, #8
 80001f4:	0092      	lsls	r2, r2, #2
 80001f6:	210f      	movs	r1, #15
 80001f8:	fa01 f202 	lsl.w	r2, r1, r2
 80001fc:	43d2      	mvns	r2, r2
 80001fe:	401a      	ands	r2, r3
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	605a      	str	r2, [r3, #4]
			GPIOx->CRH |= *mode << (*Pin * 4 - 32);
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	687a      	ldr	r2, [r7, #4]
 800020a:	7812      	ldrb	r2, [r2, #0]
 800020c:	4611      	mov	r1, r2
 800020e:	68ba      	ldr	r2, [r7, #8]
 8000210:	7812      	ldrb	r2, [r2, #0]
 8000212:	3a08      	subs	r2, #8
 8000214:	0092      	lsls	r2, r2, #2
 8000216:	fa01 f202 	lsl.w	r2, r1, r2
 800021a:	431a      	orrs	r2, r3
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	e018      	b.n	8000254 <GPIO_configure+0x80>
		}else{
			GPIOx->CRL &= ~(15<<(*Pin * 4));
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	7812      	ldrb	r2, [r2, #0]
 800022a:	0092      	lsls	r2, r2, #2
 800022c:	210f      	movs	r1, #15
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	43d2      	mvns	r2, r2
 8000234:	401a      	ands	r2, r3
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	601a      	str	r2, [r3, #0]
			GPIOx->CRL |= *mode << (*Pin * 4);
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	7812      	ldrb	r2, [r2, #0]
 8000242:	4611      	mov	r1, r2
 8000244:	68ba      	ldr	r2, [r7, #8]
 8000246:	7812      	ldrb	r2, [r2, #0]
 8000248:	0092      	lsls	r2, r2, #2
 800024a:	fa01 f202 	lsl.w	r2, r1, r2
 800024e:	431a      	orrs	r2, r3
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	601a      	str	r2, [r3, #0]
		}
		Pin++;
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	3301      	adds	r3, #1
 8000258:	60bb      	str	r3, [r7, #8]
		mode++;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	3301      	adds	r3, #1
 800025e:	607b      	str	r3, [r7, #4]
	while(*Pin){
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d1bc      	bne.n	80001e2 <GPIO_configure+0xe>
	}
}
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	3714      	adds	r7, #20
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr

08000274 <SystemInitAnh>:
 *      Author: nguye
 */
#include "stm32f103.h"
#include "stm32f1xx.h"

void SystemInitAnh(void){
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000278:	4b07      	ldr	r3, [pc, #28]	; (8000298 <SystemInitAnh+0x24>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a06      	ldr	r2, [pc, #24]	; (8000298 <SystemInitAnh+0x24>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= AFIO_MAPR_SWJ_CFG;
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <SystemInitAnh+0x28>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <SystemInitAnh+0x28>)
 800028a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800028e:	6053      	str	r3, [r2, #4]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40021000 	.word	0x40021000
 800029c:	40010000 	.word	0x40010000

080002a0 <RCC_Configure>:
void RCC_Configure(){
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 80002a4:	4b2b      	ldr	r3, [pc, #172]	; (8000354 <RCC_Configure+0xb4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a2a      	ldr	r2, [pc, #168]	; (8000354 <RCC_Configure+0xb4>)
 80002aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ae:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 80002b0:	bf00      	nop
 80002b2:	4b28      	ldr	r3, [pc, #160]	; (8000354 <RCC_Configure+0xb4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d0f9      	beq.n	80002b2 <RCC_Configure+0x12>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002be:	4b25      	ldr	r3, [pc, #148]	; (8000354 <RCC_Configure+0xb4>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	4a24      	ldr	r2, [pc, #144]	; (8000354 <RCC_Configure+0xb4>)
 80002c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002c8:	61d3      	str	r3, [r2, #28]

	FLASH->ACR |= FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 80002ca:	4b23      	ldr	r3, [pc, #140]	; (8000358 <RCC_Configure+0xb8>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a22      	ldr	r2, [pc, #136]	; (8000358 <RCC_Configure+0xb8>)
 80002d0:	f043 0312 	orr.w	r3, r3, #18
 80002d4:	6013      	str	r3, [r2, #0]
	while (!(FLASH->ACR & FLASH_ACR_PRFTBS));
 80002d6:	bf00      	nop
 80002d8:	4b1f      	ldr	r3, [pc, #124]	; (8000358 <RCC_Configure+0xb8>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f003 0320 	and.w	r3, r3, #32
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0f9      	beq.n	80002d8 <RCC_Configure+0x38>

	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <RCC_Configure+0xb4>)
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	4a1a      	ldr	r2, [pc, #104]	; (8000354 <RCC_Configure+0xb4>)
 80002ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ee:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (7 << 18); // nhân RCC với 9
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <RCC_Configure+0xb4>)
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	4a17      	ldr	r2, [pc, #92]	; (8000354 <RCC_Configure+0xb4>)
 80002f6:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80002fa:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (4 << 8); // chia để bus APB1 max 36
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <RCC_Configure+0xb4>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	4a14      	ldr	r2, [pc, #80]	; (8000354 <RCC_Configure+0xb4>)
 8000302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000306:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (3 << 14); // chia ADC cho 6 = 9M
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <RCC_Configure+0xb4>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	4a11      	ldr	r2, [pc, #68]	; (8000354 <RCC_Configure+0xb4>)
 800030e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000312:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <RCC_Configure+0xb4>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <RCC_Configure+0xb4>)
 800031a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800031e:	6013      	str	r3, [r2, #0]

	while (!(RCC->CR & RCC_CR_PLLRDY));
 8000320:	bf00      	nop
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <RCC_Configure+0xb4>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0f9      	beq.n	8000322 <RCC_Configure+0x82>
	RCC->CFGR |= (2 << 0);
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <RCC_Configure+0xb4>)
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	4a08      	ldr	r2, [pc, #32]	; (8000354 <RCC_Configure+0xb4>)
 8000334:	f043 0302 	orr.w	r3, r3, #2
 8000338:	6053      	str	r3, [r2, #4]
	while (!(RCC->CFGR & (2 << 2)));
 800033a:	bf00      	nop
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <RCC_Configure+0xb4>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	f003 0308 	and.w	r3, r3, #8
 8000344:	2b00      	cmp	r3, #0
 8000346:	d0f9      	beq.n	800033c <RCC_Configure+0x9c>
}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000
 8000358:	40022000 	.word	0x40022000

0800035c <createTask>:
uint8_t numberTask = 0;
uint8_t curent_task = 1;
uint32_t g_tick_count = 0;
TCB_t user_task[MAX_TASK];

void createTask(void (*myTask)(void)){
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  user_task[numberTask+1].task_handler = myTask;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <createTask+0x30>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	3301      	adds	r3, #1
 800036a:	4a09      	ldr	r2, [pc, #36]	; (8000390 <createTask+0x34>)
 800036c:	011b      	lsls	r3, r3, #4
 800036e:	4413      	add	r3, r2
 8000370:	330c      	adds	r3, #12
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	601a      	str	r2, [r3, #0]
  numberTask++;
 8000376:	4b05      	ldr	r3, [pc, #20]	; (800038c <createTask+0x30>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	3301      	adds	r3, #1
 800037c:	b2da      	uxtb	r2, r3
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <createTask+0x30>)
 8000380:	701a      	strb	r2, [r3, #0]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	2000008c 	.word	0x2000008c
 8000390:	20000094 	.word	0x20000094

08000394 <init_systick_timer>:

void init_systick_timer(uint32_t tick_hz){
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	SysTick->LOAD |= ((SYSTICK_TIM_CLK / TICK_HZ) - 1) & 0x00FFFFFF;
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <init_systick_timer+0x2c>)
 800039e:	685a      	ldr	r2, [r3, #4]
 80003a0:	4907      	ldr	r1, [pc, #28]	; (80003c0 <init_systick_timer+0x2c>)
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <init_systick_timer+0x30>)
 80003a4:	4313      	orrs	r3, r2
 80003a6:	604b      	str	r3, [r1, #4]
	SysTick->CTRL |= (7 << 0);
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <init_systick_timer+0x2c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <init_systick_timer+0x2c>)
 80003ae:	f043 0307 	orr.w	r3, r3, #7
 80003b2:	6013      	str	r3, [r2, #0]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	e000e010 	.word	0xe000e010
 80003c4:	0001193f 	.word	0x0001193f

080003c8 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack){
 80003c8:	4603      	mov	r3, r0
	__asm volatile ("MSR MSP, %0": : "r"(sched_top_of_stack));
 80003ca:	f383 8808 	msr	MSP, r3
	__asm volatile ("BX LR");
 80003ce:	4770      	bx	lr
}
 80003d0:	bf00      	nop
	...

080003d4 <init_task_stack>:

void init_task_stack(void (*idleTask)(void)){
 80003d4:	b480      	push	{r7}
 80003d6:	b087      	sub	sp, #28
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	user_task[0].psp_value    = IDLE_STACK_START;
 80003dc:	4b34      	ldr	r3, [pc, #208]	; (80004b0 <init_task_stack+0xdc>)
 80003de:	4a35      	ldr	r2, [pc, #212]	; (80004b4 <init_task_stack+0xe0>)
 80003e0:	601a      	str	r2, [r3, #0]
	user_task[0].task_handler = idleTask;
 80003e2:	4a33      	ldr	r2, [pc, #204]	; (80004b0 <init_task_stack+0xdc>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	60d3      	str	r3, [r2, #12]
	uint32_t *pPSP;
	for(int i = 0; i < numberTask + 1; i++){
 80003e8:	2300      	movs	r3, #0
 80003ea:	613b      	str	r3, [r7, #16]
 80003ec:	e053      	b.n	8000496 <init_task_stack+0xc2>
		user_task[i].curent_state = TASK_RUNNING_STATE;
 80003ee:	4a30      	ldr	r2, [pc, #192]	; (80004b0 <init_task_stack+0xdc>)
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	011b      	lsls	r3, r3, #4
 80003f4:	4413      	add	r3, r2
 80003f6:	3308      	adds	r3, #8
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
		if(i + 1 < numberTask + 1)
 80003fc:	4b2e      	ldr	r3, [pc, #184]	; (80004b8 <init_task_stack+0xe4>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	461a      	mov	r2, r3
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	4293      	cmp	r3, r2
 8000406:	da0c      	bge.n	8000422 <init_task_stack+0x4e>
			user_task[i+1].psp_value = (SRAM_END - (i * SIZE_TASK_STACK));
 8000408:	693b      	ldr	r3, [r7, #16]
 800040a:	025b      	lsls	r3, r3, #9
 800040c:	4619      	mov	r1, r3
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	1c5a      	adds	r2, r3, #1
 8000412:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
 8000416:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800041a:	4925      	ldr	r1, [pc, #148]	; (80004b0 <init_task_stack+0xdc>)
 800041c:	0112      	lsls	r2, r2, #4
 800041e:	440a      	add	r2, r1
 8000420:	6013      	str	r3, [r2, #0]
		pPSP = (uint32_t*) user_task[i].psp_value;
 8000422:	4a23      	ldr	r2, [pc, #140]	; (80004b0 <init_task_stack+0xdc>)
 8000424:	693b      	ldr	r3, [r7, #16]
 8000426:	011b      	lsls	r3, r3, #4
 8000428:	4413      	add	r3, r2
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	617b      	str	r3, [r7, #20]
		pPSP--;
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	3b04      	subs	r3, #4
 8000432:	617b      	str	r3, [r7, #20]
		*pPSP = DUMMY_XPSR;
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800043a:	601a      	str	r2, [r3, #0]
		pPSP--;
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	3b04      	subs	r3, #4
 8000440:	617b      	str	r3, [r7, #20]
		*pPSP = (uint32_t) user_task[i].task_handler;
 8000442:	4a1b      	ldr	r2, [pc, #108]	; (80004b0 <init_task_stack+0xdc>)
 8000444:	693b      	ldr	r3, [r7, #16]
 8000446:	011b      	lsls	r3, r3, #4
 8000448:	4413      	add	r3, r2
 800044a:	330c      	adds	r3, #12
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	461a      	mov	r2, r3
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	601a      	str	r2, [r3, #0]
		pPSP--;
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	3b04      	subs	r3, #4
 8000458:	617b      	str	r3, [r7, #20]
		*pPSP |= 0xFFFFFFFD;
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f063 0202 	orn	r2, r3, #2
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++){
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	e008      	b.n	800047e <init_task_stack+0xaa>
			pPSP--;
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	3b04      	subs	r3, #4
 8000470:	617b      	str	r3, [r7, #20]
			*pPSP = 0;
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++){
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3301      	adds	r3, #1
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	2b0c      	cmp	r3, #12
 8000482:	ddf3      	ble.n	800046c <init_task_stack+0x98>
		}
		user_task[i].psp_value = (uint32_t)pPSP;
 8000484:	697a      	ldr	r2, [r7, #20]
 8000486:	490a      	ldr	r1, [pc, #40]	; (80004b0 <init_task_stack+0xdc>)
 8000488:	693b      	ldr	r3, [r7, #16]
 800048a:	011b      	lsls	r3, r3, #4
 800048c:	440b      	add	r3, r1
 800048e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < numberTask + 1; i++){
 8000490:	693b      	ldr	r3, [r7, #16]
 8000492:	3301      	adds	r3, #1
 8000494:	613b      	str	r3, [r7, #16]
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <init_task_stack+0xe4>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	461a      	mov	r2, r3
 800049c:	693b      	ldr	r3, [r7, #16]
 800049e:	4293      	cmp	r3, r2
 80004a0:	dda5      	ble.n	80003ee <init_task_stack+0x1a>
	}
}
 80004a2:	bf00      	nop
 80004a4:	bf00      	nop
 80004a6:	371c      	adds	r7, #28
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	20000094 	.word	0x20000094
 80004b4:	20004200 	.word	0x20004200
 80004b8:	2000008c 	.word	0x2000008c

080004bc <enable_rpocessor_faults>:

void enable_rpocessor_faults(void){
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
	SCB->SHCSR |= (7 << 16);
 80004c0:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <enable_rpocessor_faults+0x18>)
 80004c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c4:	4a03      	ldr	r2, [pc, #12]	; (80004d4 <enable_rpocessor_faults+0x18>)
 80004c6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80004ca:	6253      	str	r3, [r2, #36]	; 0x24
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <get_psp_value>:

uint32_t get_psp_value(void){
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	return user_task[curent_task].psp_value;
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <get_psp_value+0x18>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <get_psp_value+0x1c>)
 80004e2:	011b      	lsls	r3, r3, #4
 80004e4:	4413      	add	r3, r2
 80004e6:	681b      	ldr	r3, [r3, #0]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000094 	.word	0x20000094

080004f8 <save_psp_value>:

void save_psp_value(uint32_t curent_psp_value){
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	user_task[curent_task].psp_value = curent_psp_value;
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <save_psp_value+0x20>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <save_psp_value+0x24>)
 8000506:	011b      	lsls	r3, r3, #4
 8000508:	4413      	add	r3, r2
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	601a      	str	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	20000000 	.word	0x20000000
 800051c:	20000094 	.word	0x20000094

08000520 <update_next_task>:

void update_next_task(void){
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
	int state = TASK_BLOCK_STATE;
 8000526:	2301      	movs	r3, #1
 8000528:	607b      	str	r3, [r7, #4]
	for (int i =0; i < numberTask + 1; i++){
 800052a:	2300      	movs	r3, #0
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	e025      	b.n	800057c <update_next_task+0x5c>
		curent_task ++;
 8000530:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <update_next_task+0x84>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <update_next_task+0x84>)
 800053a:	701a      	strb	r2, [r3, #0]
		curent_task %= (numberTask + 1);
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <update_next_task+0x84>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	461a      	mov	r2, r3
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <update_next_task+0x88>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	fb92 f1f3 	sdiv	r1, r2, r3
 800054c:	fb01 f303 	mul.w	r3, r1, r3
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <update_next_task+0x84>)
 8000556:	701a      	strb	r2, [r3, #0]
		state = user_task[curent_task].curent_state;
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <update_next_task+0x84>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4a13      	ldr	r2, [pc, #76]	; (80005ac <update_next_task+0x8c>)
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	4413      	add	r3, r2
 8000562:	3308      	adds	r3, #8
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	607b      	str	r3, [r7, #4]
		if((state == TASK_RUNNING_STATE) && (curent_task != 0))
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d103      	bne.n	8000576 <update_next_task+0x56>
 800056e:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <update_next_task+0x84>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d109      	bne.n	800058a <update_next_task+0x6a>
	for (int i =0; i < numberTask + 1; i++){
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <update_next_task+0x88>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	4293      	cmp	r3, r2
 8000586:	ddd3      	ble.n	8000530 <update_next_task+0x10>
 8000588:	e000      	b.n	800058c <update_next_task+0x6c>
			break;
 800058a:	bf00      	nop
	}
	if (state != TASK_RUNNING_STATE)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d002      	beq.n	8000598 <update_next_task+0x78>
		curent_task = 0;
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <update_next_task+0x84>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000000 	.word	0x20000000
 80005a8:	2000008c 	.word	0x2000008c
 80005ac:	20000094 	.word	0x20000094

080005b0 <swich_sp_to_psp>:

__attribute__((naked)) void swich_sp_to_psp(void){
	__asm volatile ("PUSH {LR}");
 80005b0:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 80005b2:	f7ff ff91 	bl	80004d8 <get_psp_value>
	__asm volatile ("MSR PSP, R0");
 80005b6:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");
 80005ba:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile ("MOV R0, #0x02");
 80005be:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 80005c2:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 80005c6:	4770      	bx	lr

}
 80005c8:	bf00      	nop
	...

080005cc <task_delay>:


void task_delay(uint32_t tick_count){
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	DISABLE_IRQ();
 80005d4:	f04f 0001 	mov.w	r0, #1
 80005d8:	f380 8810 	msr	PRIMASK, r0
	extern uint32_t g_tick_count;
	g_tick_count = 0;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <task_delay+0x5c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
	if(curent_task){
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <task_delay+0x60>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d015      	beq.n	8000616 <task_delay+0x4a>
		user_task[curent_task].block_count = tick_count;
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <task_delay+0x60>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4a10      	ldr	r2, [pc, #64]	; (8000630 <task_delay+0x64>)
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	4413      	add	r3, r2
 80005f4:	3304      	adds	r3, #4
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	601a      	str	r2, [r3, #0]
		user_task[curent_task].curent_state = TASK_BLOCK_STATE;
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <task_delay+0x60>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	4a0c      	ldr	r2, [pc, #48]	; (8000630 <task_delay+0x64>)
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	4413      	add	r3, r2
 8000604:	3308      	adds	r3, #8
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <task_delay+0x68>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	4a09      	ldr	r2, [pc, #36]	; (8000634 <task_delay+0x68>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	6053      	str	r3, [r2, #4]
	}
	ENABLE_IRQ();
 8000616:	f04f 0000 	mov.w	r0, #0
 800061a:	f380 8810 	msr	PRIMASK, r0
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	20000090 	.word	0x20000090
 800062c:	20000000 	.word	0x20000000
 8000630:	20000094 	.word	0x20000094
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <unblock_task>:

void unblock_task(void){
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
	for (int i = 1; i < numberTask + 1; i++){
 800063e:	2301      	movs	r3, #1
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	e01b      	b.n	800067c <unblock_task+0x44>
		if (user_task[i].curent_state != TASK_RUNNING_STATE){
 8000644:	4a13      	ldr	r2, [pc, #76]	; (8000694 <unblock_task+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	011b      	lsls	r3, r3, #4
 800064a:	4413      	add	r3, r2
 800064c:	3308      	adds	r3, #8
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d010      	beq.n	8000676 <unblock_task+0x3e>
			if(user_task[i].block_count == g_tick_count){
 8000654:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <unblock_task+0x5c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	011b      	lsls	r3, r3, #4
 800065a:	4413      	add	r3, r2
 800065c:	3304      	adds	r3, #4
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <unblock_task+0x60>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	429a      	cmp	r2, r3
 8000666:	d106      	bne.n	8000676 <unblock_task+0x3e>
				user_task[i].curent_state = TASK_RUNNING_STATE;
 8000668:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <unblock_task+0x5c>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	011b      	lsls	r3, r3, #4
 800066e:	4413      	add	r3, r2
 8000670:	3308      	adds	r3, #8
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < numberTask + 1; i++){
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3301      	adds	r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <unblock_task+0x64>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4293      	cmp	r3, r2
 8000686:	dddd      	ble.n	8000644 <unblock_task+0xc>
			}
		}
	}
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	20000094 	.word	0x20000094
 8000698:	20000090 	.word	0x20000090
 800069c:	2000008c 	.word	0x2000008c

080006a0 <HardFault_Handler>:

void resumeTask(void){
	user_task[curent_task].curent_state = TASK_RUNNING_STATE;
}

void HardFault_Handler(void){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	printf("HardFault_Handler\n");
 80006a4:	4801      	ldr	r0, [pc, #4]	; (80006ac <HardFault_Handler+0xc>)
 80006a6:	f000 f991 	bl	80009cc <puts>
	while(1);
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0xa>
 80006ac:	08001968 	.word	0x08001968

080006b0 <MemManage_Handler>:
}

void MemManage_Handler(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	printf("MemManage_Handler\n");
 80006b4:	4801      	ldr	r0, [pc, #4]	; (80006bc <MemManage_Handler+0xc>)
 80006b6:	f000 f989 	bl	80009cc <puts>
	while(1);
 80006ba:	e7fe      	b.n	80006ba <MemManage_Handler+0xa>
 80006bc:	0800197c 	.word	0x0800197c

080006c0 <BusFault_Handler>:
}

void BusFault_Handler(){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	printf("BusFault_Handler\n");
 80006c4:	4801      	ldr	r0, [pc, #4]	; (80006cc <BusFault_Handler+0xc>)
 80006c6:	f000 f981 	bl	80009cc <puts>
	while(1);
 80006ca:	e7fe      	b.n	80006ca <BusFault_Handler+0xa>
 80006cc:	08001990 	.word	0x08001990

080006d0 <PendSV_Handler>:
}

__attribute__((naked)) void PendSV_Handler(void){
    // Save the current task's context
    __asm volatile ("MRS R0, PSP");
 80006d0:	f3ef 8009 	mrs	r0, PSP
    __asm volatile ("STMDB R0!, {R4-R11}");
 80006d4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    __asm volatile ("PUSH {LR}");
 80006d8:	b500      	push	{lr}
    __asm volatile ("BL save_psp_value");
 80006da:	f7ff ff0d 	bl	80004f8 <save_psp_value>
    __asm volatile ("BL update_next_task");
 80006de:	f7ff ff1f 	bl	8000520 <update_next_task>

    // Load the next task's context
    __asm volatile ("BL get_psp_value");
 80006e2:	f7ff fef9 	bl	80004d8 <get_psp_value>
    __asm volatile ("LDMIA R0!, {R4-R11}");
 80006e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    __asm volatile ("MSR PSP, R0");
 80006ea:	f380 8809 	msr	PSP, r0
    __asm volatile ("POP {LR}");
 80006ee:	f85d eb04 	ldr.w	lr, [sp], #4
    __asm volatile ("BX LR");
 80006f2:	4770      	bx	lr
}
 80006f4:	bf00      	nop
	...

080006f8 <SysTick_Handler>:

void SysTick_Handler(){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	g_tick_count++;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <SysTick_Handler+0x24>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	4a06      	ldr	r2, [pc, #24]	; (800071c <SysTick_Handler+0x24>)
 8000704:	6013      	str	r3, [r2, #0]
	unblock_task();
 8000706:	f7ff ff97 	bl	8000638 <unblock_task>
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <SysTick_Handler+0x28>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	4a04      	ldr	r2, [pc, #16]	; (8000720 <SysTick_Handler+0x28>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6053      	str	r3, [r2, #4]
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000090 	.word	0x20000090
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <main>:
uint8_t GPIOB_Pin[] = {11,12};
uint8_t GPIOB_mode[] = {1,1};


int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	SystemInitAnh();
 8000728:	f7ff fda4 	bl	8000274 <SystemInitAnh>
	RCC_Configure();
 800072c:	f7ff fdb8 	bl	80002a0 <RCC_Configure>

	createTask(task1_handler);
 8000730:	4811      	ldr	r0, [pc, #68]	; (8000778 <main+0x54>)
 8000732:	f7ff fe13 	bl	800035c <createTask>
	createTask(task2_handler);
 8000736:	4811      	ldr	r0, [pc, #68]	; (800077c <main+0x58>)
 8000738:	f7ff fe10 	bl	800035c <createTask>
	createTask(task3_handler);
 800073c:	4810      	ldr	r0, [pc, #64]	; (8000780 <main+0x5c>)
 800073e:	f7ff fe0d 	bl	800035c <createTask>
	createTask(task4_handler);
 8000742:	4810      	ldr	r0, [pc, #64]	; (8000784 <main+0x60>)
 8000744:	f7ff fe0a 	bl	800035c <createTask>

	GPIO_configureRCC("B");
 8000748:	480f      	ldr	r0, [pc, #60]	; (8000788 <main+0x64>)
 800074a:	f7ff fd11 	bl	8000170 <GPIO_configureRCC>
	GPIO_configure((GPIO_TypeDef*)GPIOB, (uint8_t*)GPIOB_Pin ,(uint8_t*)GPIOB_mode);
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <main+0x68>)
 8000750:	490f      	ldr	r1, [pc, #60]	; (8000790 <main+0x6c>)
 8000752:	4810      	ldr	r0, [pc, #64]	; (8000794 <main+0x70>)
 8000754:	f7ff fd3e 	bl	80001d4 <GPIO_configure>

	RTOS_INIT(idleTask);
 8000758:	f7ff feb0 	bl	80004bc <enable_rpocessor_faults>
 800075c:	480e      	ldr	r0, [pc, #56]	; (8000798 <main+0x74>)
 800075e:	f7ff fe33 	bl	80003c8 <init_scheduler_stack>
 8000762:	480e      	ldr	r0, [pc, #56]	; (800079c <main+0x78>)
 8000764:	f7ff fe36 	bl	80003d4 <init_task_stack>
 8000768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076c:	f7ff fe12 	bl	8000394 <init_systick_timer>
 8000770:	f7ff ff1e 	bl	80005b0 <swich_sp_to_psp>

	while (1){
 8000774:	e7fe      	b.n	8000774 <main+0x50>
 8000776:	bf00      	nop
 8000778:	080007a9 	.word	0x080007a9
 800077c:	080007b9 	.word	0x080007b9
 8000780:	080007c9 	.word	0x080007c9
 8000784:	080007e1 	.word	0x080007e1
 8000788:	080019a4 	.word	0x080019a4
 800078c:	20000008 	.word	0x20000008
 8000790:	20000004 	.word	0x20000004
 8000794:	40010c00 	.word	0x40010c00
 8000798:	20004000 	.word	0x20004000
 800079c:	080007a1 	.word	0x080007a1

080007a0 <idleTask>:
	}
}

void idleTask(void){
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
	while(1);
 80007a4:	e7fe      	b.n	80007a4 <idleTask+0x4>
	...

080007a8 <task1_handler>:
}

void task1_handler(void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	while(1){
		printf("oke");
 80007ac:	4801      	ldr	r0, [pc, #4]	; (80007b4 <task1_handler+0xc>)
 80007ae:	f000 f887 	bl	80008c0 <iprintf>
 80007b2:	e7fb      	b.n	80007ac <task1_handler+0x4>
 80007b4:	080019a8 	.word	0x080019a8

080007b8 <task2_handler>:
	}
}
void task2_handler(void){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	while(1){
		printf("oke");
 80007bc:	4801      	ldr	r0, [pc, #4]	; (80007c4 <task2_handler+0xc>)
 80007be:	f000 f87f 	bl	80008c0 <iprintf>
 80007c2:	e7fb      	b.n	80007bc <task2_handler+0x4>
 80007c4:	080019a8 	.word	0x080019a8

080007c8 <task3_handler>:
	}
}
void task3_handler(void){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	while(1){
		task_delay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d0:	f7ff fefc 	bl	80005cc <task_delay>
		printf("oke");
 80007d4:	4801      	ldr	r0, [pc, #4]	; (80007dc <task3_handler+0x14>)
 80007d6:	f000 f873 	bl	80008c0 <iprintf>
		task_delay(1000);
 80007da:	e7f7      	b.n	80007cc <task3_handler+0x4>
 80007dc:	080019a8 	.word	0x080019a8

080007e0 <task4_handler>:
	}
}
void task4_handler(void){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	while(1){
		GPIOB_TOGGLE(12);
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <task4_handler+0x20>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	4a05      	ldr	r2, [pc, #20]	; (8000800 <task4_handler+0x20>)
 80007ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80007ee:	60d3      	str	r3, [r2, #12]
		task_delay(1000);
 80007f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f4:	f7ff feea 	bl	80005cc <task_delay>
		printf("oke");
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <task4_handler+0x24>)
 80007fa:	f000 f861 	bl	80008c0 <iprintf>
		GPIOB_TOGGLE(12);
 80007fe:	e7f1      	b.n	80007e4 <task4_handler+0x4>
 8000800:	40010c00 	.word	0x40010c00
 8000804:	080019a8 	.word	0x080019a8

08000808 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000816:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000818:	f7ff fff6 	bl	8000808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <LoopForever+0x6>)
  ldr r1, =_edata
 800081e:	490d      	ldr	r1, [pc, #52]	; (8000854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <LoopForever+0xe>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000834:	4c0a      	ldr	r4, [pc, #40]	; (8000860 <LoopForever+0x16>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000842:	f000 f811 	bl	8000868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff ff6d 	bl	8000724 <main>

0800084a <LoopForever>:

LoopForever:
  b LoopForever
 800084a:	e7fe      	b.n	800084a <LoopForever>
  ldr   r0, =_estack
 800084c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000858:	08001a4c 	.word	0x08001a4c
  ldr r2, =_sbss
 800085c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000860:	20000128 	.word	0x20000128

08000864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_2_IRQHandler>
	...

08000868 <__libc_init_array>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	2600      	movs	r6, #0
 800086c:	4d0c      	ldr	r5, [pc, #48]	; (80008a0 <__libc_init_array+0x38>)
 800086e:	4c0d      	ldr	r4, [pc, #52]	; (80008a4 <__libc_init_array+0x3c>)
 8000870:	1b64      	subs	r4, r4, r5
 8000872:	10a4      	asrs	r4, r4, #2
 8000874:	42a6      	cmp	r6, r4
 8000876:	d109      	bne.n	800088c <__libc_init_array+0x24>
 8000878:	f001 f86a 	bl	8001950 <_init>
 800087c:	2600      	movs	r6, #0
 800087e:	4d0a      	ldr	r5, [pc, #40]	; (80008a8 <__libc_init_array+0x40>)
 8000880:	4c0a      	ldr	r4, [pc, #40]	; (80008ac <__libc_init_array+0x44>)
 8000882:	1b64      	subs	r4, r4, r5
 8000884:	10a4      	asrs	r4, r4, #2
 8000886:	42a6      	cmp	r6, r4
 8000888:	d105      	bne.n	8000896 <__libc_init_array+0x2e>
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000890:	4798      	blx	r3
 8000892:	3601      	adds	r6, #1
 8000894:	e7ee      	b.n	8000874 <__libc_init_array+0xc>
 8000896:	f855 3b04 	ldr.w	r3, [r5], #4
 800089a:	4798      	blx	r3
 800089c:	3601      	adds	r6, #1
 800089e:	e7f2      	b.n	8000886 <__libc_init_array+0x1e>
 80008a0:	08001a44 	.word	0x08001a44
 80008a4:	08001a44 	.word	0x08001a44
 80008a8:	08001a44 	.word	0x08001a44
 80008ac:	08001a48 	.word	0x08001a48

080008b0 <memset>:
 80008b0:	4603      	mov	r3, r0
 80008b2:	4402      	add	r2, r0
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d100      	bne.n	80008ba <memset+0xa>
 80008b8:	4770      	bx	lr
 80008ba:	f803 1b01 	strb.w	r1, [r3], #1
 80008be:	e7f9      	b.n	80008b4 <memset+0x4>

080008c0 <iprintf>:
 80008c0:	b40f      	push	{r0, r1, r2, r3}
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <iprintf+0x2c>)
 80008c4:	b513      	push	{r0, r1, r4, lr}
 80008c6:	681c      	ldr	r4, [r3, #0]
 80008c8:	b124      	cbz	r4, 80008d4 <iprintf+0x14>
 80008ca:	69a3      	ldr	r3, [r4, #24]
 80008cc:	b913      	cbnz	r3, 80008d4 <iprintf+0x14>
 80008ce:	4620      	mov	r0, r4
 80008d0:	f000 fa5a 	bl	8000d88 <__sinit>
 80008d4:	ab05      	add	r3, sp, #20
 80008d6:	4620      	mov	r0, r4
 80008d8:	9a04      	ldr	r2, [sp, #16]
 80008da:	68a1      	ldr	r1, [r4, #8]
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	f000 fc5d 	bl	800119c <_vfiprintf_r>
 80008e2:	b002      	add	sp, #8
 80008e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr
 80008ec:	2000000c 	.word	0x2000000c

080008f0 <_puts_r>:
 80008f0:	b570      	push	{r4, r5, r6, lr}
 80008f2:	460e      	mov	r6, r1
 80008f4:	4605      	mov	r5, r0
 80008f6:	b118      	cbz	r0, 8000900 <_puts_r+0x10>
 80008f8:	6983      	ldr	r3, [r0, #24]
 80008fa:	b90b      	cbnz	r3, 8000900 <_puts_r+0x10>
 80008fc:	f000 fa44 	bl	8000d88 <__sinit>
 8000900:	69ab      	ldr	r3, [r5, #24]
 8000902:	68ac      	ldr	r4, [r5, #8]
 8000904:	b913      	cbnz	r3, 800090c <_puts_r+0x1c>
 8000906:	4628      	mov	r0, r5
 8000908:	f000 fa3e 	bl	8000d88 <__sinit>
 800090c:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <_puts_r+0xd0>)
 800090e:	429c      	cmp	r4, r3
 8000910:	d120      	bne.n	8000954 <_puts_r+0x64>
 8000912:	686c      	ldr	r4, [r5, #4]
 8000914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000916:	07db      	lsls	r3, r3, #31
 8000918:	d405      	bmi.n	8000926 <_puts_r+0x36>
 800091a:	89a3      	ldrh	r3, [r4, #12]
 800091c:	0598      	lsls	r0, r3, #22
 800091e:	d402      	bmi.n	8000926 <_puts_r+0x36>
 8000920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000922:	f000 facf 	bl	8000ec4 <__retarget_lock_acquire_recursive>
 8000926:	89a3      	ldrh	r3, [r4, #12]
 8000928:	0719      	lsls	r1, r3, #28
 800092a:	d51d      	bpl.n	8000968 <_puts_r+0x78>
 800092c:	6923      	ldr	r3, [r4, #16]
 800092e:	b1db      	cbz	r3, 8000968 <_puts_r+0x78>
 8000930:	3e01      	subs	r6, #1
 8000932:	68a3      	ldr	r3, [r4, #8]
 8000934:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000938:	3b01      	subs	r3, #1
 800093a:	60a3      	str	r3, [r4, #8]
 800093c:	bb39      	cbnz	r1, 800098e <_puts_r+0x9e>
 800093e:	2b00      	cmp	r3, #0
 8000940:	da38      	bge.n	80009b4 <_puts_r+0xc4>
 8000942:	4622      	mov	r2, r4
 8000944:	210a      	movs	r1, #10
 8000946:	4628      	mov	r0, r5
 8000948:	f000 f848 	bl	80009dc <__swbuf_r>
 800094c:	3001      	adds	r0, #1
 800094e:	d011      	beq.n	8000974 <_puts_r+0x84>
 8000950:	250a      	movs	r5, #10
 8000952:	e011      	b.n	8000978 <_puts_r+0x88>
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <_puts_r+0xd4>)
 8000956:	429c      	cmp	r4, r3
 8000958:	d101      	bne.n	800095e <_puts_r+0x6e>
 800095a:	68ac      	ldr	r4, [r5, #8]
 800095c:	e7da      	b.n	8000914 <_puts_r+0x24>
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <_puts_r+0xd8>)
 8000960:	429c      	cmp	r4, r3
 8000962:	bf08      	it	eq
 8000964:	68ec      	ldreq	r4, [r5, #12]
 8000966:	e7d5      	b.n	8000914 <_puts_r+0x24>
 8000968:	4621      	mov	r1, r4
 800096a:	4628      	mov	r0, r5
 800096c:	f000 f888 	bl	8000a80 <__swsetup_r>
 8000970:	2800      	cmp	r0, #0
 8000972:	d0dd      	beq.n	8000930 <_puts_r+0x40>
 8000974:	f04f 35ff 	mov.w	r5, #4294967295
 8000978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800097a:	07da      	lsls	r2, r3, #31
 800097c:	d405      	bmi.n	800098a <_puts_r+0x9a>
 800097e:	89a3      	ldrh	r3, [r4, #12]
 8000980:	059b      	lsls	r3, r3, #22
 8000982:	d402      	bmi.n	800098a <_puts_r+0x9a>
 8000984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000986:	f000 fa9e 	bl	8000ec6 <__retarget_lock_release_recursive>
 800098a:	4628      	mov	r0, r5
 800098c:	bd70      	pop	{r4, r5, r6, pc}
 800098e:	2b00      	cmp	r3, #0
 8000990:	da04      	bge.n	800099c <_puts_r+0xac>
 8000992:	69a2      	ldr	r2, [r4, #24]
 8000994:	429a      	cmp	r2, r3
 8000996:	dc06      	bgt.n	80009a6 <_puts_r+0xb6>
 8000998:	290a      	cmp	r1, #10
 800099a:	d004      	beq.n	80009a6 <_puts_r+0xb6>
 800099c:	6823      	ldr	r3, [r4, #0]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	6022      	str	r2, [r4, #0]
 80009a2:	7019      	strb	r1, [r3, #0]
 80009a4:	e7c5      	b.n	8000932 <_puts_r+0x42>
 80009a6:	4622      	mov	r2, r4
 80009a8:	4628      	mov	r0, r5
 80009aa:	f000 f817 	bl	80009dc <__swbuf_r>
 80009ae:	3001      	adds	r0, #1
 80009b0:	d1bf      	bne.n	8000932 <_puts_r+0x42>
 80009b2:	e7df      	b.n	8000974 <_puts_r+0x84>
 80009b4:	250a      	movs	r5, #10
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	6022      	str	r2, [r4, #0]
 80009bc:	701d      	strb	r5, [r3, #0]
 80009be:	e7db      	b.n	8000978 <_puts_r+0x88>
 80009c0:	080019d0 	.word	0x080019d0
 80009c4:	080019f0 	.word	0x080019f0
 80009c8:	080019b0 	.word	0x080019b0

080009cc <puts>:
 80009cc:	4b02      	ldr	r3, [pc, #8]	; (80009d8 <puts+0xc>)
 80009ce:	4601      	mov	r1, r0
 80009d0:	6818      	ldr	r0, [r3, #0]
 80009d2:	f7ff bf8d 	b.w	80008f0 <_puts_r>
 80009d6:	bf00      	nop
 80009d8:	2000000c 	.word	0x2000000c

080009dc <__swbuf_r>:
 80009dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009de:	460e      	mov	r6, r1
 80009e0:	4614      	mov	r4, r2
 80009e2:	4605      	mov	r5, r0
 80009e4:	b118      	cbz	r0, 80009ee <__swbuf_r+0x12>
 80009e6:	6983      	ldr	r3, [r0, #24]
 80009e8:	b90b      	cbnz	r3, 80009ee <__swbuf_r+0x12>
 80009ea:	f000 f9cd 	bl	8000d88 <__sinit>
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <__swbuf_r+0x98>)
 80009f0:	429c      	cmp	r4, r3
 80009f2:	d12b      	bne.n	8000a4c <__swbuf_r+0x70>
 80009f4:	686c      	ldr	r4, [r5, #4]
 80009f6:	69a3      	ldr	r3, [r4, #24]
 80009f8:	60a3      	str	r3, [r4, #8]
 80009fa:	89a3      	ldrh	r3, [r4, #12]
 80009fc:	071a      	lsls	r2, r3, #28
 80009fe:	d52f      	bpl.n	8000a60 <__swbuf_r+0x84>
 8000a00:	6923      	ldr	r3, [r4, #16]
 8000a02:	b36b      	cbz	r3, 8000a60 <__swbuf_r+0x84>
 8000a04:	6923      	ldr	r3, [r4, #16]
 8000a06:	6820      	ldr	r0, [r4, #0]
 8000a08:	b2f6      	uxtb	r6, r6
 8000a0a:	1ac0      	subs	r0, r0, r3
 8000a0c:	6963      	ldr	r3, [r4, #20]
 8000a0e:	4637      	mov	r7, r6
 8000a10:	4283      	cmp	r3, r0
 8000a12:	dc04      	bgt.n	8000a1e <__swbuf_r+0x42>
 8000a14:	4621      	mov	r1, r4
 8000a16:	4628      	mov	r0, r5
 8000a18:	f000 f922 	bl	8000c60 <_fflush_r>
 8000a1c:	bb30      	cbnz	r0, 8000a6c <__swbuf_r+0x90>
 8000a1e:	68a3      	ldr	r3, [r4, #8]
 8000a20:	3001      	adds	r0, #1
 8000a22:	3b01      	subs	r3, #1
 8000a24:	60a3      	str	r3, [r4, #8]
 8000a26:	6823      	ldr	r3, [r4, #0]
 8000a28:	1c5a      	adds	r2, r3, #1
 8000a2a:	6022      	str	r2, [r4, #0]
 8000a2c:	701e      	strb	r6, [r3, #0]
 8000a2e:	6963      	ldr	r3, [r4, #20]
 8000a30:	4283      	cmp	r3, r0
 8000a32:	d004      	beq.n	8000a3e <__swbuf_r+0x62>
 8000a34:	89a3      	ldrh	r3, [r4, #12]
 8000a36:	07db      	lsls	r3, r3, #31
 8000a38:	d506      	bpl.n	8000a48 <__swbuf_r+0x6c>
 8000a3a:	2e0a      	cmp	r6, #10
 8000a3c:	d104      	bne.n	8000a48 <__swbuf_r+0x6c>
 8000a3e:	4621      	mov	r1, r4
 8000a40:	4628      	mov	r0, r5
 8000a42:	f000 f90d 	bl	8000c60 <_fflush_r>
 8000a46:	b988      	cbnz	r0, 8000a6c <__swbuf_r+0x90>
 8000a48:	4638      	mov	r0, r7
 8000a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <__swbuf_r+0x9c>)
 8000a4e:	429c      	cmp	r4, r3
 8000a50:	d101      	bne.n	8000a56 <__swbuf_r+0x7a>
 8000a52:	68ac      	ldr	r4, [r5, #8]
 8000a54:	e7cf      	b.n	80009f6 <__swbuf_r+0x1a>
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <__swbuf_r+0xa0>)
 8000a58:	429c      	cmp	r4, r3
 8000a5a:	bf08      	it	eq
 8000a5c:	68ec      	ldreq	r4, [r5, #12]
 8000a5e:	e7ca      	b.n	80009f6 <__swbuf_r+0x1a>
 8000a60:	4621      	mov	r1, r4
 8000a62:	4628      	mov	r0, r5
 8000a64:	f000 f80c 	bl	8000a80 <__swsetup_r>
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d0cb      	beq.n	8000a04 <__swbuf_r+0x28>
 8000a6c:	f04f 37ff 	mov.w	r7, #4294967295
 8000a70:	e7ea      	b.n	8000a48 <__swbuf_r+0x6c>
 8000a72:	bf00      	nop
 8000a74:	080019d0 	.word	0x080019d0
 8000a78:	080019f0 	.word	0x080019f0
 8000a7c:	080019b0 	.word	0x080019b0

08000a80 <__swsetup_r>:
 8000a80:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <__swsetup_r+0xcc>)
 8000a82:	b570      	push	{r4, r5, r6, lr}
 8000a84:	681d      	ldr	r5, [r3, #0]
 8000a86:	4606      	mov	r6, r0
 8000a88:	460c      	mov	r4, r1
 8000a8a:	b125      	cbz	r5, 8000a96 <__swsetup_r+0x16>
 8000a8c:	69ab      	ldr	r3, [r5, #24]
 8000a8e:	b913      	cbnz	r3, 8000a96 <__swsetup_r+0x16>
 8000a90:	4628      	mov	r0, r5
 8000a92:	f000 f979 	bl	8000d88 <__sinit>
 8000a96:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <__swsetup_r+0xd0>)
 8000a98:	429c      	cmp	r4, r3
 8000a9a:	d10f      	bne.n	8000abc <__swsetup_r+0x3c>
 8000a9c:	686c      	ldr	r4, [r5, #4]
 8000a9e:	89a3      	ldrh	r3, [r4, #12]
 8000aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000aa4:	0719      	lsls	r1, r3, #28
 8000aa6:	d42c      	bmi.n	8000b02 <__swsetup_r+0x82>
 8000aa8:	06dd      	lsls	r5, r3, #27
 8000aaa:	d411      	bmi.n	8000ad0 <__swsetup_r+0x50>
 8000aac:	2309      	movs	r3, #9
 8000aae:	6033      	str	r3, [r6, #0]
 8000ab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	81a3      	strh	r3, [r4, #12]
 8000aba:	e03e      	b.n	8000b3a <__swsetup_r+0xba>
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <__swsetup_r+0xd4>)
 8000abe:	429c      	cmp	r4, r3
 8000ac0:	d101      	bne.n	8000ac6 <__swsetup_r+0x46>
 8000ac2:	68ac      	ldr	r4, [r5, #8]
 8000ac4:	e7eb      	b.n	8000a9e <__swsetup_r+0x1e>
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <__swsetup_r+0xd8>)
 8000ac8:	429c      	cmp	r4, r3
 8000aca:	bf08      	it	eq
 8000acc:	68ec      	ldreq	r4, [r5, #12]
 8000ace:	e7e6      	b.n	8000a9e <__swsetup_r+0x1e>
 8000ad0:	0758      	lsls	r0, r3, #29
 8000ad2:	d512      	bpl.n	8000afa <__swsetup_r+0x7a>
 8000ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ad6:	b141      	cbz	r1, 8000aea <__swsetup_r+0x6a>
 8000ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000adc:	4299      	cmp	r1, r3
 8000ade:	d002      	beq.n	8000ae6 <__swsetup_r+0x66>
 8000ae0:	4630      	mov	r0, r6
 8000ae2:	f000 fa57 	bl	8000f94 <_free_r>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8000aea:	89a3      	ldrh	r3, [r4, #12]
 8000aec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000af0:	81a3      	strh	r3, [r4, #12]
 8000af2:	2300      	movs	r3, #0
 8000af4:	6063      	str	r3, [r4, #4]
 8000af6:	6923      	ldr	r3, [r4, #16]
 8000af8:	6023      	str	r3, [r4, #0]
 8000afa:	89a3      	ldrh	r3, [r4, #12]
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	81a3      	strh	r3, [r4, #12]
 8000b02:	6923      	ldr	r3, [r4, #16]
 8000b04:	b94b      	cbnz	r3, 8000b1a <__swsetup_r+0x9a>
 8000b06:	89a3      	ldrh	r3, [r4, #12]
 8000b08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b10:	d003      	beq.n	8000b1a <__swsetup_r+0x9a>
 8000b12:	4621      	mov	r1, r4
 8000b14:	4630      	mov	r0, r6
 8000b16:	f000 f9fd 	bl	8000f14 <__smakebuf_r>
 8000b1a:	89a0      	ldrh	r0, [r4, #12]
 8000b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b20:	f010 0301 	ands.w	r3, r0, #1
 8000b24:	d00a      	beq.n	8000b3c <__swsetup_r+0xbc>
 8000b26:	2300      	movs	r3, #0
 8000b28:	60a3      	str	r3, [r4, #8]
 8000b2a:	6963      	ldr	r3, [r4, #20]
 8000b2c:	425b      	negs	r3, r3
 8000b2e:	61a3      	str	r3, [r4, #24]
 8000b30:	6923      	ldr	r3, [r4, #16]
 8000b32:	b943      	cbnz	r3, 8000b46 <__swsetup_r+0xc6>
 8000b34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b38:	d1ba      	bne.n	8000ab0 <__swsetup_r+0x30>
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}
 8000b3c:	0781      	lsls	r1, r0, #30
 8000b3e:	bf58      	it	pl
 8000b40:	6963      	ldrpl	r3, [r4, #20]
 8000b42:	60a3      	str	r3, [r4, #8]
 8000b44:	e7f4      	b.n	8000b30 <__swsetup_r+0xb0>
 8000b46:	2000      	movs	r0, #0
 8000b48:	e7f7      	b.n	8000b3a <__swsetup_r+0xba>
 8000b4a:	bf00      	nop
 8000b4c:	2000000c 	.word	0x2000000c
 8000b50:	080019d0 	.word	0x080019d0
 8000b54:	080019f0 	.word	0x080019f0
 8000b58:	080019b0 	.word	0x080019b0

08000b5c <__sflush_r>:
 8000b5c:	898a      	ldrh	r2, [r1, #12]
 8000b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b60:	4605      	mov	r5, r0
 8000b62:	0710      	lsls	r0, r2, #28
 8000b64:	460c      	mov	r4, r1
 8000b66:	d457      	bmi.n	8000c18 <__sflush_r+0xbc>
 8000b68:	684b      	ldr	r3, [r1, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	dc04      	bgt.n	8000b78 <__sflush_r+0x1c>
 8000b6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	dc01      	bgt.n	8000b78 <__sflush_r+0x1c>
 8000b74:	2000      	movs	r0, #0
 8000b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d0fa      	beq.n	8000b74 <__sflush_r+0x18>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000b84:	682f      	ldr	r7, [r5, #0]
 8000b86:	602b      	str	r3, [r5, #0]
 8000b88:	d032      	beq.n	8000bf0 <__sflush_r+0x94>
 8000b8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000b8c:	89a3      	ldrh	r3, [r4, #12]
 8000b8e:	075a      	lsls	r2, r3, #29
 8000b90:	d505      	bpl.n	8000b9e <__sflush_r+0x42>
 8000b92:	6863      	ldr	r3, [r4, #4]
 8000b94:	1ac0      	subs	r0, r0, r3
 8000b96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b98:	b10b      	cbz	r3, 8000b9e <__sflush_r+0x42>
 8000b9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b9c:	1ac0      	subs	r0, r0, r3
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	6a21      	ldr	r1, [r4, #32]
 8000ba8:	47b0      	blx	r6
 8000baa:	1c43      	adds	r3, r0, #1
 8000bac:	89a3      	ldrh	r3, [r4, #12]
 8000bae:	d106      	bne.n	8000bbe <__sflush_r+0x62>
 8000bb0:	6829      	ldr	r1, [r5, #0]
 8000bb2:	291d      	cmp	r1, #29
 8000bb4:	d82c      	bhi.n	8000c10 <__sflush_r+0xb4>
 8000bb6:	4a29      	ldr	r2, [pc, #164]	; (8000c5c <__sflush_r+0x100>)
 8000bb8:	40ca      	lsrs	r2, r1
 8000bba:	07d6      	lsls	r6, r2, #31
 8000bbc:	d528      	bpl.n	8000c10 <__sflush_r+0xb4>
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	6062      	str	r2, [r4, #4]
 8000bc2:	6922      	ldr	r2, [r4, #16]
 8000bc4:	04d9      	lsls	r1, r3, #19
 8000bc6:	6022      	str	r2, [r4, #0]
 8000bc8:	d504      	bpl.n	8000bd4 <__sflush_r+0x78>
 8000bca:	1c42      	adds	r2, r0, #1
 8000bcc:	d101      	bne.n	8000bd2 <__sflush_r+0x76>
 8000bce:	682b      	ldr	r3, [r5, #0]
 8000bd0:	b903      	cbnz	r3, 8000bd4 <__sflush_r+0x78>
 8000bd2:	6560      	str	r0, [r4, #84]	; 0x54
 8000bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bd6:	602f      	str	r7, [r5, #0]
 8000bd8:	2900      	cmp	r1, #0
 8000bda:	d0cb      	beq.n	8000b74 <__sflush_r+0x18>
 8000bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000be0:	4299      	cmp	r1, r3
 8000be2:	d002      	beq.n	8000bea <__sflush_r+0x8e>
 8000be4:	4628      	mov	r0, r5
 8000be6:	f000 f9d5 	bl	8000f94 <_free_r>
 8000bea:	2000      	movs	r0, #0
 8000bec:	6360      	str	r0, [r4, #52]	; 0x34
 8000bee:	e7c2      	b.n	8000b76 <__sflush_r+0x1a>
 8000bf0:	6a21      	ldr	r1, [r4, #32]
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	4628      	mov	r0, r5
 8000bf6:	47b0      	blx	r6
 8000bf8:	1c41      	adds	r1, r0, #1
 8000bfa:	d1c7      	bne.n	8000b8c <__sflush_r+0x30>
 8000bfc:	682b      	ldr	r3, [r5, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0c4      	beq.n	8000b8c <__sflush_r+0x30>
 8000c02:	2b1d      	cmp	r3, #29
 8000c04:	d001      	beq.n	8000c0a <__sflush_r+0xae>
 8000c06:	2b16      	cmp	r3, #22
 8000c08:	d101      	bne.n	8000c0e <__sflush_r+0xb2>
 8000c0a:	602f      	str	r7, [r5, #0]
 8000c0c:	e7b2      	b.n	8000b74 <__sflush_r+0x18>
 8000c0e:	89a3      	ldrh	r3, [r4, #12]
 8000c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c14:	81a3      	strh	r3, [r4, #12]
 8000c16:	e7ae      	b.n	8000b76 <__sflush_r+0x1a>
 8000c18:	690f      	ldr	r7, [r1, #16]
 8000c1a:	2f00      	cmp	r7, #0
 8000c1c:	d0aa      	beq.n	8000b74 <__sflush_r+0x18>
 8000c1e:	0793      	lsls	r3, r2, #30
 8000c20:	bf18      	it	ne
 8000c22:	2300      	movne	r3, #0
 8000c24:	680e      	ldr	r6, [r1, #0]
 8000c26:	bf08      	it	eq
 8000c28:	694b      	ldreq	r3, [r1, #20]
 8000c2a:	1bf6      	subs	r6, r6, r7
 8000c2c:	600f      	str	r7, [r1, #0]
 8000c2e:	608b      	str	r3, [r1, #8]
 8000c30:	2e00      	cmp	r6, #0
 8000c32:	dd9f      	ble.n	8000b74 <__sflush_r+0x18>
 8000c34:	4633      	mov	r3, r6
 8000c36:	463a      	mov	r2, r7
 8000c38:	4628      	mov	r0, r5
 8000c3a:	6a21      	ldr	r1, [r4, #32]
 8000c3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000c40:	47e0      	blx	ip
 8000c42:	2800      	cmp	r0, #0
 8000c44:	dc06      	bgt.n	8000c54 <__sflush_r+0xf8>
 8000c46:	89a3      	ldrh	r3, [r4, #12]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c50:	81a3      	strh	r3, [r4, #12]
 8000c52:	e790      	b.n	8000b76 <__sflush_r+0x1a>
 8000c54:	4407      	add	r7, r0
 8000c56:	1a36      	subs	r6, r6, r0
 8000c58:	e7ea      	b.n	8000c30 <__sflush_r+0xd4>
 8000c5a:	bf00      	nop
 8000c5c:	20400001 	.word	0x20400001

08000c60 <_fflush_r>:
 8000c60:	b538      	push	{r3, r4, r5, lr}
 8000c62:	690b      	ldr	r3, [r1, #16]
 8000c64:	4605      	mov	r5, r0
 8000c66:	460c      	mov	r4, r1
 8000c68:	b913      	cbnz	r3, 8000c70 <_fflush_r+0x10>
 8000c6a:	2500      	movs	r5, #0
 8000c6c:	4628      	mov	r0, r5
 8000c6e:	bd38      	pop	{r3, r4, r5, pc}
 8000c70:	b118      	cbz	r0, 8000c7a <_fflush_r+0x1a>
 8000c72:	6983      	ldr	r3, [r0, #24]
 8000c74:	b90b      	cbnz	r3, 8000c7a <_fflush_r+0x1a>
 8000c76:	f000 f887 	bl	8000d88 <__sinit>
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <_fflush_r+0x6c>)
 8000c7c:	429c      	cmp	r4, r3
 8000c7e:	d11b      	bne.n	8000cb8 <_fflush_r+0x58>
 8000c80:	686c      	ldr	r4, [r5, #4]
 8000c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0ef      	beq.n	8000c6a <_fflush_r+0xa>
 8000c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000c8c:	07d0      	lsls	r0, r2, #31
 8000c8e:	d404      	bmi.n	8000c9a <_fflush_r+0x3a>
 8000c90:	0599      	lsls	r1, r3, #22
 8000c92:	d402      	bmi.n	8000c9a <_fflush_r+0x3a>
 8000c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c96:	f000 f915 	bl	8000ec4 <__retarget_lock_acquire_recursive>
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	f7ff ff5d 	bl	8000b5c <__sflush_r>
 8000ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ca4:	4605      	mov	r5, r0
 8000ca6:	07da      	lsls	r2, r3, #31
 8000ca8:	d4e0      	bmi.n	8000c6c <_fflush_r+0xc>
 8000caa:	89a3      	ldrh	r3, [r4, #12]
 8000cac:	059b      	lsls	r3, r3, #22
 8000cae:	d4dd      	bmi.n	8000c6c <_fflush_r+0xc>
 8000cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cb2:	f000 f908 	bl	8000ec6 <__retarget_lock_release_recursive>
 8000cb6:	e7d9      	b.n	8000c6c <_fflush_r+0xc>
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <_fflush_r+0x70>)
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	d101      	bne.n	8000cc2 <_fflush_r+0x62>
 8000cbe:	68ac      	ldr	r4, [r5, #8]
 8000cc0:	e7df      	b.n	8000c82 <_fflush_r+0x22>
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <_fflush_r+0x74>)
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	bf08      	it	eq
 8000cc8:	68ec      	ldreq	r4, [r5, #12]
 8000cca:	e7da      	b.n	8000c82 <_fflush_r+0x22>
 8000ccc:	080019d0 	.word	0x080019d0
 8000cd0:	080019f0 	.word	0x080019f0
 8000cd4:	080019b0 	.word	0x080019b0

08000cd8 <std>:
 8000cd8:	2300      	movs	r3, #0
 8000cda:	b510      	push	{r4, lr}
 8000cdc:	4604      	mov	r4, r0
 8000cde:	e9c0 3300 	strd	r3, r3, [r0]
 8000ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ce6:	6083      	str	r3, [r0, #8]
 8000ce8:	8181      	strh	r1, [r0, #12]
 8000cea:	6643      	str	r3, [r0, #100]	; 0x64
 8000cec:	81c2      	strh	r2, [r0, #14]
 8000cee:	6183      	str	r3, [r0, #24]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	2208      	movs	r2, #8
 8000cf4:	305c      	adds	r0, #92	; 0x5c
 8000cf6:	f7ff fddb 	bl	80008b0 <memset>
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <std+0x38>)
 8000cfc:	6224      	str	r4, [r4, #32]
 8000cfe:	6263      	str	r3, [r4, #36]	; 0x24
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <std+0x3c>)
 8000d02:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <std+0x40>)
 8000d06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <std+0x44>)
 8000d0a:	6323      	str	r3, [r4, #48]	; 0x30
 8000d0c:	bd10      	pop	{r4, pc}
 8000d0e:	bf00      	nop
 8000d10:	08001749 	.word	0x08001749
 8000d14:	0800176b 	.word	0x0800176b
 8000d18:	080017a3 	.word	0x080017a3
 8000d1c:	080017c7 	.word	0x080017c7

08000d20 <_cleanup_r>:
 8000d20:	4901      	ldr	r1, [pc, #4]	; (8000d28 <_cleanup_r+0x8>)
 8000d22:	f000 b8af 	b.w	8000e84 <_fwalk_reent>
 8000d26:	bf00      	nop
 8000d28:	08000c61 	.word	0x08000c61

08000d2c <__sfmoreglue>:
 8000d2c:	2268      	movs	r2, #104	; 0x68
 8000d2e:	b570      	push	{r4, r5, r6, lr}
 8000d30:	1e4d      	subs	r5, r1, #1
 8000d32:	4355      	muls	r5, r2
 8000d34:	460e      	mov	r6, r1
 8000d36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000d3a:	f000 f993 	bl	8001064 <_malloc_r>
 8000d3e:	4604      	mov	r4, r0
 8000d40:	b140      	cbz	r0, 8000d54 <__sfmoreglue+0x28>
 8000d42:	2100      	movs	r1, #0
 8000d44:	e9c0 1600 	strd	r1, r6, [r0]
 8000d48:	300c      	adds	r0, #12
 8000d4a:	60a0      	str	r0, [r4, #8]
 8000d4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000d50:	f7ff fdae 	bl	80008b0 <memset>
 8000d54:	4620      	mov	r0, r4
 8000d56:	bd70      	pop	{r4, r5, r6, pc}

08000d58 <__sfp_lock_acquire>:
 8000d58:	4801      	ldr	r0, [pc, #4]	; (8000d60 <__sfp_lock_acquire+0x8>)
 8000d5a:	f000 b8b3 	b.w	8000ec4 <__retarget_lock_acquire_recursive>
 8000d5e:	bf00      	nop
 8000d60:	20000115 	.word	0x20000115

08000d64 <__sfp_lock_release>:
 8000d64:	4801      	ldr	r0, [pc, #4]	; (8000d6c <__sfp_lock_release+0x8>)
 8000d66:	f000 b8ae 	b.w	8000ec6 <__retarget_lock_release_recursive>
 8000d6a:	bf00      	nop
 8000d6c:	20000115 	.word	0x20000115

08000d70 <__sinit_lock_acquire>:
 8000d70:	4801      	ldr	r0, [pc, #4]	; (8000d78 <__sinit_lock_acquire+0x8>)
 8000d72:	f000 b8a7 	b.w	8000ec4 <__retarget_lock_acquire_recursive>
 8000d76:	bf00      	nop
 8000d78:	20000116 	.word	0x20000116

08000d7c <__sinit_lock_release>:
 8000d7c:	4801      	ldr	r0, [pc, #4]	; (8000d84 <__sinit_lock_release+0x8>)
 8000d7e:	f000 b8a2 	b.w	8000ec6 <__retarget_lock_release_recursive>
 8000d82:	bf00      	nop
 8000d84:	20000116 	.word	0x20000116

08000d88 <__sinit>:
 8000d88:	b510      	push	{r4, lr}
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	f7ff fff0 	bl	8000d70 <__sinit_lock_acquire>
 8000d90:	69a3      	ldr	r3, [r4, #24]
 8000d92:	b11b      	cbz	r3, 8000d9c <__sinit+0x14>
 8000d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d98:	f7ff bff0 	b.w	8000d7c <__sinit_lock_release>
 8000d9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000da0:	6523      	str	r3, [r4, #80]	; 0x50
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <__sinit+0x68>)
 8000da4:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <__sinit+0x6c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	62a2      	str	r2, [r4, #40]	; 0x28
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	bf08      	it	eq
 8000dae:	2301      	moveq	r3, #1
 8000db0:	4620      	mov	r0, r4
 8000db2:	bf08      	it	eq
 8000db4:	61a3      	streq	r3, [r4, #24]
 8000db6:	f000 f81f 	bl	8000df8 <__sfp>
 8000dba:	6060      	str	r0, [r4, #4]
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f000 f81b 	bl	8000df8 <__sfp>
 8000dc2:	60a0      	str	r0, [r4, #8]
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f000 f817 	bl	8000df8 <__sfp>
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2104      	movs	r1, #4
 8000dce:	60e0      	str	r0, [r4, #12]
 8000dd0:	6860      	ldr	r0, [r4, #4]
 8000dd2:	f7ff ff81 	bl	8000cd8 <std>
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2109      	movs	r1, #9
 8000dda:	68a0      	ldr	r0, [r4, #8]
 8000ddc:	f7ff ff7c 	bl	8000cd8 <std>
 8000de0:	2202      	movs	r2, #2
 8000de2:	2112      	movs	r1, #18
 8000de4:	68e0      	ldr	r0, [r4, #12]
 8000de6:	f7ff ff77 	bl	8000cd8 <std>
 8000dea:	2301      	movs	r3, #1
 8000dec:	61a3      	str	r3, [r4, #24]
 8000dee:	e7d1      	b.n	8000d94 <__sinit+0xc>
 8000df0:	080019ac 	.word	0x080019ac
 8000df4:	08000d21 	.word	0x08000d21

08000df8 <__sfp>:
 8000df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfa:	4607      	mov	r7, r0
 8000dfc:	f7ff ffac 	bl	8000d58 <__sfp_lock_acquire>
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <__sfp+0x84>)
 8000e02:	681e      	ldr	r6, [r3, #0]
 8000e04:	69b3      	ldr	r3, [r6, #24]
 8000e06:	b913      	cbnz	r3, 8000e0e <__sfp+0x16>
 8000e08:	4630      	mov	r0, r6
 8000e0a:	f7ff ffbd 	bl	8000d88 <__sinit>
 8000e0e:	3648      	adds	r6, #72	; 0x48
 8000e10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	d503      	bpl.n	8000e20 <__sfp+0x28>
 8000e18:	6833      	ldr	r3, [r6, #0]
 8000e1a:	b30b      	cbz	r3, 8000e60 <__sfp+0x68>
 8000e1c:	6836      	ldr	r6, [r6, #0]
 8000e1e:	e7f7      	b.n	8000e10 <__sfp+0x18>
 8000e20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e24:	b9d5      	cbnz	r5, 8000e5c <__sfp+0x64>
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <__sfp+0x88>)
 8000e28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000e2c:	60e3      	str	r3, [r4, #12]
 8000e2e:	6665      	str	r5, [r4, #100]	; 0x64
 8000e30:	f000 f847 	bl	8000ec2 <__retarget_lock_init_recursive>
 8000e34:	f7ff ff96 	bl	8000d64 <__sfp_lock_release>
 8000e38:	2208      	movs	r2, #8
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000e40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000e44:	6025      	str	r5, [r4, #0]
 8000e46:	61a5      	str	r5, [r4, #24]
 8000e48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000e4c:	f7ff fd30 	bl	80008b0 <memset>
 8000e50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000e54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000e58:	4620      	mov	r0, r4
 8000e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e5c:	3468      	adds	r4, #104	; 0x68
 8000e5e:	e7d9      	b.n	8000e14 <__sfp+0x1c>
 8000e60:	2104      	movs	r1, #4
 8000e62:	4638      	mov	r0, r7
 8000e64:	f7ff ff62 	bl	8000d2c <__sfmoreglue>
 8000e68:	4604      	mov	r4, r0
 8000e6a:	6030      	str	r0, [r6, #0]
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	d1d5      	bne.n	8000e1c <__sfp+0x24>
 8000e70:	f7ff ff78 	bl	8000d64 <__sfp_lock_release>
 8000e74:	230c      	movs	r3, #12
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	e7ee      	b.n	8000e58 <__sfp+0x60>
 8000e7a:	bf00      	nop
 8000e7c:	080019ac 	.word	0x080019ac
 8000e80:	ffff0001 	.word	0xffff0001

08000e84 <_fwalk_reent>:
 8000e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e88:	4606      	mov	r6, r0
 8000e8a:	4688      	mov	r8, r1
 8000e8c:	2700      	movs	r7, #0
 8000e8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e96:	f1b9 0901 	subs.w	r9, r9, #1
 8000e9a:	d505      	bpl.n	8000ea8 <_fwalk_reent+0x24>
 8000e9c:	6824      	ldr	r4, [r4, #0]
 8000e9e:	2c00      	cmp	r4, #0
 8000ea0:	d1f7      	bne.n	8000e92 <_fwalk_reent+0xe>
 8000ea2:	4638      	mov	r0, r7
 8000ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ea8:	89ab      	ldrh	r3, [r5, #12]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d907      	bls.n	8000ebe <_fwalk_reent+0x3a>
 8000eae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	d003      	beq.n	8000ebe <_fwalk_reent+0x3a>
 8000eb6:	4629      	mov	r1, r5
 8000eb8:	4630      	mov	r0, r6
 8000eba:	47c0      	blx	r8
 8000ebc:	4307      	orrs	r7, r0
 8000ebe:	3568      	adds	r5, #104	; 0x68
 8000ec0:	e7e9      	b.n	8000e96 <_fwalk_reent+0x12>

08000ec2 <__retarget_lock_init_recursive>:
 8000ec2:	4770      	bx	lr

08000ec4 <__retarget_lock_acquire_recursive>:
 8000ec4:	4770      	bx	lr

08000ec6 <__retarget_lock_release_recursive>:
 8000ec6:	4770      	bx	lr

08000ec8 <__swhatbuf_r>:
 8000ec8:	b570      	push	{r4, r5, r6, lr}
 8000eca:	460e      	mov	r6, r1
 8000ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ed0:	4614      	mov	r4, r2
 8000ed2:	2900      	cmp	r1, #0
 8000ed4:	461d      	mov	r5, r3
 8000ed6:	b096      	sub	sp, #88	; 0x58
 8000ed8:	da08      	bge.n	8000eec <__swhatbuf_r+0x24>
 8000eda:	2200      	movs	r2, #0
 8000edc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000ee0:	602a      	str	r2, [r5, #0]
 8000ee2:	061a      	lsls	r2, r3, #24
 8000ee4:	d410      	bmi.n	8000f08 <__swhatbuf_r+0x40>
 8000ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eea:	e00e      	b.n	8000f0a <__swhatbuf_r+0x42>
 8000eec:	466a      	mov	r2, sp
 8000eee:	f000 fc91 	bl	8001814 <_fstat_r>
 8000ef2:	2800      	cmp	r0, #0
 8000ef4:	dbf1      	blt.n	8000eda <__swhatbuf_r+0x12>
 8000ef6:	9a01      	ldr	r2, [sp, #4]
 8000ef8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000efc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000f00:	425a      	negs	r2, r3
 8000f02:	415a      	adcs	r2, r3
 8000f04:	602a      	str	r2, [r5, #0]
 8000f06:	e7ee      	b.n	8000ee6 <__swhatbuf_r+0x1e>
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	6023      	str	r3, [r4, #0]
 8000f0e:	b016      	add	sp, #88	; 0x58
 8000f10:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f14 <__smakebuf_r>:
 8000f14:	898b      	ldrh	r3, [r1, #12]
 8000f16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f18:	079d      	lsls	r5, r3, #30
 8000f1a:	4606      	mov	r6, r0
 8000f1c:	460c      	mov	r4, r1
 8000f1e:	d507      	bpl.n	8000f30 <__smakebuf_r+0x1c>
 8000f20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f24:	6023      	str	r3, [r4, #0]
 8000f26:	6123      	str	r3, [r4, #16]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	6163      	str	r3, [r4, #20]
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd70      	pop	{r4, r5, r6, pc}
 8000f30:	466a      	mov	r2, sp
 8000f32:	ab01      	add	r3, sp, #4
 8000f34:	f7ff ffc8 	bl	8000ec8 <__swhatbuf_r>
 8000f38:	9900      	ldr	r1, [sp, #0]
 8000f3a:	4605      	mov	r5, r0
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	f000 f891 	bl	8001064 <_malloc_r>
 8000f42:	b948      	cbnz	r0, 8000f58 <__smakebuf_r+0x44>
 8000f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f48:	059a      	lsls	r2, r3, #22
 8000f4a:	d4ef      	bmi.n	8000f2c <__smakebuf_r+0x18>
 8000f4c:	f023 0303 	bic.w	r3, r3, #3
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	81a3      	strh	r3, [r4, #12]
 8000f56:	e7e3      	b.n	8000f20 <__smakebuf_r+0xc>
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <__smakebuf_r+0x7c>)
 8000f5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000f5c:	89a3      	ldrh	r3, [r4, #12]
 8000f5e:	6020      	str	r0, [r4, #0]
 8000f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f64:	81a3      	strh	r3, [r4, #12]
 8000f66:	9b00      	ldr	r3, [sp, #0]
 8000f68:	6120      	str	r0, [r4, #16]
 8000f6a:	6163      	str	r3, [r4, #20]
 8000f6c:	9b01      	ldr	r3, [sp, #4]
 8000f6e:	b15b      	cbz	r3, 8000f88 <__smakebuf_r+0x74>
 8000f70:	4630      	mov	r0, r6
 8000f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f76:	f000 fc5f 	bl	8001838 <_isatty_r>
 8000f7a:	b128      	cbz	r0, 8000f88 <__smakebuf_r+0x74>
 8000f7c:	89a3      	ldrh	r3, [r4, #12]
 8000f7e:	f023 0303 	bic.w	r3, r3, #3
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	81a3      	strh	r3, [r4, #12]
 8000f88:	89a0      	ldrh	r0, [r4, #12]
 8000f8a:	4305      	orrs	r5, r0
 8000f8c:	81a5      	strh	r5, [r4, #12]
 8000f8e:	e7cd      	b.n	8000f2c <__smakebuf_r+0x18>
 8000f90:	08000d21 	.word	0x08000d21

08000f94 <_free_r>:
 8000f94:	b538      	push	{r3, r4, r5, lr}
 8000f96:	4605      	mov	r5, r0
 8000f98:	2900      	cmp	r1, #0
 8000f9a:	d040      	beq.n	800101e <_free_r+0x8a>
 8000f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fa0:	1f0c      	subs	r4, r1, #4
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bfb8      	it	lt
 8000fa6:	18e4      	addlt	r4, r4, r3
 8000fa8:	f000 fc76 	bl	8001898 <__malloc_lock>
 8000fac:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <_free_r+0x8c>)
 8000fae:	6813      	ldr	r3, [r2, #0]
 8000fb0:	b933      	cbnz	r3, 8000fc0 <_free_r+0x2c>
 8000fb2:	6063      	str	r3, [r4, #4]
 8000fb4:	6014      	str	r4, [r2, #0]
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fbc:	f000 bc72 	b.w	80018a4 <__malloc_unlock>
 8000fc0:	42a3      	cmp	r3, r4
 8000fc2:	d908      	bls.n	8000fd6 <_free_r+0x42>
 8000fc4:	6820      	ldr	r0, [r4, #0]
 8000fc6:	1821      	adds	r1, r4, r0
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	bf01      	itttt	eq
 8000fcc:	6819      	ldreq	r1, [r3, #0]
 8000fce:	685b      	ldreq	r3, [r3, #4]
 8000fd0:	1809      	addeq	r1, r1, r0
 8000fd2:	6021      	streq	r1, [r4, #0]
 8000fd4:	e7ed      	b.n	8000fb2 <_free_r+0x1e>
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	b10b      	cbz	r3, 8000fe0 <_free_r+0x4c>
 8000fdc:	42a3      	cmp	r3, r4
 8000fde:	d9fa      	bls.n	8000fd6 <_free_r+0x42>
 8000fe0:	6811      	ldr	r1, [r2, #0]
 8000fe2:	1850      	adds	r0, r2, r1
 8000fe4:	42a0      	cmp	r0, r4
 8000fe6:	d10b      	bne.n	8001000 <_free_r+0x6c>
 8000fe8:	6820      	ldr	r0, [r4, #0]
 8000fea:	4401      	add	r1, r0
 8000fec:	1850      	adds	r0, r2, r1
 8000fee:	4283      	cmp	r3, r0
 8000ff0:	6011      	str	r1, [r2, #0]
 8000ff2:	d1e0      	bne.n	8000fb6 <_free_r+0x22>
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	4401      	add	r1, r0
 8000ffa:	6011      	str	r1, [r2, #0]
 8000ffc:	6053      	str	r3, [r2, #4]
 8000ffe:	e7da      	b.n	8000fb6 <_free_r+0x22>
 8001000:	d902      	bls.n	8001008 <_free_r+0x74>
 8001002:	230c      	movs	r3, #12
 8001004:	602b      	str	r3, [r5, #0]
 8001006:	e7d6      	b.n	8000fb6 <_free_r+0x22>
 8001008:	6820      	ldr	r0, [r4, #0]
 800100a:	1821      	adds	r1, r4, r0
 800100c:	428b      	cmp	r3, r1
 800100e:	bf01      	itttt	eq
 8001010:	6819      	ldreq	r1, [r3, #0]
 8001012:	685b      	ldreq	r3, [r3, #4]
 8001014:	1809      	addeq	r1, r1, r0
 8001016:	6021      	streq	r1, [r4, #0]
 8001018:	6063      	str	r3, [r4, #4]
 800101a:	6054      	str	r4, [r2, #4]
 800101c:	e7cb      	b.n	8000fb6 <_free_r+0x22>
 800101e:	bd38      	pop	{r3, r4, r5, pc}
 8001020:	20000118 	.word	0x20000118

08001024 <sbrk_aligned>:
 8001024:	b570      	push	{r4, r5, r6, lr}
 8001026:	4e0e      	ldr	r6, [pc, #56]	; (8001060 <sbrk_aligned+0x3c>)
 8001028:	460c      	mov	r4, r1
 800102a:	6831      	ldr	r1, [r6, #0]
 800102c:	4605      	mov	r5, r0
 800102e:	b911      	cbnz	r1, 8001036 <sbrk_aligned+0x12>
 8001030:	f000 fb7a 	bl	8001728 <_sbrk_r>
 8001034:	6030      	str	r0, [r6, #0]
 8001036:	4621      	mov	r1, r4
 8001038:	4628      	mov	r0, r5
 800103a:	f000 fb75 	bl	8001728 <_sbrk_r>
 800103e:	1c43      	adds	r3, r0, #1
 8001040:	d00a      	beq.n	8001058 <sbrk_aligned+0x34>
 8001042:	1cc4      	adds	r4, r0, #3
 8001044:	f024 0403 	bic.w	r4, r4, #3
 8001048:	42a0      	cmp	r0, r4
 800104a:	d007      	beq.n	800105c <sbrk_aligned+0x38>
 800104c:	1a21      	subs	r1, r4, r0
 800104e:	4628      	mov	r0, r5
 8001050:	f000 fb6a 	bl	8001728 <_sbrk_r>
 8001054:	3001      	adds	r0, #1
 8001056:	d101      	bne.n	800105c <sbrk_aligned+0x38>
 8001058:	f04f 34ff 	mov.w	r4, #4294967295
 800105c:	4620      	mov	r0, r4
 800105e:	bd70      	pop	{r4, r5, r6, pc}
 8001060:	2000011c 	.word	0x2000011c

08001064 <_malloc_r>:
 8001064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001068:	1ccd      	adds	r5, r1, #3
 800106a:	f025 0503 	bic.w	r5, r5, #3
 800106e:	3508      	adds	r5, #8
 8001070:	2d0c      	cmp	r5, #12
 8001072:	bf38      	it	cc
 8001074:	250c      	movcc	r5, #12
 8001076:	2d00      	cmp	r5, #0
 8001078:	4607      	mov	r7, r0
 800107a:	db01      	blt.n	8001080 <_malloc_r+0x1c>
 800107c:	42a9      	cmp	r1, r5
 800107e:	d905      	bls.n	800108c <_malloc_r+0x28>
 8001080:	230c      	movs	r3, #12
 8001082:	2600      	movs	r6, #0
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	4630      	mov	r0, r6
 8001088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800108c:	4e2e      	ldr	r6, [pc, #184]	; (8001148 <_malloc_r+0xe4>)
 800108e:	f000 fc03 	bl	8001898 <__malloc_lock>
 8001092:	6833      	ldr	r3, [r6, #0]
 8001094:	461c      	mov	r4, r3
 8001096:	bb34      	cbnz	r4, 80010e6 <_malloc_r+0x82>
 8001098:	4629      	mov	r1, r5
 800109a:	4638      	mov	r0, r7
 800109c:	f7ff ffc2 	bl	8001024 <sbrk_aligned>
 80010a0:	1c43      	adds	r3, r0, #1
 80010a2:	4604      	mov	r4, r0
 80010a4:	d14d      	bne.n	8001142 <_malloc_r+0xde>
 80010a6:	6834      	ldr	r4, [r6, #0]
 80010a8:	4626      	mov	r6, r4
 80010aa:	2e00      	cmp	r6, #0
 80010ac:	d140      	bne.n	8001130 <_malloc_r+0xcc>
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	4631      	mov	r1, r6
 80010b2:	4638      	mov	r0, r7
 80010b4:	eb04 0803 	add.w	r8, r4, r3
 80010b8:	f000 fb36 	bl	8001728 <_sbrk_r>
 80010bc:	4580      	cmp	r8, r0
 80010be:	d13a      	bne.n	8001136 <_malloc_r+0xd2>
 80010c0:	6821      	ldr	r1, [r4, #0]
 80010c2:	3503      	adds	r5, #3
 80010c4:	1a6d      	subs	r5, r5, r1
 80010c6:	f025 0503 	bic.w	r5, r5, #3
 80010ca:	3508      	adds	r5, #8
 80010cc:	2d0c      	cmp	r5, #12
 80010ce:	bf38      	it	cc
 80010d0:	250c      	movcc	r5, #12
 80010d2:	4638      	mov	r0, r7
 80010d4:	4629      	mov	r1, r5
 80010d6:	f7ff ffa5 	bl	8001024 <sbrk_aligned>
 80010da:	3001      	adds	r0, #1
 80010dc:	d02b      	beq.n	8001136 <_malloc_r+0xd2>
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	442b      	add	r3, r5
 80010e2:	6023      	str	r3, [r4, #0]
 80010e4:	e00e      	b.n	8001104 <_malloc_r+0xa0>
 80010e6:	6822      	ldr	r2, [r4, #0]
 80010e8:	1b52      	subs	r2, r2, r5
 80010ea:	d41e      	bmi.n	800112a <_malloc_r+0xc6>
 80010ec:	2a0b      	cmp	r2, #11
 80010ee:	d916      	bls.n	800111e <_malloc_r+0xba>
 80010f0:	1961      	adds	r1, r4, r5
 80010f2:	42a3      	cmp	r3, r4
 80010f4:	6025      	str	r5, [r4, #0]
 80010f6:	bf18      	it	ne
 80010f8:	6059      	strne	r1, [r3, #4]
 80010fa:	6863      	ldr	r3, [r4, #4]
 80010fc:	bf08      	it	eq
 80010fe:	6031      	streq	r1, [r6, #0]
 8001100:	5162      	str	r2, [r4, r5]
 8001102:	604b      	str	r3, [r1, #4]
 8001104:	4638      	mov	r0, r7
 8001106:	f104 060b 	add.w	r6, r4, #11
 800110a:	f000 fbcb 	bl	80018a4 <__malloc_unlock>
 800110e:	f026 0607 	bic.w	r6, r6, #7
 8001112:	1d23      	adds	r3, r4, #4
 8001114:	1af2      	subs	r2, r6, r3
 8001116:	d0b6      	beq.n	8001086 <_malloc_r+0x22>
 8001118:	1b9b      	subs	r3, r3, r6
 800111a:	50a3      	str	r3, [r4, r2]
 800111c:	e7b3      	b.n	8001086 <_malloc_r+0x22>
 800111e:	6862      	ldr	r2, [r4, #4]
 8001120:	42a3      	cmp	r3, r4
 8001122:	bf0c      	ite	eq
 8001124:	6032      	streq	r2, [r6, #0]
 8001126:	605a      	strne	r2, [r3, #4]
 8001128:	e7ec      	b.n	8001104 <_malloc_r+0xa0>
 800112a:	4623      	mov	r3, r4
 800112c:	6864      	ldr	r4, [r4, #4]
 800112e:	e7b2      	b.n	8001096 <_malloc_r+0x32>
 8001130:	4634      	mov	r4, r6
 8001132:	6876      	ldr	r6, [r6, #4]
 8001134:	e7b9      	b.n	80010aa <_malloc_r+0x46>
 8001136:	230c      	movs	r3, #12
 8001138:	4638      	mov	r0, r7
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	f000 fbb2 	bl	80018a4 <__malloc_unlock>
 8001140:	e7a1      	b.n	8001086 <_malloc_r+0x22>
 8001142:	6025      	str	r5, [r4, #0]
 8001144:	e7de      	b.n	8001104 <_malloc_r+0xa0>
 8001146:	bf00      	nop
 8001148:	20000118 	.word	0x20000118

0800114c <__sfputc_r>:
 800114c:	6893      	ldr	r3, [r2, #8]
 800114e:	b410      	push	{r4}
 8001150:	3b01      	subs	r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	6093      	str	r3, [r2, #8]
 8001156:	da07      	bge.n	8001168 <__sfputc_r+0x1c>
 8001158:	6994      	ldr	r4, [r2, #24]
 800115a:	42a3      	cmp	r3, r4
 800115c:	db01      	blt.n	8001162 <__sfputc_r+0x16>
 800115e:	290a      	cmp	r1, #10
 8001160:	d102      	bne.n	8001168 <__sfputc_r+0x1c>
 8001162:	bc10      	pop	{r4}
 8001164:	f7ff bc3a 	b.w	80009dc <__swbuf_r>
 8001168:	6813      	ldr	r3, [r2, #0]
 800116a:	1c58      	adds	r0, r3, #1
 800116c:	6010      	str	r0, [r2, #0]
 800116e:	7019      	strb	r1, [r3, #0]
 8001170:	4608      	mov	r0, r1
 8001172:	bc10      	pop	{r4}
 8001174:	4770      	bx	lr

08001176 <__sfputs_r>:
 8001176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001178:	4606      	mov	r6, r0
 800117a:	460f      	mov	r7, r1
 800117c:	4614      	mov	r4, r2
 800117e:	18d5      	adds	r5, r2, r3
 8001180:	42ac      	cmp	r4, r5
 8001182:	d101      	bne.n	8001188 <__sfputs_r+0x12>
 8001184:	2000      	movs	r0, #0
 8001186:	e007      	b.n	8001198 <__sfputs_r+0x22>
 8001188:	463a      	mov	r2, r7
 800118a:	4630      	mov	r0, r6
 800118c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001190:	f7ff ffdc 	bl	800114c <__sfputc_r>
 8001194:	1c43      	adds	r3, r0, #1
 8001196:	d1f3      	bne.n	8001180 <__sfputs_r+0xa>
 8001198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800119c <_vfiprintf_r>:
 800119c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011a0:	460d      	mov	r5, r1
 80011a2:	4614      	mov	r4, r2
 80011a4:	4698      	mov	r8, r3
 80011a6:	4606      	mov	r6, r0
 80011a8:	b09d      	sub	sp, #116	; 0x74
 80011aa:	b118      	cbz	r0, 80011b4 <_vfiprintf_r+0x18>
 80011ac:	6983      	ldr	r3, [r0, #24]
 80011ae:	b90b      	cbnz	r3, 80011b4 <_vfiprintf_r+0x18>
 80011b0:	f7ff fdea 	bl	8000d88 <__sinit>
 80011b4:	4b89      	ldr	r3, [pc, #548]	; (80013dc <_vfiprintf_r+0x240>)
 80011b6:	429d      	cmp	r5, r3
 80011b8:	d11b      	bne.n	80011f2 <_vfiprintf_r+0x56>
 80011ba:	6875      	ldr	r5, [r6, #4]
 80011bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80011be:	07d9      	lsls	r1, r3, #31
 80011c0:	d405      	bmi.n	80011ce <_vfiprintf_r+0x32>
 80011c2:	89ab      	ldrh	r3, [r5, #12]
 80011c4:	059a      	lsls	r2, r3, #22
 80011c6:	d402      	bmi.n	80011ce <_vfiprintf_r+0x32>
 80011c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80011ca:	f7ff fe7b 	bl	8000ec4 <__retarget_lock_acquire_recursive>
 80011ce:	89ab      	ldrh	r3, [r5, #12]
 80011d0:	071b      	lsls	r3, r3, #28
 80011d2:	d501      	bpl.n	80011d8 <_vfiprintf_r+0x3c>
 80011d4:	692b      	ldr	r3, [r5, #16]
 80011d6:	b9eb      	cbnz	r3, 8001214 <_vfiprintf_r+0x78>
 80011d8:	4629      	mov	r1, r5
 80011da:	4630      	mov	r0, r6
 80011dc:	f7ff fc50 	bl	8000a80 <__swsetup_r>
 80011e0:	b1c0      	cbz	r0, 8001214 <_vfiprintf_r+0x78>
 80011e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80011e4:	07dc      	lsls	r4, r3, #31
 80011e6:	d50e      	bpl.n	8001206 <_vfiprintf_r+0x6a>
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	b01d      	add	sp, #116	; 0x74
 80011ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011f2:	4b7b      	ldr	r3, [pc, #492]	; (80013e0 <_vfiprintf_r+0x244>)
 80011f4:	429d      	cmp	r5, r3
 80011f6:	d101      	bne.n	80011fc <_vfiprintf_r+0x60>
 80011f8:	68b5      	ldr	r5, [r6, #8]
 80011fa:	e7df      	b.n	80011bc <_vfiprintf_r+0x20>
 80011fc:	4b79      	ldr	r3, [pc, #484]	; (80013e4 <_vfiprintf_r+0x248>)
 80011fe:	429d      	cmp	r5, r3
 8001200:	bf08      	it	eq
 8001202:	68f5      	ldreq	r5, [r6, #12]
 8001204:	e7da      	b.n	80011bc <_vfiprintf_r+0x20>
 8001206:	89ab      	ldrh	r3, [r5, #12]
 8001208:	0598      	lsls	r0, r3, #22
 800120a:	d4ed      	bmi.n	80011e8 <_vfiprintf_r+0x4c>
 800120c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800120e:	f7ff fe5a 	bl	8000ec6 <__retarget_lock_release_recursive>
 8001212:	e7e9      	b.n	80011e8 <_vfiprintf_r+0x4c>
 8001214:	2300      	movs	r3, #0
 8001216:	9309      	str	r3, [sp, #36]	; 0x24
 8001218:	2320      	movs	r3, #32
 800121a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800121e:	2330      	movs	r3, #48	; 0x30
 8001220:	f04f 0901 	mov.w	r9, #1
 8001224:	f8cd 800c 	str.w	r8, [sp, #12]
 8001228:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80013e8 <_vfiprintf_r+0x24c>
 800122c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001230:	4623      	mov	r3, r4
 8001232:	469a      	mov	sl, r3
 8001234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001238:	b10a      	cbz	r2, 800123e <_vfiprintf_r+0xa2>
 800123a:	2a25      	cmp	r2, #37	; 0x25
 800123c:	d1f9      	bne.n	8001232 <_vfiprintf_r+0x96>
 800123e:	ebba 0b04 	subs.w	fp, sl, r4
 8001242:	d00b      	beq.n	800125c <_vfiprintf_r+0xc0>
 8001244:	465b      	mov	r3, fp
 8001246:	4622      	mov	r2, r4
 8001248:	4629      	mov	r1, r5
 800124a:	4630      	mov	r0, r6
 800124c:	f7ff ff93 	bl	8001176 <__sfputs_r>
 8001250:	3001      	adds	r0, #1
 8001252:	f000 80aa 	beq.w	80013aa <_vfiprintf_r+0x20e>
 8001256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001258:	445a      	add	r2, fp
 800125a:	9209      	str	r2, [sp, #36]	; 0x24
 800125c:	f89a 3000 	ldrb.w	r3, [sl]
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80a2 	beq.w	80013aa <_vfiprintf_r+0x20e>
 8001266:	2300      	movs	r3, #0
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001270:	f10a 0a01 	add.w	sl, sl, #1
 8001274:	9304      	str	r3, [sp, #16]
 8001276:	9307      	str	r3, [sp, #28]
 8001278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800127c:	931a      	str	r3, [sp, #104]	; 0x68
 800127e:	4654      	mov	r4, sl
 8001280:	2205      	movs	r2, #5
 8001282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001286:	4858      	ldr	r0, [pc, #352]	; (80013e8 <_vfiprintf_r+0x24c>)
 8001288:	f000 faf8 	bl	800187c <memchr>
 800128c:	9a04      	ldr	r2, [sp, #16]
 800128e:	b9d8      	cbnz	r0, 80012c8 <_vfiprintf_r+0x12c>
 8001290:	06d1      	lsls	r1, r2, #27
 8001292:	bf44      	itt	mi
 8001294:	2320      	movmi	r3, #32
 8001296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800129a:	0713      	lsls	r3, r2, #28
 800129c:	bf44      	itt	mi
 800129e:	232b      	movmi	r3, #43	; 0x2b
 80012a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80012a4:	f89a 3000 	ldrb.w	r3, [sl]
 80012a8:	2b2a      	cmp	r3, #42	; 0x2a
 80012aa:	d015      	beq.n	80012d8 <_vfiprintf_r+0x13c>
 80012ac:	4654      	mov	r4, sl
 80012ae:	2000      	movs	r0, #0
 80012b0:	f04f 0c0a 	mov.w	ip, #10
 80012b4:	9a07      	ldr	r2, [sp, #28]
 80012b6:	4621      	mov	r1, r4
 80012b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012bc:	3b30      	subs	r3, #48	; 0x30
 80012be:	2b09      	cmp	r3, #9
 80012c0:	d94e      	bls.n	8001360 <_vfiprintf_r+0x1c4>
 80012c2:	b1b0      	cbz	r0, 80012f2 <_vfiprintf_r+0x156>
 80012c4:	9207      	str	r2, [sp, #28]
 80012c6:	e014      	b.n	80012f2 <_vfiprintf_r+0x156>
 80012c8:	eba0 0308 	sub.w	r3, r0, r8
 80012cc:	fa09 f303 	lsl.w	r3, r9, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	46a2      	mov	sl, r4
 80012d4:	9304      	str	r3, [sp, #16]
 80012d6:	e7d2      	b.n	800127e <_vfiprintf_r+0xe2>
 80012d8:	9b03      	ldr	r3, [sp, #12]
 80012da:	1d19      	adds	r1, r3, #4
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	9103      	str	r1, [sp, #12]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bfbb      	ittet	lt
 80012e4:	425b      	neglt	r3, r3
 80012e6:	f042 0202 	orrlt.w	r2, r2, #2
 80012ea:	9307      	strge	r3, [sp, #28]
 80012ec:	9307      	strlt	r3, [sp, #28]
 80012ee:	bfb8      	it	lt
 80012f0:	9204      	strlt	r2, [sp, #16]
 80012f2:	7823      	ldrb	r3, [r4, #0]
 80012f4:	2b2e      	cmp	r3, #46	; 0x2e
 80012f6:	d10c      	bne.n	8001312 <_vfiprintf_r+0x176>
 80012f8:	7863      	ldrb	r3, [r4, #1]
 80012fa:	2b2a      	cmp	r3, #42	; 0x2a
 80012fc:	d135      	bne.n	800136a <_vfiprintf_r+0x1ce>
 80012fe:	9b03      	ldr	r3, [sp, #12]
 8001300:	3402      	adds	r4, #2
 8001302:	1d1a      	adds	r2, r3, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	9203      	str	r2, [sp, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	bfb8      	it	lt
 800130c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001310:	9305      	str	r3, [sp, #20]
 8001312:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80013ec <_vfiprintf_r+0x250>
 8001316:	2203      	movs	r2, #3
 8001318:	4650      	mov	r0, sl
 800131a:	7821      	ldrb	r1, [r4, #0]
 800131c:	f000 faae 	bl	800187c <memchr>
 8001320:	b140      	cbz	r0, 8001334 <_vfiprintf_r+0x198>
 8001322:	2340      	movs	r3, #64	; 0x40
 8001324:	eba0 000a 	sub.w	r0, r0, sl
 8001328:	fa03 f000 	lsl.w	r0, r3, r0
 800132c:	9b04      	ldr	r3, [sp, #16]
 800132e:	3401      	adds	r4, #1
 8001330:	4303      	orrs	r3, r0
 8001332:	9304      	str	r3, [sp, #16]
 8001334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001338:	2206      	movs	r2, #6
 800133a:	482d      	ldr	r0, [pc, #180]	; (80013f0 <_vfiprintf_r+0x254>)
 800133c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001340:	f000 fa9c 	bl	800187c <memchr>
 8001344:	2800      	cmp	r0, #0
 8001346:	d03f      	beq.n	80013c8 <_vfiprintf_r+0x22c>
 8001348:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <_vfiprintf_r+0x258>)
 800134a:	bb1b      	cbnz	r3, 8001394 <_vfiprintf_r+0x1f8>
 800134c:	9b03      	ldr	r3, [sp, #12]
 800134e:	3307      	adds	r3, #7
 8001350:	f023 0307 	bic.w	r3, r3, #7
 8001354:	3308      	adds	r3, #8
 8001356:	9303      	str	r3, [sp, #12]
 8001358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800135a:	443b      	add	r3, r7
 800135c:	9309      	str	r3, [sp, #36]	; 0x24
 800135e:	e767      	b.n	8001230 <_vfiprintf_r+0x94>
 8001360:	460c      	mov	r4, r1
 8001362:	2001      	movs	r0, #1
 8001364:	fb0c 3202 	mla	r2, ip, r2, r3
 8001368:	e7a5      	b.n	80012b6 <_vfiprintf_r+0x11a>
 800136a:	2300      	movs	r3, #0
 800136c:	f04f 0c0a 	mov.w	ip, #10
 8001370:	4619      	mov	r1, r3
 8001372:	3401      	adds	r4, #1
 8001374:	9305      	str	r3, [sp, #20]
 8001376:	4620      	mov	r0, r4
 8001378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800137c:	3a30      	subs	r2, #48	; 0x30
 800137e:	2a09      	cmp	r2, #9
 8001380:	d903      	bls.n	800138a <_vfiprintf_r+0x1ee>
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0c5      	beq.n	8001312 <_vfiprintf_r+0x176>
 8001386:	9105      	str	r1, [sp, #20]
 8001388:	e7c3      	b.n	8001312 <_vfiprintf_r+0x176>
 800138a:	4604      	mov	r4, r0
 800138c:	2301      	movs	r3, #1
 800138e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001392:	e7f0      	b.n	8001376 <_vfiprintf_r+0x1da>
 8001394:	ab03      	add	r3, sp, #12
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	462a      	mov	r2, r5
 800139a:	4630      	mov	r0, r6
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <_vfiprintf_r+0x25c>)
 800139e:	a904      	add	r1, sp, #16
 80013a0:	f3af 8000 	nop.w
 80013a4:	4607      	mov	r7, r0
 80013a6:	1c78      	adds	r0, r7, #1
 80013a8:	d1d6      	bne.n	8001358 <_vfiprintf_r+0x1bc>
 80013aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80013ac:	07d9      	lsls	r1, r3, #31
 80013ae:	d405      	bmi.n	80013bc <_vfiprintf_r+0x220>
 80013b0:	89ab      	ldrh	r3, [r5, #12]
 80013b2:	059a      	lsls	r2, r3, #22
 80013b4:	d402      	bmi.n	80013bc <_vfiprintf_r+0x220>
 80013b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80013b8:	f7ff fd85 	bl	8000ec6 <__retarget_lock_release_recursive>
 80013bc:	89ab      	ldrh	r3, [r5, #12]
 80013be:	065b      	lsls	r3, r3, #25
 80013c0:	f53f af12 	bmi.w	80011e8 <_vfiprintf_r+0x4c>
 80013c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80013c6:	e711      	b.n	80011ec <_vfiprintf_r+0x50>
 80013c8:	ab03      	add	r3, sp, #12
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	462a      	mov	r2, r5
 80013ce:	4630      	mov	r0, r6
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <_vfiprintf_r+0x25c>)
 80013d2:	a904      	add	r1, sp, #16
 80013d4:	f000 f882 	bl	80014dc <_printf_i>
 80013d8:	e7e4      	b.n	80013a4 <_vfiprintf_r+0x208>
 80013da:	bf00      	nop
 80013dc:	080019d0 	.word	0x080019d0
 80013e0:	080019f0 	.word	0x080019f0
 80013e4:	080019b0 	.word	0x080019b0
 80013e8:	08001a10 	.word	0x08001a10
 80013ec:	08001a16 	.word	0x08001a16
 80013f0:	08001a1a 	.word	0x08001a1a
 80013f4:	00000000 	.word	0x00000000
 80013f8:	08001177 	.word	0x08001177

080013fc <_printf_common>:
 80013fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001400:	4616      	mov	r6, r2
 8001402:	4699      	mov	r9, r3
 8001404:	688a      	ldr	r2, [r1, #8]
 8001406:	690b      	ldr	r3, [r1, #16]
 8001408:	4607      	mov	r7, r0
 800140a:	4293      	cmp	r3, r2
 800140c:	bfb8      	it	lt
 800140e:	4613      	movlt	r3, r2
 8001410:	6033      	str	r3, [r6, #0]
 8001412:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001416:	460c      	mov	r4, r1
 8001418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800141c:	b10a      	cbz	r2, 8001422 <_printf_common+0x26>
 800141e:	3301      	adds	r3, #1
 8001420:	6033      	str	r3, [r6, #0]
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	0699      	lsls	r1, r3, #26
 8001426:	bf42      	ittt	mi
 8001428:	6833      	ldrmi	r3, [r6, #0]
 800142a:	3302      	addmi	r3, #2
 800142c:	6033      	strmi	r3, [r6, #0]
 800142e:	6825      	ldr	r5, [r4, #0]
 8001430:	f015 0506 	ands.w	r5, r5, #6
 8001434:	d106      	bne.n	8001444 <_printf_common+0x48>
 8001436:	f104 0a19 	add.w	sl, r4, #25
 800143a:	68e3      	ldr	r3, [r4, #12]
 800143c:	6832      	ldr	r2, [r6, #0]
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	42ab      	cmp	r3, r5
 8001442:	dc28      	bgt.n	8001496 <_printf_common+0x9a>
 8001444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001448:	1e13      	subs	r3, r2, #0
 800144a:	6822      	ldr	r2, [r4, #0]
 800144c:	bf18      	it	ne
 800144e:	2301      	movne	r3, #1
 8001450:	0692      	lsls	r2, r2, #26
 8001452:	d42d      	bmi.n	80014b0 <_printf_common+0xb4>
 8001454:	4649      	mov	r1, r9
 8001456:	4638      	mov	r0, r7
 8001458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800145c:	47c0      	blx	r8
 800145e:	3001      	adds	r0, #1
 8001460:	d020      	beq.n	80014a4 <_printf_common+0xa8>
 8001462:	6823      	ldr	r3, [r4, #0]
 8001464:	68e5      	ldr	r5, [r4, #12]
 8001466:	f003 0306 	and.w	r3, r3, #6
 800146a:	2b04      	cmp	r3, #4
 800146c:	bf18      	it	ne
 800146e:	2500      	movne	r5, #0
 8001470:	6832      	ldr	r2, [r6, #0]
 8001472:	f04f 0600 	mov.w	r6, #0
 8001476:	68a3      	ldr	r3, [r4, #8]
 8001478:	bf08      	it	eq
 800147a:	1aad      	subeq	r5, r5, r2
 800147c:	6922      	ldr	r2, [r4, #16]
 800147e:	bf08      	it	eq
 8001480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001484:	4293      	cmp	r3, r2
 8001486:	bfc4      	itt	gt
 8001488:	1a9b      	subgt	r3, r3, r2
 800148a:	18ed      	addgt	r5, r5, r3
 800148c:	341a      	adds	r4, #26
 800148e:	42b5      	cmp	r5, r6
 8001490:	d11a      	bne.n	80014c8 <_printf_common+0xcc>
 8001492:	2000      	movs	r0, #0
 8001494:	e008      	b.n	80014a8 <_printf_common+0xac>
 8001496:	2301      	movs	r3, #1
 8001498:	4652      	mov	r2, sl
 800149a:	4649      	mov	r1, r9
 800149c:	4638      	mov	r0, r7
 800149e:	47c0      	blx	r8
 80014a0:	3001      	adds	r0, #1
 80014a2:	d103      	bne.n	80014ac <_printf_common+0xb0>
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014ac:	3501      	adds	r5, #1
 80014ae:	e7c4      	b.n	800143a <_printf_common+0x3e>
 80014b0:	2030      	movs	r0, #48	; 0x30
 80014b2:	18e1      	adds	r1, r4, r3
 80014b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80014be:	4422      	add	r2, r4
 80014c0:	3302      	adds	r3, #2
 80014c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80014c6:	e7c5      	b.n	8001454 <_printf_common+0x58>
 80014c8:	2301      	movs	r3, #1
 80014ca:	4622      	mov	r2, r4
 80014cc:	4649      	mov	r1, r9
 80014ce:	4638      	mov	r0, r7
 80014d0:	47c0      	blx	r8
 80014d2:	3001      	adds	r0, #1
 80014d4:	d0e6      	beq.n	80014a4 <_printf_common+0xa8>
 80014d6:	3601      	adds	r6, #1
 80014d8:	e7d9      	b.n	800148e <_printf_common+0x92>
	...

080014dc <_printf_i>:
 80014dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80014e0:	7e0f      	ldrb	r7, [r1, #24]
 80014e2:	4691      	mov	r9, r2
 80014e4:	2f78      	cmp	r7, #120	; 0x78
 80014e6:	4680      	mov	r8, r0
 80014e8:	460c      	mov	r4, r1
 80014ea:	469a      	mov	sl, r3
 80014ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80014ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80014f2:	d807      	bhi.n	8001504 <_printf_i+0x28>
 80014f4:	2f62      	cmp	r7, #98	; 0x62
 80014f6:	d80a      	bhi.n	800150e <_printf_i+0x32>
 80014f8:	2f00      	cmp	r7, #0
 80014fa:	f000 80d9 	beq.w	80016b0 <_printf_i+0x1d4>
 80014fe:	2f58      	cmp	r7, #88	; 0x58
 8001500:	f000 80a4 	beq.w	800164c <_printf_i+0x170>
 8001504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800150c:	e03a      	b.n	8001584 <_printf_i+0xa8>
 800150e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001512:	2b15      	cmp	r3, #21
 8001514:	d8f6      	bhi.n	8001504 <_printf_i+0x28>
 8001516:	a101      	add	r1, pc, #4	; (adr r1, 800151c <_printf_i+0x40>)
 8001518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800151c:	08001575 	.word	0x08001575
 8001520:	08001589 	.word	0x08001589
 8001524:	08001505 	.word	0x08001505
 8001528:	08001505 	.word	0x08001505
 800152c:	08001505 	.word	0x08001505
 8001530:	08001505 	.word	0x08001505
 8001534:	08001589 	.word	0x08001589
 8001538:	08001505 	.word	0x08001505
 800153c:	08001505 	.word	0x08001505
 8001540:	08001505 	.word	0x08001505
 8001544:	08001505 	.word	0x08001505
 8001548:	08001697 	.word	0x08001697
 800154c:	080015b9 	.word	0x080015b9
 8001550:	08001679 	.word	0x08001679
 8001554:	08001505 	.word	0x08001505
 8001558:	08001505 	.word	0x08001505
 800155c:	080016b9 	.word	0x080016b9
 8001560:	08001505 	.word	0x08001505
 8001564:	080015b9 	.word	0x080015b9
 8001568:	08001505 	.word	0x08001505
 800156c:	08001505 	.word	0x08001505
 8001570:	08001681 	.word	0x08001681
 8001574:	682b      	ldr	r3, [r5, #0]
 8001576:	1d1a      	adds	r2, r3, #4
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	602a      	str	r2, [r5, #0]
 800157c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001584:	2301      	movs	r3, #1
 8001586:	e0a4      	b.n	80016d2 <_printf_i+0x1f6>
 8001588:	6820      	ldr	r0, [r4, #0]
 800158a:	6829      	ldr	r1, [r5, #0]
 800158c:	0606      	lsls	r6, r0, #24
 800158e:	f101 0304 	add.w	r3, r1, #4
 8001592:	d50a      	bpl.n	80015aa <_printf_i+0xce>
 8001594:	680e      	ldr	r6, [r1, #0]
 8001596:	602b      	str	r3, [r5, #0]
 8001598:	2e00      	cmp	r6, #0
 800159a:	da03      	bge.n	80015a4 <_printf_i+0xc8>
 800159c:	232d      	movs	r3, #45	; 0x2d
 800159e:	4276      	negs	r6, r6
 80015a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015a4:	230a      	movs	r3, #10
 80015a6:	485e      	ldr	r0, [pc, #376]	; (8001720 <_printf_i+0x244>)
 80015a8:	e019      	b.n	80015de <_printf_i+0x102>
 80015aa:	680e      	ldr	r6, [r1, #0]
 80015ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80015b0:	602b      	str	r3, [r5, #0]
 80015b2:	bf18      	it	ne
 80015b4:	b236      	sxthne	r6, r6
 80015b6:	e7ef      	b.n	8001598 <_printf_i+0xbc>
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	6820      	ldr	r0, [r4, #0]
 80015bc:	1d19      	adds	r1, r3, #4
 80015be:	6029      	str	r1, [r5, #0]
 80015c0:	0601      	lsls	r1, r0, #24
 80015c2:	d501      	bpl.n	80015c8 <_printf_i+0xec>
 80015c4:	681e      	ldr	r6, [r3, #0]
 80015c6:	e002      	b.n	80015ce <_printf_i+0xf2>
 80015c8:	0646      	lsls	r6, r0, #25
 80015ca:	d5fb      	bpl.n	80015c4 <_printf_i+0xe8>
 80015cc:	881e      	ldrh	r6, [r3, #0]
 80015ce:	2f6f      	cmp	r7, #111	; 0x6f
 80015d0:	bf0c      	ite	eq
 80015d2:	2308      	moveq	r3, #8
 80015d4:	230a      	movne	r3, #10
 80015d6:	4852      	ldr	r0, [pc, #328]	; (8001720 <_printf_i+0x244>)
 80015d8:	2100      	movs	r1, #0
 80015da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80015de:	6865      	ldr	r5, [r4, #4]
 80015e0:	2d00      	cmp	r5, #0
 80015e2:	bfa8      	it	ge
 80015e4:	6821      	ldrge	r1, [r4, #0]
 80015e6:	60a5      	str	r5, [r4, #8]
 80015e8:	bfa4      	itt	ge
 80015ea:	f021 0104 	bicge.w	r1, r1, #4
 80015ee:	6021      	strge	r1, [r4, #0]
 80015f0:	b90e      	cbnz	r6, 80015f6 <_printf_i+0x11a>
 80015f2:	2d00      	cmp	r5, #0
 80015f4:	d04d      	beq.n	8001692 <_printf_i+0x1b6>
 80015f6:	4615      	mov	r5, r2
 80015f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80015fc:	fb03 6711 	mls	r7, r3, r1, r6
 8001600:	5dc7      	ldrb	r7, [r0, r7]
 8001602:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001606:	4637      	mov	r7, r6
 8001608:	42bb      	cmp	r3, r7
 800160a:	460e      	mov	r6, r1
 800160c:	d9f4      	bls.n	80015f8 <_printf_i+0x11c>
 800160e:	2b08      	cmp	r3, #8
 8001610:	d10b      	bne.n	800162a <_printf_i+0x14e>
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	07de      	lsls	r6, r3, #31
 8001616:	d508      	bpl.n	800162a <_printf_i+0x14e>
 8001618:	6923      	ldr	r3, [r4, #16]
 800161a:	6861      	ldr	r1, [r4, #4]
 800161c:	4299      	cmp	r1, r3
 800161e:	bfde      	ittt	le
 8001620:	2330      	movle	r3, #48	; 0x30
 8001622:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001626:	f105 35ff 	addle.w	r5, r5, #4294967295
 800162a:	1b52      	subs	r2, r2, r5
 800162c:	6122      	str	r2, [r4, #16]
 800162e:	464b      	mov	r3, r9
 8001630:	4621      	mov	r1, r4
 8001632:	4640      	mov	r0, r8
 8001634:	f8cd a000 	str.w	sl, [sp]
 8001638:	aa03      	add	r2, sp, #12
 800163a:	f7ff fedf 	bl	80013fc <_printf_common>
 800163e:	3001      	adds	r0, #1
 8001640:	d14c      	bne.n	80016dc <_printf_i+0x200>
 8001642:	f04f 30ff 	mov.w	r0, #4294967295
 8001646:	b004      	add	sp, #16
 8001648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800164c:	4834      	ldr	r0, [pc, #208]	; (8001720 <_printf_i+0x244>)
 800164e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001652:	6829      	ldr	r1, [r5, #0]
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	f851 6b04 	ldr.w	r6, [r1], #4
 800165a:	6029      	str	r1, [r5, #0]
 800165c:	061d      	lsls	r5, r3, #24
 800165e:	d514      	bpl.n	800168a <_printf_i+0x1ae>
 8001660:	07df      	lsls	r7, r3, #31
 8001662:	bf44      	itt	mi
 8001664:	f043 0320 	orrmi.w	r3, r3, #32
 8001668:	6023      	strmi	r3, [r4, #0]
 800166a:	b91e      	cbnz	r6, 8001674 <_printf_i+0x198>
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	f023 0320 	bic.w	r3, r3, #32
 8001672:	6023      	str	r3, [r4, #0]
 8001674:	2310      	movs	r3, #16
 8001676:	e7af      	b.n	80015d8 <_printf_i+0xfc>
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	f043 0320 	orr.w	r3, r3, #32
 800167e:	6023      	str	r3, [r4, #0]
 8001680:	2378      	movs	r3, #120	; 0x78
 8001682:	4828      	ldr	r0, [pc, #160]	; (8001724 <_printf_i+0x248>)
 8001684:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001688:	e7e3      	b.n	8001652 <_printf_i+0x176>
 800168a:	0659      	lsls	r1, r3, #25
 800168c:	bf48      	it	mi
 800168e:	b2b6      	uxthmi	r6, r6
 8001690:	e7e6      	b.n	8001660 <_printf_i+0x184>
 8001692:	4615      	mov	r5, r2
 8001694:	e7bb      	b.n	800160e <_printf_i+0x132>
 8001696:	682b      	ldr	r3, [r5, #0]
 8001698:	6826      	ldr	r6, [r4, #0]
 800169a:	1d18      	adds	r0, r3, #4
 800169c:	6961      	ldr	r1, [r4, #20]
 800169e:	6028      	str	r0, [r5, #0]
 80016a0:	0635      	lsls	r5, r6, #24
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	d501      	bpl.n	80016aa <_printf_i+0x1ce>
 80016a6:	6019      	str	r1, [r3, #0]
 80016a8:	e002      	b.n	80016b0 <_printf_i+0x1d4>
 80016aa:	0670      	lsls	r0, r6, #25
 80016ac:	d5fb      	bpl.n	80016a6 <_printf_i+0x1ca>
 80016ae:	8019      	strh	r1, [r3, #0]
 80016b0:	2300      	movs	r3, #0
 80016b2:	4615      	mov	r5, r2
 80016b4:	6123      	str	r3, [r4, #16]
 80016b6:	e7ba      	b.n	800162e <_printf_i+0x152>
 80016b8:	682b      	ldr	r3, [r5, #0]
 80016ba:	2100      	movs	r1, #0
 80016bc:	1d1a      	adds	r2, r3, #4
 80016be:	602a      	str	r2, [r5, #0]
 80016c0:	681d      	ldr	r5, [r3, #0]
 80016c2:	6862      	ldr	r2, [r4, #4]
 80016c4:	4628      	mov	r0, r5
 80016c6:	f000 f8d9 	bl	800187c <memchr>
 80016ca:	b108      	cbz	r0, 80016d0 <_printf_i+0x1f4>
 80016cc:	1b40      	subs	r0, r0, r5
 80016ce:	6060      	str	r0, [r4, #4]
 80016d0:	6863      	ldr	r3, [r4, #4]
 80016d2:	6123      	str	r3, [r4, #16]
 80016d4:	2300      	movs	r3, #0
 80016d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80016da:	e7a8      	b.n	800162e <_printf_i+0x152>
 80016dc:	462a      	mov	r2, r5
 80016de:	4649      	mov	r1, r9
 80016e0:	4640      	mov	r0, r8
 80016e2:	6923      	ldr	r3, [r4, #16]
 80016e4:	47d0      	blx	sl
 80016e6:	3001      	adds	r0, #1
 80016e8:	d0ab      	beq.n	8001642 <_printf_i+0x166>
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	079b      	lsls	r3, r3, #30
 80016ee:	d413      	bmi.n	8001718 <_printf_i+0x23c>
 80016f0:	68e0      	ldr	r0, [r4, #12]
 80016f2:	9b03      	ldr	r3, [sp, #12]
 80016f4:	4298      	cmp	r0, r3
 80016f6:	bfb8      	it	lt
 80016f8:	4618      	movlt	r0, r3
 80016fa:	e7a4      	b.n	8001646 <_printf_i+0x16a>
 80016fc:	2301      	movs	r3, #1
 80016fe:	4632      	mov	r2, r6
 8001700:	4649      	mov	r1, r9
 8001702:	4640      	mov	r0, r8
 8001704:	47d0      	blx	sl
 8001706:	3001      	adds	r0, #1
 8001708:	d09b      	beq.n	8001642 <_printf_i+0x166>
 800170a:	3501      	adds	r5, #1
 800170c:	68e3      	ldr	r3, [r4, #12]
 800170e:	9903      	ldr	r1, [sp, #12]
 8001710:	1a5b      	subs	r3, r3, r1
 8001712:	42ab      	cmp	r3, r5
 8001714:	dcf2      	bgt.n	80016fc <_printf_i+0x220>
 8001716:	e7eb      	b.n	80016f0 <_printf_i+0x214>
 8001718:	2500      	movs	r5, #0
 800171a:	f104 0619 	add.w	r6, r4, #25
 800171e:	e7f5      	b.n	800170c <_printf_i+0x230>
 8001720:	08001a21 	.word	0x08001a21
 8001724:	08001a32 	.word	0x08001a32

08001728 <_sbrk_r>:
 8001728:	b538      	push	{r3, r4, r5, lr}
 800172a:	2300      	movs	r3, #0
 800172c:	4d05      	ldr	r5, [pc, #20]	; (8001744 <_sbrk_r+0x1c>)
 800172e:	4604      	mov	r4, r0
 8001730:	4608      	mov	r0, r1
 8001732:	602b      	str	r3, [r5, #0]
 8001734:	f000 f8f6 	bl	8001924 <_sbrk>
 8001738:	1c43      	adds	r3, r0, #1
 800173a:	d102      	bne.n	8001742 <_sbrk_r+0x1a>
 800173c:	682b      	ldr	r3, [r5, #0]
 800173e:	b103      	cbz	r3, 8001742 <_sbrk_r+0x1a>
 8001740:	6023      	str	r3, [r4, #0]
 8001742:	bd38      	pop	{r3, r4, r5, pc}
 8001744:	20000120 	.word	0x20000120

08001748 <__sread>:
 8001748:	b510      	push	{r4, lr}
 800174a:	460c      	mov	r4, r1
 800174c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001750:	f000 f8ae 	bl	80018b0 <_read_r>
 8001754:	2800      	cmp	r0, #0
 8001756:	bfab      	itete	ge
 8001758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800175a:	89a3      	ldrhlt	r3, [r4, #12]
 800175c:	181b      	addge	r3, r3, r0
 800175e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001762:	bfac      	ite	ge
 8001764:	6563      	strge	r3, [r4, #84]	; 0x54
 8001766:	81a3      	strhlt	r3, [r4, #12]
 8001768:	bd10      	pop	{r4, pc}

0800176a <__swrite>:
 800176a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800176e:	461f      	mov	r7, r3
 8001770:	898b      	ldrh	r3, [r1, #12]
 8001772:	4605      	mov	r5, r0
 8001774:	05db      	lsls	r3, r3, #23
 8001776:	460c      	mov	r4, r1
 8001778:	4616      	mov	r6, r2
 800177a:	d505      	bpl.n	8001788 <__swrite+0x1e>
 800177c:	2302      	movs	r3, #2
 800177e:	2200      	movs	r2, #0
 8001780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001784:	f000 f868 	bl	8001858 <_lseek_r>
 8001788:	89a3      	ldrh	r3, [r4, #12]
 800178a:	4632      	mov	r2, r6
 800178c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001790:	81a3      	strh	r3, [r4, #12]
 8001792:	4628      	mov	r0, r5
 8001794:	463b      	mov	r3, r7
 8001796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800179a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800179e:	f000 b817 	b.w	80017d0 <_write_r>

080017a2 <__sseek>:
 80017a2:	b510      	push	{r4, lr}
 80017a4:	460c      	mov	r4, r1
 80017a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017aa:	f000 f855 	bl	8001858 <_lseek_r>
 80017ae:	1c43      	adds	r3, r0, #1
 80017b0:	89a3      	ldrh	r3, [r4, #12]
 80017b2:	bf15      	itete	ne
 80017b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80017b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80017ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80017be:	81a3      	strheq	r3, [r4, #12]
 80017c0:	bf18      	it	ne
 80017c2:	81a3      	strhne	r3, [r4, #12]
 80017c4:	bd10      	pop	{r4, pc}

080017c6 <__sclose>:
 80017c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017ca:	f000 b813 	b.w	80017f4 <_close_r>
	...

080017d0 <_write_r>:
 80017d0:	b538      	push	{r3, r4, r5, lr}
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	2200      	movs	r2, #0
 80017da:	4d05      	ldr	r5, [pc, #20]	; (80017f0 <_write_r+0x20>)
 80017dc:	602a      	str	r2, [r5, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	f000 f8ae 	bl	8001940 <_write>
 80017e4:	1c43      	adds	r3, r0, #1
 80017e6:	d102      	bne.n	80017ee <_write_r+0x1e>
 80017e8:	682b      	ldr	r3, [r5, #0]
 80017ea:	b103      	cbz	r3, 80017ee <_write_r+0x1e>
 80017ec:	6023      	str	r3, [r4, #0]
 80017ee:	bd38      	pop	{r3, r4, r5, pc}
 80017f0:	20000120 	.word	0x20000120

080017f4 <_close_r>:
 80017f4:	b538      	push	{r3, r4, r5, lr}
 80017f6:	2300      	movs	r3, #0
 80017f8:	4d05      	ldr	r5, [pc, #20]	; (8001810 <_close_r+0x1c>)
 80017fa:	4604      	mov	r4, r0
 80017fc:	4608      	mov	r0, r1
 80017fe:	602b      	str	r3, [r5, #0]
 8001800:	f000 f868 	bl	80018d4 <_close>
 8001804:	1c43      	adds	r3, r0, #1
 8001806:	d102      	bne.n	800180e <_close_r+0x1a>
 8001808:	682b      	ldr	r3, [r5, #0]
 800180a:	b103      	cbz	r3, 800180e <_close_r+0x1a>
 800180c:	6023      	str	r3, [r4, #0]
 800180e:	bd38      	pop	{r3, r4, r5, pc}
 8001810:	20000120 	.word	0x20000120

08001814 <_fstat_r>:
 8001814:	b538      	push	{r3, r4, r5, lr}
 8001816:	2300      	movs	r3, #0
 8001818:	4d06      	ldr	r5, [pc, #24]	; (8001834 <_fstat_r+0x20>)
 800181a:	4604      	mov	r4, r0
 800181c:	4608      	mov	r0, r1
 800181e:	4611      	mov	r1, r2
 8001820:	602b      	str	r3, [r5, #0]
 8001822:	f000 f85f 	bl	80018e4 <_fstat>
 8001826:	1c43      	adds	r3, r0, #1
 8001828:	d102      	bne.n	8001830 <_fstat_r+0x1c>
 800182a:	682b      	ldr	r3, [r5, #0]
 800182c:	b103      	cbz	r3, 8001830 <_fstat_r+0x1c>
 800182e:	6023      	str	r3, [r4, #0]
 8001830:	bd38      	pop	{r3, r4, r5, pc}
 8001832:	bf00      	nop
 8001834:	20000120 	.word	0x20000120

08001838 <_isatty_r>:
 8001838:	b538      	push	{r3, r4, r5, lr}
 800183a:	2300      	movs	r3, #0
 800183c:	4d05      	ldr	r5, [pc, #20]	; (8001854 <_isatty_r+0x1c>)
 800183e:	4604      	mov	r4, r0
 8001840:	4608      	mov	r0, r1
 8001842:	602b      	str	r3, [r5, #0]
 8001844:	f000 f856 	bl	80018f4 <_isatty>
 8001848:	1c43      	adds	r3, r0, #1
 800184a:	d102      	bne.n	8001852 <_isatty_r+0x1a>
 800184c:	682b      	ldr	r3, [r5, #0]
 800184e:	b103      	cbz	r3, 8001852 <_isatty_r+0x1a>
 8001850:	6023      	str	r3, [r4, #0]
 8001852:	bd38      	pop	{r3, r4, r5, pc}
 8001854:	20000120 	.word	0x20000120

08001858 <_lseek_r>:
 8001858:	b538      	push	{r3, r4, r5, lr}
 800185a:	4604      	mov	r4, r0
 800185c:	4608      	mov	r0, r1
 800185e:	4611      	mov	r1, r2
 8001860:	2200      	movs	r2, #0
 8001862:	4d05      	ldr	r5, [pc, #20]	; (8001878 <_lseek_r+0x20>)
 8001864:	602a      	str	r2, [r5, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	f000 f84c 	bl	8001904 <_lseek>
 800186c:	1c43      	adds	r3, r0, #1
 800186e:	d102      	bne.n	8001876 <_lseek_r+0x1e>
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	b103      	cbz	r3, 8001876 <_lseek_r+0x1e>
 8001874:	6023      	str	r3, [r4, #0]
 8001876:	bd38      	pop	{r3, r4, r5, pc}
 8001878:	20000120 	.word	0x20000120

0800187c <memchr>:
 800187c:	4603      	mov	r3, r0
 800187e:	b510      	push	{r4, lr}
 8001880:	b2c9      	uxtb	r1, r1
 8001882:	4402      	add	r2, r0
 8001884:	4293      	cmp	r3, r2
 8001886:	4618      	mov	r0, r3
 8001888:	d101      	bne.n	800188e <memchr+0x12>
 800188a:	2000      	movs	r0, #0
 800188c:	e003      	b.n	8001896 <memchr+0x1a>
 800188e:	7804      	ldrb	r4, [r0, #0]
 8001890:	3301      	adds	r3, #1
 8001892:	428c      	cmp	r4, r1
 8001894:	d1f6      	bne.n	8001884 <memchr+0x8>
 8001896:	bd10      	pop	{r4, pc}

08001898 <__malloc_lock>:
 8001898:	4801      	ldr	r0, [pc, #4]	; (80018a0 <__malloc_lock+0x8>)
 800189a:	f7ff bb13 	b.w	8000ec4 <__retarget_lock_acquire_recursive>
 800189e:	bf00      	nop
 80018a0:	20000114 	.word	0x20000114

080018a4 <__malloc_unlock>:
 80018a4:	4801      	ldr	r0, [pc, #4]	; (80018ac <__malloc_unlock+0x8>)
 80018a6:	f7ff bb0e 	b.w	8000ec6 <__retarget_lock_release_recursive>
 80018aa:	bf00      	nop
 80018ac:	20000114 	.word	0x20000114

080018b0 <_read_r>:
 80018b0:	b538      	push	{r3, r4, r5, lr}
 80018b2:	4604      	mov	r4, r0
 80018b4:	4608      	mov	r0, r1
 80018b6:	4611      	mov	r1, r2
 80018b8:	2200      	movs	r2, #0
 80018ba:	4d05      	ldr	r5, [pc, #20]	; (80018d0 <_read_r+0x20>)
 80018bc:	602a      	str	r2, [r5, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	f000 f828 	bl	8001914 <_read>
 80018c4:	1c43      	adds	r3, r0, #1
 80018c6:	d102      	bne.n	80018ce <_read_r+0x1e>
 80018c8:	682b      	ldr	r3, [r5, #0]
 80018ca:	b103      	cbz	r3, 80018ce <_read_r+0x1e>
 80018cc:	6023      	str	r3, [r4, #0]
 80018ce:	bd38      	pop	{r3, r4, r5, pc}
 80018d0:	20000120 	.word	0x20000120

080018d4 <_close>:
 80018d4:	2258      	movs	r2, #88	; 0x58
 80018d6:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <_close+0xc>)
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	4770      	bx	lr
 80018e0:	20000120 	.word	0x20000120

080018e4 <_fstat>:
 80018e4:	2258      	movs	r2, #88	; 0x58
 80018e6:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <_fstat+0xc>)
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	4770      	bx	lr
 80018f0:	20000120 	.word	0x20000120

080018f4 <_isatty>:
 80018f4:	2258      	movs	r2, #88	; 0x58
 80018f6:	4b02      	ldr	r3, [pc, #8]	; (8001900 <_isatty+0xc>)
 80018f8:	2000      	movs	r0, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000120 	.word	0x20000120

08001904 <_lseek>:
 8001904:	2258      	movs	r2, #88	; 0x58
 8001906:	4b02      	ldr	r3, [pc, #8]	; (8001910 <_lseek+0xc>)
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	4770      	bx	lr
 8001910:	20000120 	.word	0x20000120

08001914 <_read>:
 8001914:	2258      	movs	r2, #88	; 0x58
 8001916:	4b02      	ldr	r3, [pc, #8]	; (8001920 <_read+0xc>)
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	4770      	bx	lr
 8001920:	20000120 	.word	0x20000120

08001924 <_sbrk>:
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <_sbrk+0x14>)
 8001926:	4603      	mov	r3, r0
 8001928:	6811      	ldr	r1, [r2, #0]
 800192a:	b909      	cbnz	r1, 8001930 <_sbrk+0xc>
 800192c:	4903      	ldr	r1, [pc, #12]	; (800193c <_sbrk+0x18>)
 800192e:	6011      	str	r1, [r2, #0]
 8001930:	6810      	ldr	r0, [r2, #0]
 8001932:	4403      	add	r3, r0
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4770      	bx	lr
 8001938:	20000124 	.word	0x20000124
 800193c:	20000128 	.word	0x20000128

08001940 <_write>:
 8001940:	2258      	movs	r2, #88	; 0x58
 8001942:	4b02      	ldr	r3, [pc, #8]	; (800194c <_write+0xc>)
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	4770      	bx	lr
 800194c:	20000120 	.word	0x20000120

08001950 <_init>:
 8001950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001952:	bf00      	nop
 8001954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001956:	bc08      	pop	{r3}
 8001958:	469e      	mov	lr, r3
 800195a:	4770      	bx	lr

0800195c <_fini>:
 800195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195e:	bf00      	nop
 8001960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001962:	bc08      	pop	{r3}
 8001964:	469e      	mov	lr, r3
 8001966:	4770      	bx	lr
