
embeddedStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013f0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08001520  08001520  00011520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016c4  080016c4  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  080016c4  080016c4  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016c4  080016c4  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016c4  080016c4  000116c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016c8  080016c8  000116c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080016cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  200000a4  08001770  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08001770  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a42  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007f6  00000000  00000000  00021b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00022308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000128  00000000  00000000  00022480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000074f  00000000  00000000  000225a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000230b  00000000  00000000  00022cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058d85  00000000  00000000  00025002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007dd87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b7c  00000000  00000000  0007ddd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      000000df  00000000  00000000  0007e954  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000a4 	.word	0x200000a4
 800014c:	00000000 	.word	0x00000000
 8000150:	08001508 	.word	0x08001508

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000a8 	.word	0x200000a8
 800016c:	08001508 	.word	0x08001508

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <GPIO_configureRCC>:
 *  Created on: Jun 5, 2023
 *      Author: nguye
 */
#include "GPIO_configure.h"

void GPIO_configureRCC(char* GPIOx){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	while(*GPIOx){
 8000188:	e020      	b.n	80001cc <GPIO_configureRCC+0x4c>
		if(*GPIOx == 'C') RCC->APB2ENR |= (1 << 4);
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	2b43      	cmp	r3, #67	; 0x43
 8000190:	d105      	bne.n	800019e <GPIO_configureRCC+0x1e>
 8000192:	4b13      	ldr	r3, [pc, #76]	; (80001e0 <GPIO_configureRCC+0x60>)
 8000194:	699b      	ldr	r3, [r3, #24]
 8000196:	4a12      	ldr	r2, [pc, #72]	; (80001e0 <GPIO_configureRCC+0x60>)
 8000198:	f043 0310 	orr.w	r3, r3, #16
 800019c:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'B') RCC->APB2ENR |= (1 << 3);
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b42      	cmp	r3, #66	; 0x42
 80001a4:	d105      	bne.n	80001b2 <GPIO_configureRCC+0x32>
 80001a6:	4b0e      	ldr	r3, [pc, #56]	; (80001e0 <GPIO_configureRCC+0x60>)
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	4a0d      	ldr	r2, [pc, #52]	; (80001e0 <GPIO_configureRCC+0x60>)
 80001ac:	f043 0308 	orr.w	r3, r3, #8
 80001b0:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'A') RCC->APB2ENR |= (1 << 2);
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b41      	cmp	r3, #65	; 0x41
 80001b8:	d105      	bne.n	80001c6 <GPIO_configureRCC+0x46>
 80001ba:	4b09      	ldr	r3, [pc, #36]	; (80001e0 <GPIO_configureRCC+0x60>)
 80001bc:	699b      	ldr	r3, [r3, #24]
 80001be:	4a08      	ldr	r2, [pc, #32]	; (80001e0 <GPIO_configureRCC+0x60>)
 80001c0:	f043 0304 	orr.w	r3, r3, #4
 80001c4:	6193      	str	r3, [r2, #24]
		GPIOx++;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	3301      	adds	r3, #1
 80001ca:	607b      	str	r3, [r7, #4]
	while(*GPIOx){
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d1da      	bne.n	800018a <GPIO_configureRCC+0xa>
	}
}
 80001d4:	bf00      	nop
 80001d6:	bf00      	nop
 80001d8:	370c      	adds	r7, #12
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	40021000 	.word	0x40021000

080001e4 <GPIO_configure>:
void GPIO_configure(GPIO_TypeDef*GPIOx, uint8_t Pin, uint8_t mode){
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	460b      	mov	r3, r1
 80001ee:	70fb      	strb	r3, [r7, #3]
 80001f0:	4613      	mov	r3, r2
 80001f2:	70bb      	strb	r3, [r7, #2]
	if(Pin > 7){
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b07      	cmp	r3, #7
 80001f8:	d917      	bls.n	800022a <GPIO_configure+0x46>
		GPIOx->CRH &= ~(15<<(Pin * 4 - 32));
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	685b      	ldr	r3, [r3, #4]
 80001fe:	78fa      	ldrb	r2, [r7, #3]
 8000200:	3a08      	subs	r2, #8
 8000202:	0092      	lsls	r2, r2, #2
 8000204:	210f      	movs	r1, #15
 8000206:	fa01 f202 	lsl.w	r2, r1, r2
 800020a:	43d2      	mvns	r2, r2
 800020c:	401a      	ands	r2, r3
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |= mode << (Pin * 4 - 32);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	78b9      	ldrb	r1, [r7, #2]
 8000218:	78fa      	ldrb	r2, [r7, #3]
 800021a:	3a08      	subs	r2, #8
 800021c:	0092      	lsls	r2, r2, #2
 800021e:	fa01 f202 	lsl.w	r2, r1, r2
 8000222:	431a      	orrs	r2, r3
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	605a      	str	r2, [r3, #4]
	}else{
		GPIOx->CRL &= ~(15<<(Pin * 4));
		GPIOx->CRL |=mode << (Pin * 4);
	}
}
 8000228:	e014      	b.n	8000254 <GPIO_configure+0x70>
		GPIOx->CRL &= ~(15<<(Pin * 4));
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	78fa      	ldrb	r2, [r7, #3]
 8000230:	0092      	lsls	r2, r2, #2
 8000232:	210f      	movs	r1, #15
 8000234:	fa01 f202 	lsl.w	r2, r1, r2
 8000238:	43d2      	mvns	r2, r2
 800023a:	401a      	ands	r2, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |=mode << (Pin * 4);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	78b9      	ldrb	r1, [r7, #2]
 8000246:	78fa      	ldrb	r2, [r7, #3]
 8000248:	0092      	lsls	r2, r2, #2
 800024a:	fa01 f202 	lsl.w	r2, r1, r2
 800024e:	431a      	orrs	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	601a      	str	r2, [r3, #0]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr

0800025e <GPIO_Init_Pin_Mode>:
	  else
	return 0;
}


void GPIO_Init_Pin_Mode(GPIO_TypeDef* GPIOx, ...) {
 800025e:	b40f      	push	{r0, r1, r2, r3}
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, GPIOx);
 8000266:	f107 0314 	add.w	r3, r7, #20
 800026a:	603b      	str	r3, [r7, #0]
	uint8_t Pin = (uint8_t)va_arg(args, int);
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	1d1a      	adds	r2, r3, #4
 8000270:	603a      	str	r2, [r7, #0]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	71fb      	strb	r3, [r7, #7]
	uint8_t Mode;
	while ((int)Pin != 255) {
 8000276:	e00f      	b.n	8000298 <GPIO_Init_Pin_Mode+0x3a>
		Mode = (uint8_t)va_arg(args, int);
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	1d1a      	adds	r2, r3, #4
 800027c:	603a      	str	r2, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	71bb      	strb	r3, [r7, #6]
		GPIO_configure(GPIOx, Pin, Mode);
 8000282:	79ba      	ldrb	r2, [r7, #6]
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	4619      	mov	r1, r3
 8000288:	6938      	ldr	r0, [r7, #16]
 800028a:	f7ff ffab 	bl	80001e4 <GPIO_configure>
		Pin = (uint8_t)va_arg(args, int);
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	1d1a      	adds	r2, r3, #4
 8000292:	603a      	str	r2, [r7, #0]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	71fb      	strb	r3, [r7, #7]
	while ((int)Pin != 255) {
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	2bff      	cmp	r3, #255	; 0xff
 800029c:	d1ec      	bne.n	8000278 <GPIO_Init_Pin_Mode+0x1a>
	}
	va_end(args);
}
 800029e:	bf00      	nop
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002aa:	b004      	add	sp, #16
 80002ac:	4770      	bx	lr
	...

080002b0 <SystemInitAnh>:
 *      Author: nguye
 */
#include "stm32f103.h"
#include <stm32f1xx.h>

void SystemInitAnh(void){
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <SystemInitAnh+0x24>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a06      	ldr	r2, [pc, #24]	; (80002d4 <SystemInitAnh+0x24>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= AFIO_MAPR_SWJ_CFG;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <SystemInitAnh+0x28>)
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <SystemInitAnh+0x28>)
 80002c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80002ca:	6053      	str	r3, [r2, #4]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40021000 	.word	0x40021000
 80002d8:	40010000 	.word	0x40010000

080002dc <RCC_Configure>:
void RCC_Configure(){
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 80002e0:	4b2b      	ldr	r3, [pc, #172]	; (8000390 <RCC_Configure+0xb4>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a2a      	ldr	r2, [pc, #168]	; (8000390 <RCC_Configure+0xb4>)
 80002e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ea:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 80002ec:	bf00      	nop
 80002ee:	4b28      	ldr	r3, [pc, #160]	; (8000390 <RCC_Configure+0xb4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f9      	beq.n	80002ee <RCC_Configure+0x12>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002fa:	4b25      	ldr	r3, [pc, #148]	; (8000390 <RCC_Configure+0xb4>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	4a24      	ldr	r2, [pc, #144]	; (8000390 <RCC_Configure+0xb4>)
 8000300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000304:	61d3      	str	r3, [r2, #28]

	FLASH->ACR |= FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 8000306:	4b23      	ldr	r3, [pc, #140]	; (8000394 <RCC_Configure+0xb8>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a22      	ldr	r2, [pc, #136]	; (8000394 <RCC_Configure+0xb8>)
 800030c:	f043 0312 	orr.w	r3, r3, #18
 8000310:	6013      	str	r3, [r2, #0]
	while (!(FLASH->ACR & FLASH_ACR_PRFTBS));
 8000312:	bf00      	nop
 8000314:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <RCC_Configure+0xb8>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f003 0320 	and.w	r3, r3, #32
 800031c:	2b00      	cmp	r3, #0
 800031e:	d0f9      	beq.n	8000314 <RCC_Configure+0x38>

	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000320:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <RCC_Configure+0xb4>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	4a1a      	ldr	r2, [pc, #104]	; (8000390 <RCC_Configure+0xb4>)
 8000326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800032a:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (7 << 18); // nhân RCC với 9
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <RCC_Configure+0xb4>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	4a17      	ldr	r2, [pc, #92]	; (8000390 <RCC_Configure+0xb4>)
 8000332:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000336:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (4 << 8); // chia để bus APB1 max 36
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <RCC_Configure+0xb4>)
 800033a:	685b      	ldr	r3, [r3, #4]
 800033c:	4a14      	ldr	r2, [pc, #80]	; (8000390 <RCC_Configure+0xb4>)
 800033e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000342:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (3 << 14); // chia ADC cho 6 = 9M
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <RCC_Configure+0xb4>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	4a11      	ldr	r2, [pc, #68]	; (8000390 <RCC_Configure+0xb4>)
 800034a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800034e:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <RCC_Configure+0xb4>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <RCC_Configure+0xb4>)
 8000356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800035a:	6013      	str	r3, [r2, #0]

	while (!(RCC->CR & RCC_CR_PLLRDY));
 800035c:	bf00      	nop
 800035e:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <RCC_Configure+0xb4>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f9      	beq.n	800035e <RCC_Configure+0x82>
	RCC->CFGR |= (2 << 0);
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <RCC_Configure+0xb4>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	4a08      	ldr	r2, [pc, #32]	; (8000390 <RCC_Configure+0xb4>)
 8000370:	f043 0302 	orr.w	r3, r3, #2
 8000374:	6053      	str	r3, [r2, #4]
	while (!(RCC->CFGR & (2 << 2)));
 8000376:	bf00      	nop
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <RCC_Configure+0xb4>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0f9      	beq.n	8000378 <RCC_Configure+0x9c>
}
 8000384:	bf00      	nop
 8000386:	bf00      	nop
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000
 8000394:	40022000 	.word	0x40022000

08000398 <TIM2_Configure>:
#include "TIM_Configure.h"
#include <stm32f1xx.h>

#define UP  1
#define DO  0
void TIM2_Configure(uint16_t PSC, uint32_t ARR){
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	6039      	str	r1, [r7, #0]
 80003a2:	80fb      	strh	r3, [r7, #6]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <TIM2_Configure+0x54>)
 80003a6:	69db      	ldr	r3, [r3, #28]
 80003a8:	4a10      	ldr	r2, [pc, #64]	; (80003ec <TIM2_Configure+0x54>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = PSC;
 80003b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b4:	88fb      	ldrh	r3, [r7, #6]
 80003b6:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->ARR = ARR;
 80003b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CR1 |= (1 << 0);
 80003c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ca:	f043 0301 	orr.w	r3, r3, #1
 80003ce:	6013      	str	r3, [r2, #0]
	while (!(TIM2->SR & TIM_SR_UIF));
 80003d0:	bf00      	nop
 80003d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d6:	691b      	ldr	r3, [r3, #16]
 80003d8:	f003 0301 	and.w	r3, r3, #1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0f8      	beq.n	80003d2 <TIM2_Configure+0x3a>
}
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40021000 	.word	0x40021000

080003f0 <delay_us2>:
	TIM4->CR1 |= TIM_CR1_ARPE | TIM_CR1_URS;
	TIM4->EGR |= TIM_EGR_UG;
	NVIC_EnableIRQ(TIM4_IRQn);
	TIM4->CR1 |= TIM_CR1_CEN;
}
void delay_us2(uint16_t us){
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	80fb      	strh	r3, [r7, #6]
	TIM2->CNT = 0;
 80003fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM2->CNT < us);
 8000402:	bf00      	nop
 8000404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	429a      	cmp	r2, r3
 800040e:	d3f9      	bcc.n	8000404 <delay_us2+0x14>
}
 8000410:	bf00      	nop
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <delay_ms2>:
void delay_us1(uint16_t us){
	TIM1->CNT = 0;
	while (TIM1->CNT < us);
}
void delay_ms2(uint16_t ms){
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	80fb      	strh	r3, [r7, #6]
	while (ms--){
 8000426:	e003      	b.n	8000430 <delay_ms2+0x14>
		delay_us2(1000);
 8000428:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800042c:	f7ff ffe0 	bl	80003f0 <delay_us2>
	while (ms--){
 8000430:	88fb      	ldrh	r3, [r7, #6]
 8000432:	1e5a      	subs	r2, r3, #1
 8000434:	80fa      	strh	r2, [r7, #6]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d1f6      	bne.n	8000428 <delay_ms2+0xc>
	}
}
 800043a:	bf00      	nop
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800044e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000452:	2b00      	cmp	r3, #0
 8000454:	db0b      	blt.n	800046e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	f003 021f 	and.w	r2, r3, #31
 800045c:	4906      	ldr	r1, [pc, #24]	; (8000478 <__NVIC_EnableIRQ+0x34>)
 800045e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000462:	095b      	lsrs	r3, r3, #5
 8000464:	2001      	movs	r0, #1
 8000466:	fa00 f202 	lsl.w	r2, r0, r2
 800046a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	e000e100 	.word	0xe000e100

0800047c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	6039      	str	r1, [r7, #0]
 8000486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800048c:	2b00      	cmp	r3, #0
 800048e:	db0a      	blt.n	80004a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	b2da      	uxtb	r2, r3
 8000494:	490c      	ldr	r1, [pc, #48]	; (80004c8 <__NVIC_SetPriority+0x4c>)
 8000496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800049a:	0112      	lsls	r2, r2, #4
 800049c:	b2d2      	uxtb	r2, r2
 800049e:	440b      	add	r3, r1
 80004a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004a4:	e00a      	b.n	80004bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	4908      	ldr	r1, [pc, #32]	; (80004cc <__NVIC_SetPriority+0x50>)
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	f003 030f 	and.w	r3, r3, #15
 80004b2:	3b04      	subs	r3, #4
 80004b4:	0112      	lsls	r2, r2, #4
 80004b6:	b2d2      	uxtb	r2, r2
 80004b8:	440b      	add	r3, r1
 80004ba:	761a      	strb	r2, [r3, #24]
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	e000e100 	.word	0xe000e100
 80004cc:	e000ed00 	.word	0xe000ed00

080004d0 <UART_Configure>:
 */

#include "UART_Configure.h"
#include "stm32f1xx.h"

void UART_Configure(void){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80004d4:	4b23      	ldr	r3, [pc, #140]	; (8000564 <UART_Configure+0x94>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a22      	ldr	r2, [pc, #136]	; (8000564 <UART_Configure+0x94>)
 80004da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004de:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFFFF0F;
 80004e0:	4b21      	ldr	r3, [pc, #132]	; (8000568 <UART_Configure+0x98>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	4a20      	ldr	r2, [pc, #128]	; (8000568 <UART_Configure+0x98>)
 80004e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80004ea:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (11 << 4);  //TX PA9
 80004ec:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <UART_Configure+0x98>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	4a1d      	ldr	r2, [pc, #116]	; (8000568 <UART_Configure+0x98>)
 80004f2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80004f6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= 0xFFFFF0FF;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <UART_Configure+0x98>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	4a1a      	ldr	r2, [pc, #104]	; (8000568 <UART_Configure+0x98>)
 80004fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000502:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1 << 10); //RX PA10
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <UART_Configure+0x98>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	4a17      	ldr	r2, [pc, #92]	; (8000568 <UART_Configure+0x98>)
 800050a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800050e:	6053      	str	r3, [r2, #4]
	GPIOA->CRL &= 0xFFFF0FFF;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <UART_Configure+0x98>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <UART_Configure+0x98>)
 8000516:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800051a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (2 << 12);
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <UART_Configure+0x98>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a11      	ldr	r2, [pc, #68]	; (8000568 <UART_Configure+0x98>)
 8000522:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000526:	6013      	str	r3, [r2, #0]
	/* UART configure */
	USART1->BRR |= (39 << 4) | (1 << 0);
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <UART_Configure+0x9c>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	4a0f      	ldr	r2, [pc, #60]	; (800056c <UART_Configure+0x9c>)
 800052e:	f443 731c 	orr.w	r3, r3, #624	; 0x270
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6093      	str	r3, [r2, #8]
	USART1->CR1 |= (1 << 2) | (1 << 3) | (1 << 5) ;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <UART_Configure+0x9c>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	4a0b      	ldr	r2, [pc, #44]	; (800056c <UART_Configure+0x9c>)
 800053e:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8000542:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART1_IRQn);
 8000544:	2025      	movs	r0, #37	; 0x25
 8000546:	f7ff ff7d 	bl	8000444 <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART1_IRQn, 1);
 800054a:	2101      	movs	r1, #1
 800054c:	2025      	movs	r0, #37	; 0x25
 800054e:	f7ff ff95 	bl	800047c <__NVIC_SetPriority>
	USART1->CR1 |= (1 << 13);
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <UART_Configure+0x9c>)
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <UART_Configure+0x9c>)
 8000558:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800055c:	60d3      	str	r3, [r2, #12]
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000
 8000568:	40010800 	.word	0x40010800
 800056c:	40013800 	.word	0x40013800

08000570 <UART_SendData>:
void UART_SendData(char* str){
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	while (*str){
 8000578:	e00d      	b.n	8000596 <UART_SendData+0x26>
		while (!(USART1->SR & (1 << 7)));
 800057a:	bf00      	nop
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <UART_SendData+0x48>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0f9      	beq.n	800057c <UART_SendData+0xc>
		USART1->DR = *str;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	781a      	ldrb	r2, [r3, #0]
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <UART_SendData+0x48>)
 800058e:	605a      	str	r2, [r3, #4]
		str++;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3301      	adds	r3, #1
 8000594:	607b      	str	r3, [r7, #4]
	while (*str){
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1ed      	bne.n	800057a <UART_SendData+0xa>
	}
	while (!(USART1->SR & (1 << 6)));
 800059e:	bf00      	nop
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <UART_SendData+0x48>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0f9      	beq.n	80005a0 <UART_SendData+0x30>
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	40013800 	.word	0x40013800

080005bc <main>:
volatile uint8_t rxComplete = 0;

uint16_t oke;

int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	; 0x40
 80005c0:	af06      	add	r7, sp, #24
	SystemInitAnh();
 80005c2:	f7ff fe75 	bl	80002b0 <SystemInitAnh>
	RCC_Configure();
 80005c6:	f7ff fe89 	bl	80002dc <RCC_Configure>
	GPIO_configureRCC("AB");
 80005ca:	4871      	ldr	r0, [pc, #452]	; (8000790 <main+0x1d4>)
 80005cc:	f7ff fdd8 	bl	8000180 <GPIO_configureRCC>
	TIM2_Configure(71, 0xFFFF);
 80005d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005d4:	2047      	movs	r0, #71	; 0x47
 80005d6:	f7ff fedf 	bl	8000398 <TIM2_Configure>
	UART_Configure();
 80005da:	f7ff ff79 	bl	80004d0 <UART_Configure>

	BeginGPIO((GPIO_TypeDef*)GPIOB, 12, 1, 13, 1, 14, 1, 15, 1);
 80005de:	23ff      	movs	r3, #255	; 0xff
 80005e0:	9305      	str	r3, [sp, #20]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9304      	str	r3, [sp, #16]
 80005e6:	230f      	movs	r3, #15
 80005e8:	9303      	str	r3, [sp, #12]
 80005ea:	2301      	movs	r3, #1
 80005ec:	9302      	str	r3, [sp, #8]
 80005ee:	230e      	movs	r3, #14
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	230d      	movs	r3, #13
 80005f8:	2201      	movs	r2, #1
 80005fa:	210c      	movs	r1, #12
 80005fc:	4865      	ldr	r0, [pc, #404]	; (8000794 <main+0x1d8>)
 80005fe:	f7ff fe2e 	bl	800025e <GPIO_Init_Pin_Mode>
	BeginGPIO((GPIO_TypeDef*)GPIOB, 8, 1, 9, 1, 10, 1, 11, 1);
 8000602:	23ff      	movs	r3, #255	; 0xff
 8000604:	9305      	str	r3, [sp, #20]
 8000606:	2301      	movs	r3, #1
 8000608:	9304      	str	r3, [sp, #16]
 800060a:	230b      	movs	r3, #11
 800060c:	9303      	str	r3, [sp, #12]
 800060e:	2301      	movs	r3, #1
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	230a      	movs	r3, #10
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2301      	movs	r3, #1
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2309      	movs	r3, #9
 800061c:	2201      	movs	r2, #1
 800061e:	2108      	movs	r1, #8
 8000620:	485c      	ldr	r0, [pc, #368]	; (8000794 <main+0x1d8>)
 8000622:	f7ff fe1c 	bl	800025e <GPIO_Init_Pin_Mode>
	int lastI = i, lastY = y;
 8000626:	4b5c      	ldr	r3, [pc, #368]	; (8000798 <main+0x1dc>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
 800062c:	4b5b      	ldr	r3, [pc, #364]	; (800079c <main+0x1e0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	623b      	str	r3, [r7, #32]
	UART_SendData("o");
 8000632:	485b      	ldr	r0, [pc, #364]	; (80007a0 <main+0x1e4>)
 8000634:	f7ff ff9c 	bl	8000570 <UART_SendData>
	while(1){
		if(rxComplete) {
 8000638:	4b5a      	ldr	r3, [pc, #360]	; (80007a4 <main+0x1e8>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0fa      	beq.n	8000638 <main+0x7c>
			int num1, num2, num3, num4, num5, k1 = 0, k2 = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
			sscanf(rxBuffer, "%d %d %d %d %d", &num1, &num2, &num3, &num4, &num5);
 800064a:	f107 0110 	add.w	r1, r7, #16
 800064e:	f107 0214 	add.w	r2, r7, #20
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	9302      	str	r3, [sp, #8]
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	460b      	mov	r3, r1
 8000664:	4950      	ldr	r1, [pc, #320]	; (80007a8 <main+0x1ec>)
 8000666:	4851      	ldr	r0, [pc, #324]	; (80007ac <main+0x1f0>)
 8000668:	f000 fa24 	bl	8000ab4 <siscanf>
			if(num1 == 0 && num4 == 0){
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d106      	bne.n	8000680 <main+0xc4>
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d103      	bne.n	8000680 <main+0xc4>
				delay_ms2(100);
 8000678:	2064      	movs	r0, #100	; 0x64
 800067a:	f7ff fecf 	bl	800041c <delay_ms2>
 800067e:	e000      	b.n	8000682 <main+0xc6>
			}
			JUM:
 8000680:	bf00      	nop
			if(num1 > 0){
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	2b00      	cmp	r3, #0
 8000686:	dd1e      	ble.n	80006c6 <main+0x10a>
				GPIOB->ODR = half_steps[i] | half_steps1[lastY];
 8000688:	4b43      	ldr	r3, [pc, #268]	; (8000798 <main+0x1dc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a48      	ldr	r2, [pc, #288]	; (80007b0 <main+0x1f4>)
 800068e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000692:	4948      	ldr	r1, [pc, #288]	; (80007b4 <main+0x1f8>)
 8000694:	6a3b      	ldr	r3, [r7, #32]
 8000696:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800069a:	493e      	ldr	r1, [pc, #248]	; (8000794 <main+0x1d8>)
 800069c:	4313      	orrs	r3, r2
 800069e:	60cb      	str	r3, [r1, #12]
				lastI = i;
 80006a0:	4b3d      	ldr	r3, [pc, #244]	; (8000798 <main+0x1dc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
				i = (i+num2)%8;
 80006a6:	4b3c      	ldr	r3, [pc, #240]	; (8000798 <main+0x1dc>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	4413      	add	r3, r2
 80006ae:	425a      	negs	r2, r3
 80006b0:	f003 0307 	and.w	r3, r3, #7
 80006b4:	f002 0207 	and.w	r2, r2, #7
 80006b8:	bf58      	it	pl
 80006ba:	4253      	negpl	r3, r2
 80006bc:	4a36      	ldr	r2, [pc, #216]	; (8000798 <main+0x1dc>)
 80006be:	6013      	str	r3, [r2, #0]
				k1++;
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	3301      	adds	r3, #1
 80006c4:	61fb      	str	r3, [r7, #28]
			}
			if(num3 > 0){
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	dd1e      	ble.n	800070a <main+0x14e>
				GPIOB->ODR = half_steps1[y] | half_steps[lastI];
 80006cc:	4b33      	ldr	r3, [pc, #204]	; (800079c <main+0x1e0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a38      	ldr	r2, [pc, #224]	; (80007b4 <main+0x1f8>)
 80006d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006d6:	4936      	ldr	r1, [pc, #216]	; (80007b0 <main+0x1f4>)
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006de:	492d      	ldr	r1, [pc, #180]	; (8000794 <main+0x1d8>)
 80006e0:	4313      	orrs	r3, r2
 80006e2:	60cb      	str	r3, [r1, #12]
				lastY = y;
 80006e4:	4b2d      	ldr	r3, [pc, #180]	; (800079c <main+0x1e0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	623b      	str	r3, [r7, #32]
				y = (y+num4)%8;
 80006ea:	4b2c      	ldr	r3, [pc, #176]	; (800079c <main+0x1e0>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	4413      	add	r3, r2
 80006f2:	425a      	negs	r2, r3
 80006f4:	f003 0307 	and.w	r3, r3, #7
 80006f8:	f002 0207 	and.w	r2, r2, #7
 80006fc:	bf58      	it	pl
 80006fe:	4253      	negpl	r3, r2
 8000700:	4a26      	ldr	r2, [pc, #152]	; (800079c <main+0x1e0>)
 8000702:	6013      	str	r3, [r2, #0]
				k2++;
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	3301      	adds	r3, #1
 8000708:	61bb      	str	r3, [r7, #24]
			}
			if (i<0)  i = 7;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <main+0x1dc>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	da02      	bge.n	8000718 <main+0x15c>
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <main+0x1dc>)
 8000714:	2207      	movs	r2, #7
 8000716:	601a      	str	r2, [r3, #0]
			if (y<0)  y = 7;
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <main+0x1e0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	da02      	bge.n	8000726 <main+0x16a>
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <main+0x1e0>)
 8000722:	2207      	movs	r2, #7
 8000724:	601a      	str	r2, [r3, #0]
			if((num1 < 1) && (num3 < 1)){
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dc09      	bgt.n	8000740 <main+0x184>
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	dc06      	bgt.n	8000740 <main+0x184>
				rxComplete = 0;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <main+0x1e8>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
				UART_SendData("o");
 8000738:	4819      	ldr	r0, [pc, #100]	; (80007a0 <main+0x1e4>)
 800073a:	f7ff ff19 	bl	8000570 <UART_SendData>
 800073e:	e77b      	b.n	8000638 <main+0x7c>
			}else {
				if(k1 % 40 ==39) num1--;
 8000740:	69f9      	ldr	r1, [r7, #28]
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <main+0x1fc>)
 8000744:	fb83 2301 	smull	r2, r3, r3, r1
 8000748:	111a      	asrs	r2, r3, #4
 800074a:	17cb      	asrs	r3, r1, #31
 800074c:	1ad2      	subs	r2, r2, r3
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	1aca      	subs	r2, r1, r3
 8000758:	2a27      	cmp	r2, #39	; 0x27
 800075a:	d102      	bne.n	8000762 <main+0x1a6>
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	3b01      	subs	r3, #1
 8000760:	617b      	str	r3, [r7, #20]
				if(k2 % 40 ==39)  num3--;
 8000762:	69b9      	ldr	r1, [r7, #24]
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <main+0x1fc>)
 8000766:	fb83 2301 	smull	r2, r3, r3, r1
 800076a:	111a      	asrs	r2, r3, #4
 800076c:	17cb      	asrs	r3, r1, #31
 800076e:	1ad2      	subs	r2, r2, r3
 8000770:	4613      	mov	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	1aca      	subs	r2, r1, r3
 800077a:	2a27      	cmp	r2, #39	; 0x27
 800077c:	d102      	bne.n	8000784 <main+0x1c8>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	3b01      	subs	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
				delay_us2(1500);
 8000784:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000788:	f7ff fe32 	bl	80003f0 <delay_us2>
				goto JUM;
 800078c:	e779      	b.n	8000682 <main+0xc6>
 800078e:	bf00      	nop
 8000790:	08001520 	.word	0x08001520
 8000794:	40010c00 	.word	0x40010c00
 8000798:	200000c0 	.word	0x200000c0
 800079c:	200000c4 	.word	0x200000c4
 80007a0:	08001524 	.word	0x08001524
 80007a4:	200000df 	.word	0x200000df
 80007a8:	08001528 	.word	0x08001528
 80007ac:	200000cc 	.word	0x200000cc
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000020 	.word	0x20000020
 80007b8:	66666667 	.word	0x66666667

080007bc <USART1_IRQHandler>:
	}
}



void USART1_IRQHandler() {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_RXNE) {
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <USART1_IRQHandler+0x64>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f003 0320 	and.w	r3, r3, #32
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d023      	beq.n	8000816 <USART1_IRQHandler+0x5a>
        char receivedChar = USART1->DR;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <USART1_IRQHandler+0x64>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	71fb      	strb	r3, [r7, #7]
        if (receivedChar == 'x') {
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b78      	cmp	r3, #120	; 0x78
 80007d8:	d112      	bne.n	8000800 <USART1_IRQHandler+0x44>
        	rxBuffer[rxIndex] = '\0';
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <USART1_IRQHandler+0x68>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <USART1_IRQHandler+0x6c>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	5499      	strb	r1, [r3, r2]
        	rxIndex = 0;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <USART1_IRQHandler+0x68>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
            rxComplete = 1;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <USART1_IRQHandler+0x70>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
            count++;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <USART1_IRQHandler+0x74>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <USART1_IRQHandler+0x74>)
 80007fc:	6013      	str	r3, [r2, #0]
        }
        else {
            rxBuffer[rxIndex++] = receivedChar;
        }
    }
}
 80007fe:	e00a      	b.n	8000816 <USART1_IRQHandler+0x5a>
            rxBuffer[rxIndex++] = receivedChar;
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <USART1_IRQHandler+0x68>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	b2d1      	uxtb	r1, r2
 800080a:	4a06      	ldr	r2, [pc, #24]	; (8000824 <USART1_IRQHandler+0x68>)
 800080c:	7011      	strb	r1, [r2, #0]
 800080e:	4619      	mov	r1, r3
 8000810:	4a05      	ldr	r2, [pc, #20]	; (8000828 <USART1_IRQHandler+0x6c>)
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	5453      	strb	r3, [r2, r1]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40013800 	.word	0x40013800
 8000824:	200000de 	.word	0x200000de
 8000828:	200000cc 	.word	0x200000cc
 800082c:	200000df 	.word	0x200000df
 8000830:	200000c8 	.word	0x200000c8

08000834 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000842:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000844:	f7ff fff6 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <LoopForever+0x6>)
  ldr r1, =_edata
 800084a:	490d      	ldr	r1, [pc, #52]	; (8000880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <LoopForever+0xe>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000860:	4c0a      	ldr	r4, [pc, #40]	; (800088c <LoopForever+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800086e:	f000 f811 	bl	8000894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000872:	f7ff fea3 	bl	80005bc <main>

08000876 <LoopForever>:

LoopForever:
  b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   r0, =_estack
 8000878:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000884:	080016cc 	.word	0x080016cc
  ldr r2, =_sbss
 8000888:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800088c:	200000f4 	.word	0x200000f4

08000890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_2_IRQHandler>
	...

08000894 <__libc_init_array>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	2600      	movs	r6, #0
 8000898:	4d0c      	ldr	r5, [pc, #48]	; (80008cc <__libc_init_array+0x38>)
 800089a:	4c0d      	ldr	r4, [pc, #52]	; (80008d0 <__libc_init_array+0x3c>)
 800089c:	1b64      	subs	r4, r4, r5
 800089e:	10a4      	asrs	r4, r4, #2
 80008a0:	42a6      	cmp	r6, r4
 80008a2:	d109      	bne.n	80008b8 <__libc_init_array+0x24>
 80008a4:	f000 fe30 	bl	8001508 <_init>
 80008a8:	2600      	movs	r6, #0
 80008aa:	4d0a      	ldr	r5, [pc, #40]	; (80008d4 <__libc_init_array+0x40>)
 80008ac:	4c0a      	ldr	r4, [pc, #40]	; (80008d8 <__libc_init_array+0x44>)
 80008ae:	1b64      	subs	r4, r4, r5
 80008b0:	10a4      	asrs	r4, r4, #2
 80008b2:	42a6      	cmp	r6, r4
 80008b4:	d105      	bne.n	80008c2 <__libc_init_array+0x2e>
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
 80008b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008bc:	4798      	blx	r3
 80008be:	3601      	adds	r6, #1
 80008c0:	e7ee      	b.n	80008a0 <__libc_init_array+0xc>
 80008c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008c6:	4798      	blx	r3
 80008c8:	3601      	adds	r6, #1
 80008ca:	e7f2      	b.n	80008b2 <__libc_init_array+0x1e>
 80008cc:	080016c4 	.word	0x080016c4
 80008d0:	080016c4 	.word	0x080016c4
 80008d4:	080016c4 	.word	0x080016c4
 80008d8:	080016c8 	.word	0x080016c8

080008dc <_free_r>:
 80008dc:	b538      	push	{r3, r4, r5, lr}
 80008de:	4605      	mov	r5, r0
 80008e0:	2900      	cmp	r1, #0
 80008e2:	d040      	beq.n	8000966 <_free_r+0x8a>
 80008e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008e8:	1f0c      	subs	r4, r1, #4
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	bfb8      	it	lt
 80008ee:	18e4      	addlt	r4, r4, r3
 80008f0:	f000 f91a 	bl	8000b28 <__malloc_lock>
 80008f4:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <_free_r+0x8c>)
 80008f6:	6813      	ldr	r3, [r2, #0]
 80008f8:	b933      	cbnz	r3, 8000908 <_free_r+0x2c>
 80008fa:	6063      	str	r3, [r4, #4]
 80008fc:	6014      	str	r4, [r2, #0]
 80008fe:	4628      	mov	r0, r5
 8000900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000904:	f000 b916 	b.w	8000b34 <__malloc_unlock>
 8000908:	42a3      	cmp	r3, r4
 800090a:	d908      	bls.n	800091e <_free_r+0x42>
 800090c:	6820      	ldr	r0, [r4, #0]
 800090e:	1821      	adds	r1, r4, r0
 8000910:	428b      	cmp	r3, r1
 8000912:	bf01      	itttt	eq
 8000914:	6819      	ldreq	r1, [r3, #0]
 8000916:	685b      	ldreq	r3, [r3, #4]
 8000918:	1809      	addeq	r1, r1, r0
 800091a:	6021      	streq	r1, [r4, #0]
 800091c:	e7ed      	b.n	80008fa <_free_r+0x1e>
 800091e:	461a      	mov	r2, r3
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	b10b      	cbz	r3, 8000928 <_free_r+0x4c>
 8000924:	42a3      	cmp	r3, r4
 8000926:	d9fa      	bls.n	800091e <_free_r+0x42>
 8000928:	6811      	ldr	r1, [r2, #0]
 800092a:	1850      	adds	r0, r2, r1
 800092c:	42a0      	cmp	r0, r4
 800092e:	d10b      	bne.n	8000948 <_free_r+0x6c>
 8000930:	6820      	ldr	r0, [r4, #0]
 8000932:	4401      	add	r1, r0
 8000934:	1850      	adds	r0, r2, r1
 8000936:	4283      	cmp	r3, r0
 8000938:	6011      	str	r1, [r2, #0]
 800093a:	d1e0      	bne.n	80008fe <_free_r+0x22>
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	4401      	add	r1, r0
 8000942:	6011      	str	r1, [r2, #0]
 8000944:	6053      	str	r3, [r2, #4]
 8000946:	e7da      	b.n	80008fe <_free_r+0x22>
 8000948:	d902      	bls.n	8000950 <_free_r+0x74>
 800094a:	230c      	movs	r3, #12
 800094c:	602b      	str	r3, [r5, #0]
 800094e:	e7d6      	b.n	80008fe <_free_r+0x22>
 8000950:	6820      	ldr	r0, [r4, #0]
 8000952:	1821      	adds	r1, r4, r0
 8000954:	428b      	cmp	r3, r1
 8000956:	bf01      	itttt	eq
 8000958:	6819      	ldreq	r1, [r3, #0]
 800095a:	685b      	ldreq	r3, [r3, #4]
 800095c:	1809      	addeq	r1, r1, r0
 800095e:	6021      	streq	r1, [r4, #0]
 8000960:	6063      	str	r3, [r4, #4]
 8000962:	6054      	str	r4, [r2, #4]
 8000964:	e7cb      	b.n	80008fe <_free_r+0x22>
 8000966:	bd38      	pop	{r3, r4, r5, pc}
 8000968:	200000e0 	.word	0x200000e0

0800096c <sbrk_aligned>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	4e0e      	ldr	r6, [pc, #56]	; (80009a8 <sbrk_aligned+0x3c>)
 8000970:	460c      	mov	r4, r1
 8000972:	6831      	ldr	r1, [r6, #0]
 8000974:	4605      	mov	r5, r0
 8000976:	b911      	cbnz	r1, 800097e <sbrk_aligned+0x12>
 8000978:	f000 f88c 	bl	8000a94 <_sbrk_r>
 800097c:	6030      	str	r0, [r6, #0]
 800097e:	4621      	mov	r1, r4
 8000980:	4628      	mov	r0, r5
 8000982:	f000 f887 	bl	8000a94 <_sbrk_r>
 8000986:	1c43      	adds	r3, r0, #1
 8000988:	d00a      	beq.n	80009a0 <sbrk_aligned+0x34>
 800098a:	1cc4      	adds	r4, r0, #3
 800098c:	f024 0403 	bic.w	r4, r4, #3
 8000990:	42a0      	cmp	r0, r4
 8000992:	d007      	beq.n	80009a4 <sbrk_aligned+0x38>
 8000994:	1a21      	subs	r1, r4, r0
 8000996:	4628      	mov	r0, r5
 8000998:	f000 f87c 	bl	8000a94 <_sbrk_r>
 800099c:	3001      	adds	r0, #1
 800099e:	d101      	bne.n	80009a4 <sbrk_aligned+0x38>
 80009a0:	f04f 34ff 	mov.w	r4, #4294967295
 80009a4:	4620      	mov	r0, r4
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	200000e4 	.word	0x200000e4

080009ac <_malloc_r>:
 80009ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009b0:	1ccd      	adds	r5, r1, #3
 80009b2:	f025 0503 	bic.w	r5, r5, #3
 80009b6:	3508      	adds	r5, #8
 80009b8:	2d0c      	cmp	r5, #12
 80009ba:	bf38      	it	cc
 80009bc:	250c      	movcc	r5, #12
 80009be:	2d00      	cmp	r5, #0
 80009c0:	4607      	mov	r7, r0
 80009c2:	db01      	blt.n	80009c8 <_malloc_r+0x1c>
 80009c4:	42a9      	cmp	r1, r5
 80009c6:	d905      	bls.n	80009d4 <_malloc_r+0x28>
 80009c8:	230c      	movs	r3, #12
 80009ca:	2600      	movs	r6, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4630      	mov	r0, r6
 80009d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009d4:	4e2e      	ldr	r6, [pc, #184]	; (8000a90 <_malloc_r+0xe4>)
 80009d6:	f000 f8a7 	bl	8000b28 <__malloc_lock>
 80009da:	6833      	ldr	r3, [r6, #0]
 80009dc:	461c      	mov	r4, r3
 80009de:	bb34      	cbnz	r4, 8000a2e <_malloc_r+0x82>
 80009e0:	4629      	mov	r1, r5
 80009e2:	4638      	mov	r0, r7
 80009e4:	f7ff ffc2 	bl	800096c <sbrk_aligned>
 80009e8:	1c43      	adds	r3, r0, #1
 80009ea:	4604      	mov	r4, r0
 80009ec:	d14d      	bne.n	8000a8a <_malloc_r+0xde>
 80009ee:	6834      	ldr	r4, [r6, #0]
 80009f0:	4626      	mov	r6, r4
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	d140      	bne.n	8000a78 <_malloc_r+0xcc>
 80009f6:	6823      	ldr	r3, [r4, #0]
 80009f8:	4631      	mov	r1, r6
 80009fa:	4638      	mov	r0, r7
 80009fc:	eb04 0803 	add.w	r8, r4, r3
 8000a00:	f000 f848 	bl	8000a94 <_sbrk_r>
 8000a04:	4580      	cmp	r8, r0
 8000a06:	d13a      	bne.n	8000a7e <_malloc_r+0xd2>
 8000a08:	6821      	ldr	r1, [r4, #0]
 8000a0a:	3503      	adds	r5, #3
 8000a0c:	1a6d      	subs	r5, r5, r1
 8000a0e:	f025 0503 	bic.w	r5, r5, #3
 8000a12:	3508      	adds	r5, #8
 8000a14:	2d0c      	cmp	r5, #12
 8000a16:	bf38      	it	cc
 8000a18:	250c      	movcc	r5, #12
 8000a1a:	4638      	mov	r0, r7
 8000a1c:	4629      	mov	r1, r5
 8000a1e:	f7ff ffa5 	bl	800096c <sbrk_aligned>
 8000a22:	3001      	adds	r0, #1
 8000a24:	d02b      	beq.n	8000a7e <_malloc_r+0xd2>
 8000a26:	6823      	ldr	r3, [r4, #0]
 8000a28:	442b      	add	r3, r5
 8000a2a:	6023      	str	r3, [r4, #0]
 8000a2c:	e00e      	b.n	8000a4c <_malloc_r+0xa0>
 8000a2e:	6822      	ldr	r2, [r4, #0]
 8000a30:	1b52      	subs	r2, r2, r5
 8000a32:	d41e      	bmi.n	8000a72 <_malloc_r+0xc6>
 8000a34:	2a0b      	cmp	r2, #11
 8000a36:	d916      	bls.n	8000a66 <_malloc_r+0xba>
 8000a38:	1961      	adds	r1, r4, r5
 8000a3a:	42a3      	cmp	r3, r4
 8000a3c:	6025      	str	r5, [r4, #0]
 8000a3e:	bf18      	it	ne
 8000a40:	6059      	strne	r1, [r3, #4]
 8000a42:	6863      	ldr	r3, [r4, #4]
 8000a44:	bf08      	it	eq
 8000a46:	6031      	streq	r1, [r6, #0]
 8000a48:	5162      	str	r2, [r4, r5]
 8000a4a:	604b      	str	r3, [r1, #4]
 8000a4c:	4638      	mov	r0, r7
 8000a4e:	f104 060b 	add.w	r6, r4, #11
 8000a52:	f000 f86f 	bl	8000b34 <__malloc_unlock>
 8000a56:	f026 0607 	bic.w	r6, r6, #7
 8000a5a:	1d23      	adds	r3, r4, #4
 8000a5c:	1af2      	subs	r2, r6, r3
 8000a5e:	d0b6      	beq.n	80009ce <_malloc_r+0x22>
 8000a60:	1b9b      	subs	r3, r3, r6
 8000a62:	50a3      	str	r3, [r4, r2]
 8000a64:	e7b3      	b.n	80009ce <_malloc_r+0x22>
 8000a66:	6862      	ldr	r2, [r4, #4]
 8000a68:	42a3      	cmp	r3, r4
 8000a6a:	bf0c      	ite	eq
 8000a6c:	6032      	streq	r2, [r6, #0]
 8000a6e:	605a      	strne	r2, [r3, #4]
 8000a70:	e7ec      	b.n	8000a4c <_malloc_r+0xa0>
 8000a72:	4623      	mov	r3, r4
 8000a74:	6864      	ldr	r4, [r4, #4]
 8000a76:	e7b2      	b.n	80009de <_malloc_r+0x32>
 8000a78:	4634      	mov	r4, r6
 8000a7a:	6876      	ldr	r6, [r6, #4]
 8000a7c:	e7b9      	b.n	80009f2 <_malloc_r+0x46>
 8000a7e:	230c      	movs	r3, #12
 8000a80:	4638      	mov	r0, r7
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	f000 f856 	bl	8000b34 <__malloc_unlock>
 8000a88:	e7a1      	b.n	80009ce <_malloc_r+0x22>
 8000a8a:	6025      	str	r5, [r4, #0]
 8000a8c:	e7de      	b.n	8000a4c <_malloc_r+0xa0>
 8000a8e:	bf00      	nop
 8000a90:	200000e0 	.word	0x200000e0

08000a94 <_sbrk_r>:
 8000a94:	b538      	push	{r3, r4, r5, lr}
 8000a96:	2300      	movs	r3, #0
 8000a98:	4d05      	ldr	r5, [pc, #20]	; (8000ab0 <_sbrk_r+0x1c>)
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	4608      	mov	r0, r1
 8000a9e:	602b      	str	r3, [r5, #0]
 8000aa0:	f000 fd24 	bl	80014ec <_sbrk>
 8000aa4:	1c43      	adds	r3, r0, #1
 8000aa6:	d102      	bne.n	8000aae <_sbrk_r+0x1a>
 8000aa8:	682b      	ldr	r3, [r5, #0]
 8000aaa:	b103      	cbz	r3, 8000aae <_sbrk_r+0x1a>
 8000aac:	6023      	str	r3, [r4, #0]
 8000aae:	bd38      	pop	{r3, r4, r5, pc}
 8000ab0:	200000e8 	.word	0x200000e8

08000ab4 <siscanf>:
 8000ab4:	b40e      	push	{r1, r2, r3}
 8000ab6:	f44f 7201 	mov.w	r2, #516	; 0x204
 8000aba:	b530      	push	{r4, r5, lr}
 8000abc:	b09c      	sub	sp, #112	; 0x70
 8000abe:	ac1f      	add	r4, sp, #124	; 0x7c
 8000ac0:	f854 5b04 	ldr.w	r5, [r4], #4
 8000ac4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000ac8:	9002      	str	r0, [sp, #8]
 8000aca:	9006      	str	r0, [sp, #24]
 8000acc:	f7ff fb50 	bl	8000170 <strlen>
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <siscanf+0x4c>)
 8000ad2:	9003      	str	r0, [sp, #12]
 8000ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ada:	9314      	str	r3, [sp, #80]	; 0x50
 8000adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae0:	9007      	str	r0, [sp, #28]
 8000ae2:	4808      	ldr	r0, [pc, #32]	; (8000b04 <siscanf+0x50>)
 8000ae4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000ae8:	462a      	mov	r2, r5
 8000aea:	4623      	mov	r3, r4
 8000aec:	a902      	add	r1, sp, #8
 8000aee:	6800      	ldr	r0, [r0, #0]
 8000af0:	9401      	str	r4, [sp, #4]
 8000af2:	f000 f87f 	bl	8000bf4 <__ssvfiscanf_r>
 8000af6:	b01c      	add	sp, #112	; 0x70
 8000af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000afc:	b003      	add	sp, #12
 8000afe:	4770      	bx	lr
 8000b00:	08000b09 	.word	0x08000b09
 8000b04:	20000040 	.word	0x20000040

08000b08 <__seofread>:
 8000b08:	2000      	movs	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <memcpy>:
 8000b0c:	440a      	add	r2, r1
 8000b0e:	4291      	cmp	r1, r2
 8000b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b14:	d100      	bne.n	8000b18 <memcpy+0xc>
 8000b16:	4770      	bx	lr
 8000b18:	b510      	push	{r4, lr}
 8000b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000b1e:	4291      	cmp	r1, r2
 8000b20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000b24:	d1f9      	bne.n	8000b1a <memcpy+0xe>
 8000b26:	bd10      	pop	{r4, pc}

08000b28 <__malloc_lock>:
 8000b28:	4801      	ldr	r0, [pc, #4]	; (8000b30 <__malloc_lock+0x8>)
 8000b2a:	f000 bc97 	b.w	800145c <__retarget_lock_acquire_recursive>
 8000b2e:	bf00      	nop
 8000b30:	200000ec 	.word	0x200000ec

08000b34 <__malloc_unlock>:
 8000b34:	4801      	ldr	r0, [pc, #4]	; (8000b3c <__malloc_unlock+0x8>)
 8000b36:	f000 bc92 	b.w	800145e <__retarget_lock_release_recursive>
 8000b3a:	bf00      	nop
 8000b3c:	200000ec 	.word	0x200000ec

08000b40 <_sungetc_r>:
 8000b40:	b538      	push	{r3, r4, r5, lr}
 8000b42:	1c4b      	adds	r3, r1, #1
 8000b44:	4614      	mov	r4, r2
 8000b46:	d103      	bne.n	8000b50 <_sungetc_r+0x10>
 8000b48:	f04f 35ff 	mov.w	r5, #4294967295
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	bd38      	pop	{r3, r4, r5, pc}
 8000b50:	8993      	ldrh	r3, [r2, #12]
 8000b52:	b2cd      	uxtb	r5, r1
 8000b54:	f023 0320 	bic.w	r3, r3, #32
 8000b58:	8193      	strh	r3, [r2, #12]
 8000b5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b5c:	6852      	ldr	r2, [r2, #4]
 8000b5e:	b18b      	cbz	r3, 8000b84 <_sungetc_r+0x44>
 8000b60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000b62:	4293      	cmp	r3, r2
 8000b64:	dd08      	ble.n	8000b78 <_sungetc_r+0x38>
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	1e5a      	subs	r2, r3, #1
 8000b6a:	6022      	str	r2, [r4, #0]
 8000b6c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000b70:	6863      	ldr	r3, [r4, #4]
 8000b72:	3301      	adds	r3, #1
 8000b74:	6063      	str	r3, [r4, #4]
 8000b76:	e7e9      	b.n	8000b4c <_sungetc_r+0xc>
 8000b78:	4621      	mov	r1, r4
 8000b7a:	f000 fc31 	bl	80013e0 <__submore>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d0f1      	beq.n	8000b66 <_sungetc_r+0x26>
 8000b82:	e7e1      	b.n	8000b48 <_sungetc_r+0x8>
 8000b84:	6921      	ldr	r1, [r4, #16]
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	b151      	cbz	r1, 8000ba0 <_sungetc_r+0x60>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	d208      	bcs.n	8000ba0 <_sungetc_r+0x60>
 8000b8e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8000b92:	42a9      	cmp	r1, r5
 8000b94:	d104      	bne.n	8000ba0 <_sungetc_r+0x60>
 8000b96:	3b01      	subs	r3, #1
 8000b98:	3201      	adds	r2, #1
 8000b9a:	6023      	str	r3, [r4, #0]
 8000b9c:	6062      	str	r2, [r4, #4]
 8000b9e:	e7d5      	b.n	8000b4c <_sungetc_r+0xc>
 8000ba0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8000ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ba8:	6363      	str	r3, [r4, #52]	; 0x34
 8000baa:	2303      	movs	r3, #3
 8000bac:	63a3      	str	r3, [r4, #56]	; 0x38
 8000bae:	4623      	mov	r3, r4
 8000bb0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000bb4:	6023      	str	r3, [r4, #0]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e7dc      	b.n	8000b74 <_sungetc_r+0x34>

08000bba <__ssrefill_r>:
 8000bba:	b510      	push	{r4, lr}
 8000bbc:	460c      	mov	r4, r1
 8000bbe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8000bc0:	b169      	cbz	r1, 8000bde <__ssrefill_r+0x24>
 8000bc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d001      	beq.n	8000bce <__ssrefill_r+0x14>
 8000bca:	f7ff fe87 	bl	80008dc <_free_r>
 8000bce:	2000      	movs	r0, #0
 8000bd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bd2:	6360      	str	r0, [r4, #52]	; 0x34
 8000bd4:	6063      	str	r3, [r4, #4]
 8000bd6:	b113      	cbz	r3, 8000bde <__ssrefill_r+0x24>
 8000bd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000bda:	6023      	str	r3, [r4, #0]
 8000bdc:	bd10      	pop	{r4, pc}
 8000bde:	6923      	ldr	r3, [r4, #16]
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	6023      	str	r3, [r4, #0]
 8000be6:	2300      	movs	r3, #0
 8000be8:	6063      	str	r3, [r4, #4]
 8000bea:	89a3      	ldrh	r3, [r4, #12]
 8000bec:	f043 0320 	orr.w	r3, r3, #32
 8000bf0:	81a3      	strh	r3, [r4, #12]
 8000bf2:	e7f3      	b.n	8000bdc <__ssrefill_r+0x22>

08000bf4 <__ssvfiscanf_r>:
 8000bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf8:	460c      	mov	r4, r1
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4606      	mov	r6, r0
 8000bfe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8000c02:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8000c06:	49a7      	ldr	r1, [pc, #668]	; (8000ea4 <__ssvfiscanf_r+0x2b0>)
 8000c08:	f10d 0804 	add.w	r8, sp, #4
 8000c0c:	91a0      	str	r1, [sp, #640]	; 0x280
 8000c0e:	49a6      	ldr	r1, [pc, #664]	; (8000ea8 <__ssvfiscanf_r+0x2b4>)
 8000c10:	4fa6      	ldr	r7, [pc, #664]	; (8000eac <__ssvfiscanf_r+0x2b8>)
 8000c12:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8000eb0 <__ssvfiscanf_r+0x2bc>
 8000c16:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8000c1a:	91a1      	str	r1, [sp, #644]	; 0x284
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	7813      	ldrb	r3, [r2, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 815c 	beq.w	8000ede <__ssvfiscanf_r+0x2ea>
 8000c26:	5dd9      	ldrb	r1, [r3, r7]
 8000c28:	1c55      	adds	r5, r2, #1
 8000c2a:	f011 0108 	ands.w	r1, r1, #8
 8000c2e:	d019      	beq.n	8000c64 <__ssvfiscanf_r+0x70>
 8000c30:	6863      	ldr	r3, [r4, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	dd0f      	ble.n	8000c56 <__ssvfiscanf_r+0x62>
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	781a      	ldrb	r2, [r3, #0]
 8000c3a:	5cba      	ldrb	r2, [r7, r2]
 8000c3c:	0712      	lsls	r2, r2, #28
 8000c3e:	d401      	bmi.n	8000c44 <__ssvfiscanf_r+0x50>
 8000c40:	462a      	mov	r2, r5
 8000c42:	e7ec      	b.n	8000c1e <__ssvfiscanf_r+0x2a>
 8000c44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8000c46:	3301      	adds	r3, #1
 8000c48:	3201      	adds	r2, #1
 8000c4a:	9245      	str	r2, [sp, #276]	; 0x114
 8000c4c:	6862      	ldr	r2, [r4, #4]
 8000c4e:	6023      	str	r3, [r4, #0]
 8000c50:	3a01      	subs	r2, #1
 8000c52:	6062      	str	r2, [r4, #4]
 8000c54:	e7ec      	b.n	8000c30 <__ssvfiscanf_r+0x3c>
 8000c56:	4621      	mov	r1, r4
 8000c58:	4630      	mov	r0, r6
 8000c5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000c5c:	4798      	blx	r3
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d0e9      	beq.n	8000c36 <__ssvfiscanf_r+0x42>
 8000c62:	e7ed      	b.n	8000c40 <__ssvfiscanf_r+0x4c>
 8000c64:	2b25      	cmp	r3, #37	; 0x25
 8000c66:	d012      	beq.n	8000c8e <__ssvfiscanf_r+0x9a>
 8000c68:	469a      	mov	sl, r3
 8000c6a:	6863      	ldr	r3, [r4, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f340 8094 	ble.w	8000d9a <__ssvfiscanf_r+0x1a6>
 8000c72:	6822      	ldr	r2, [r4, #0]
 8000c74:	7813      	ldrb	r3, [r2, #0]
 8000c76:	4553      	cmp	r3, sl
 8000c78:	f040 8131 	bne.w	8000ede <__ssvfiscanf_r+0x2ea>
 8000c7c:	6863      	ldr	r3, [r4, #4]
 8000c7e:	3201      	adds	r2, #1
 8000c80:	3b01      	subs	r3, #1
 8000c82:	6063      	str	r3, [r4, #4]
 8000c84:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8000c86:	6022      	str	r2, [r4, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	9345      	str	r3, [sp, #276]	; 0x114
 8000c8c:	e7d8      	b.n	8000c40 <__ssvfiscanf_r+0x4c>
 8000c8e:	9141      	str	r1, [sp, #260]	; 0x104
 8000c90:	9143      	str	r1, [sp, #268]	; 0x10c
 8000c92:	7853      	ldrb	r3, [r2, #1]
 8000c94:	2b2a      	cmp	r3, #42	; 0x2a
 8000c96:	bf04      	itt	eq
 8000c98:	2310      	moveq	r3, #16
 8000c9a:	1c95      	addeq	r5, r2, #2
 8000c9c:	f04f 020a 	mov.w	r2, #10
 8000ca0:	bf08      	it	eq
 8000ca2:	9341      	streq	r3, [sp, #260]	; 0x104
 8000ca4:	46aa      	mov	sl, r5
 8000ca6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8000caa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000cae:	2b09      	cmp	r3, #9
 8000cb0:	d91d      	bls.n	8000cee <__ssvfiscanf_r+0xfa>
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	487e      	ldr	r0, [pc, #504]	; (8000eb0 <__ssvfiscanf_r+0x2bc>)
 8000cb6:	f000 fbd3 	bl	8001460 <memchr>
 8000cba:	b140      	cbz	r0, 8000cce <__ssvfiscanf_r+0xda>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	4655      	mov	r5, sl
 8000cc0:	eba0 0009 	sub.w	r0, r0, r9
 8000cc4:	fa03 f000 	lsl.w	r0, r3, r0
 8000cc8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000cca:	4318      	orrs	r0, r3
 8000ccc:	9041      	str	r0, [sp, #260]	; 0x104
 8000cce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000cd2:	2b78      	cmp	r3, #120	; 0x78
 8000cd4:	d806      	bhi.n	8000ce4 <__ssvfiscanf_r+0xf0>
 8000cd6:	2b57      	cmp	r3, #87	; 0x57
 8000cd8:	d810      	bhi.n	8000cfc <__ssvfiscanf_r+0x108>
 8000cda:	2b25      	cmp	r3, #37	; 0x25
 8000cdc:	d0c4      	beq.n	8000c68 <__ssvfiscanf_r+0x74>
 8000cde:	d857      	bhi.n	8000d90 <__ssvfiscanf_r+0x19c>
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d065      	beq.n	8000db0 <__ssvfiscanf_r+0x1bc>
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	9347      	str	r3, [sp, #284]	; 0x11c
 8000ce8:	230a      	movs	r3, #10
 8000cea:	9342      	str	r3, [sp, #264]	; 0x108
 8000cec:	e072      	b.n	8000dd4 <__ssvfiscanf_r+0x1e0>
 8000cee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8000cf0:	4655      	mov	r5, sl
 8000cf2:	fb02 1103 	mla	r1, r2, r3, r1
 8000cf6:	3930      	subs	r1, #48	; 0x30
 8000cf8:	9143      	str	r1, [sp, #268]	; 0x10c
 8000cfa:	e7d3      	b.n	8000ca4 <__ssvfiscanf_r+0xb0>
 8000cfc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8000d00:	2a20      	cmp	r2, #32
 8000d02:	d8ef      	bhi.n	8000ce4 <__ssvfiscanf_r+0xf0>
 8000d04:	a101      	add	r1, pc, #4	; (adr r1, 8000d0c <__ssvfiscanf_r+0x118>)
 8000d06:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000d0a:	bf00      	nop
 8000d0c:	08000dbf 	.word	0x08000dbf
 8000d10:	08000ce5 	.word	0x08000ce5
 8000d14:	08000ce5 	.word	0x08000ce5
 8000d18:	08000e1d 	.word	0x08000e1d
 8000d1c:	08000ce5 	.word	0x08000ce5
 8000d20:	08000ce5 	.word	0x08000ce5
 8000d24:	08000ce5 	.word	0x08000ce5
 8000d28:	08000ce5 	.word	0x08000ce5
 8000d2c:	08000ce5 	.word	0x08000ce5
 8000d30:	08000ce5 	.word	0x08000ce5
 8000d34:	08000ce5 	.word	0x08000ce5
 8000d38:	08000e33 	.word	0x08000e33
 8000d3c:	08000e09 	.word	0x08000e09
 8000d40:	08000d97 	.word	0x08000d97
 8000d44:	08000d97 	.word	0x08000d97
 8000d48:	08000d97 	.word	0x08000d97
 8000d4c:	08000ce5 	.word	0x08000ce5
 8000d50:	08000e0d 	.word	0x08000e0d
 8000d54:	08000ce5 	.word	0x08000ce5
 8000d58:	08000ce5 	.word	0x08000ce5
 8000d5c:	08000ce5 	.word	0x08000ce5
 8000d60:	08000ce5 	.word	0x08000ce5
 8000d64:	08000e43 	.word	0x08000e43
 8000d68:	08000e15 	.word	0x08000e15
 8000d6c:	08000db7 	.word	0x08000db7
 8000d70:	08000ce5 	.word	0x08000ce5
 8000d74:	08000ce5 	.word	0x08000ce5
 8000d78:	08000e3f 	.word	0x08000e3f
 8000d7c:	08000ce5 	.word	0x08000ce5
 8000d80:	08000e09 	.word	0x08000e09
 8000d84:	08000ce5 	.word	0x08000ce5
 8000d88:	08000ce5 	.word	0x08000ce5
 8000d8c:	08000dbf 	.word	0x08000dbf
 8000d90:	3b45      	subs	r3, #69	; 0x45
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d8a6      	bhi.n	8000ce4 <__ssvfiscanf_r+0xf0>
 8000d96:	2305      	movs	r3, #5
 8000d98:	e01b      	b.n	8000dd2 <__ssvfiscanf_r+0x1de>
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000da0:	4798      	blx	r3
 8000da2:	2800      	cmp	r0, #0
 8000da4:	f43f af65 	beq.w	8000c72 <__ssvfiscanf_r+0x7e>
 8000da8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8000daa:	2800      	cmp	r0, #0
 8000dac:	f040 808d 	bne.w	8000eca <__ssvfiscanf_r+0x2d6>
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	e08f      	b.n	8000ed6 <__ssvfiscanf_r+0x2e2>
 8000db6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8000db8:	f042 0220 	orr.w	r2, r2, #32
 8000dbc:	9241      	str	r2, [sp, #260]	; 0x104
 8000dbe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8000dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dc4:	9241      	str	r2, [sp, #260]	; 0x104
 8000dc6:	2210      	movs	r2, #16
 8000dc8:	2b6f      	cmp	r3, #111	; 0x6f
 8000dca:	bf34      	ite	cc
 8000dcc:	2303      	movcc	r3, #3
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	9242      	str	r2, [sp, #264]	; 0x108
 8000dd2:	9347      	str	r3, [sp, #284]	; 0x11c
 8000dd4:	6863      	ldr	r3, [r4, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	dd42      	ble.n	8000e60 <__ssvfiscanf_r+0x26c>
 8000dda:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000ddc:	0659      	lsls	r1, r3, #25
 8000dde:	d404      	bmi.n	8000dea <__ssvfiscanf_r+0x1f6>
 8000de0:	6823      	ldr	r3, [r4, #0]
 8000de2:	781a      	ldrb	r2, [r3, #0]
 8000de4:	5cba      	ldrb	r2, [r7, r2]
 8000de6:	0712      	lsls	r2, r2, #28
 8000de8:	d441      	bmi.n	8000e6e <__ssvfiscanf_r+0x27a>
 8000dea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	dc50      	bgt.n	8000e92 <__ssvfiscanf_r+0x29e>
 8000df0:	466b      	mov	r3, sp
 8000df2:	4622      	mov	r2, r4
 8000df4:	4630      	mov	r0, r6
 8000df6:	a941      	add	r1, sp, #260	; 0x104
 8000df8:	f000 f876 	bl	8000ee8 <_scanf_chars>
 8000dfc:	2801      	cmp	r0, #1
 8000dfe:	d06e      	beq.n	8000ede <__ssvfiscanf_r+0x2ea>
 8000e00:	2802      	cmp	r0, #2
 8000e02:	f47f af1d 	bne.w	8000c40 <__ssvfiscanf_r+0x4c>
 8000e06:	e7cf      	b.n	8000da8 <__ssvfiscanf_r+0x1b4>
 8000e08:	220a      	movs	r2, #10
 8000e0a:	e7dd      	b.n	8000dc8 <__ssvfiscanf_r+0x1d4>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	9342      	str	r3, [sp, #264]	; 0x108
 8000e10:	2303      	movs	r3, #3
 8000e12:	e7de      	b.n	8000dd2 <__ssvfiscanf_r+0x1de>
 8000e14:	2308      	movs	r3, #8
 8000e16:	9342      	str	r3, [sp, #264]	; 0x108
 8000e18:	2304      	movs	r3, #4
 8000e1a:	e7da      	b.n	8000dd2 <__ssvfiscanf_r+0x1de>
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4640      	mov	r0, r8
 8000e20:	f000 f9b4 	bl	800118c <__sccl>
 8000e24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000e26:	4605      	mov	r5, r0
 8000e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e2c:	9341      	str	r3, [sp, #260]	; 0x104
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e7cf      	b.n	8000dd2 <__ssvfiscanf_r+0x1de>
 8000e32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e38:	9341      	str	r3, [sp, #260]	; 0x104
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e7c9      	b.n	8000dd2 <__ssvfiscanf_r+0x1de>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e7c7      	b.n	8000dd2 <__ssvfiscanf_r+0x1de>
 8000e42:	9841      	ldr	r0, [sp, #260]	; 0x104
 8000e44:	06c3      	lsls	r3, r0, #27
 8000e46:	f53f aefb 	bmi.w	8000c40 <__ssvfiscanf_r+0x4c>
 8000e4a:	9b00      	ldr	r3, [sp, #0]
 8000e4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8000e4e:	1d19      	adds	r1, r3, #4
 8000e50:	9100      	str	r1, [sp, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f010 0f01 	tst.w	r0, #1
 8000e58:	bf14      	ite	ne
 8000e5a:	801a      	strhne	r2, [r3, #0]
 8000e5c:	601a      	streq	r2, [r3, #0]
 8000e5e:	e6ef      	b.n	8000c40 <__ssvfiscanf_r+0x4c>
 8000e60:	4621      	mov	r1, r4
 8000e62:	4630      	mov	r0, r6
 8000e64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000e66:	4798      	blx	r3
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	d0b6      	beq.n	8000dda <__ssvfiscanf_r+0x1e6>
 8000e6c:	e79c      	b.n	8000da8 <__ssvfiscanf_r+0x1b4>
 8000e6e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8000e70:	3201      	adds	r2, #1
 8000e72:	9245      	str	r2, [sp, #276]	; 0x114
 8000e74:	6862      	ldr	r2, [r4, #4]
 8000e76:	3a01      	subs	r2, #1
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	6062      	str	r2, [r4, #4]
 8000e7c:	dd02      	ble.n	8000e84 <__ssvfiscanf_r+0x290>
 8000e7e:	3301      	adds	r3, #1
 8000e80:	6023      	str	r3, [r4, #0]
 8000e82:	e7ad      	b.n	8000de0 <__ssvfiscanf_r+0x1ec>
 8000e84:	4621      	mov	r1, r4
 8000e86:	4630      	mov	r0, r6
 8000e88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000e8a:	4798      	blx	r3
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	d0a7      	beq.n	8000de0 <__ssvfiscanf_r+0x1ec>
 8000e90:	e78a      	b.n	8000da8 <__ssvfiscanf_r+0x1b4>
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	dc0e      	bgt.n	8000eb4 <__ssvfiscanf_r+0x2c0>
 8000e96:	466b      	mov	r3, sp
 8000e98:	4622      	mov	r2, r4
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	a941      	add	r1, sp, #260	; 0x104
 8000e9e:	f000 f87d 	bl	8000f9c <_scanf_i>
 8000ea2:	e7ab      	b.n	8000dfc <__ssvfiscanf_r+0x208>
 8000ea4:	08000b41 	.word	0x08000b41
 8000ea8:	08000bbb 	.word	0x08000bbb
 8000eac:	08001564 	.word	0x08001564
 8000eb0:	08001544 	.word	0x08001544
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <__ssvfiscanf_r+0x2f0>)
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f43f aec2 	beq.w	8000c40 <__ssvfiscanf_r+0x4c>
 8000ebc:	466b      	mov	r3, sp
 8000ebe:	4622      	mov	r2, r4
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	a941      	add	r1, sp, #260	; 0x104
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	e798      	b.n	8000dfc <__ssvfiscanf_r+0x208>
 8000eca:	89a3      	ldrh	r3, [r4, #12]
 8000ecc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000ed0:	bf18      	it	ne
 8000ed2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ed6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ede:	9844      	ldr	r0, [sp, #272]	; 0x110
 8000ee0:	e7f9      	b.n	8000ed6 <__ssvfiscanf_r+0x2e2>
 8000ee2:	bf00      	nop
 8000ee4:	00000000 	.word	0x00000000

08000ee8 <_scanf_chars>:
 8000ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000eec:	4615      	mov	r5, r2
 8000eee:	688a      	ldr	r2, [r1, #8]
 8000ef0:	4680      	mov	r8, r0
 8000ef2:	460c      	mov	r4, r1
 8000ef4:	b932      	cbnz	r2, 8000f04 <_scanf_chars+0x1c>
 8000ef6:	698a      	ldr	r2, [r1, #24]
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	bf0c      	ite	eq
 8000efc:	2201      	moveq	r2, #1
 8000efe:	f04f 32ff 	movne.w	r2, #4294967295
 8000f02:	608a      	str	r2, [r1, #8]
 8000f04:	2700      	movs	r7, #0
 8000f06:	6822      	ldr	r2, [r4, #0]
 8000f08:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8000f98 <_scanf_chars+0xb0>
 8000f0c:	06d1      	lsls	r1, r2, #27
 8000f0e:	bf5f      	itttt	pl
 8000f10:	681a      	ldrpl	r2, [r3, #0]
 8000f12:	1d11      	addpl	r1, r2, #4
 8000f14:	6019      	strpl	r1, [r3, #0]
 8000f16:	6816      	ldrpl	r6, [r2, #0]
 8000f18:	69a0      	ldr	r0, [r4, #24]
 8000f1a:	b188      	cbz	r0, 8000f40 <_scanf_chars+0x58>
 8000f1c:	2801      	cmp	r0, #1
 8000f1e:	d107      	bne.n	8000f30 <_scanf_chars+0x48>
 8000f20:	682b      	ldr	r3, [r5, #0]
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	6963      	ldr	r3, [r4, #20]
 8000f26:	5c9b      	ldrb	r3, [r3, r2]
 8000f28:	b953      	cbnz	r3, 8000f40 <_scanf_chars+0x58>
 8000f2a:	2f00      	cmp	r7, #0
 8000f2c:	d031      	beq.n	8000f92 <_scanf_chars+0xaa>
 8000f2e:	e022      	b.n	8000f76 <_scanf_chars+0x8e>
 8000f30:	2802      	cmp	r0, #2
 8000f32:	d120      	bne.n	8000f76 <_scanf_chars+0x8e>
 8000f34:	682b      	ldr	r3, [r5, #0]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	f813 3009 	ldrb.w	r3, [r3, r9]
 8000f3c:	071b      	lsls	r3, r3, #28
 8000f3e:	d41a      	bmi.n	8000f76 <_scanf_chars+0x8e>
 8000f40:	6823      	ldr	r3, [r4, #0]
 8000f42:	3701      	adds	r7, #1
 8000f44:	06da      	lsls	r2, r3, #27
 8000f46:	bf5e      	ittt	pl
 8000f48:	682b      	ldrpl	r3, [r5, #0]
 8000f4a:	781b      	ldrbpl	r3, [r3, #0]
 8000f4c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8000f50:	682a      	ldr	r2, [r5, #0]
 8000f52:	686b      	ldr	r3, [r5, #4]
 8000f54:	3201      	adds	r2, #1
 8000f56:	602a      	str	r2, [r5, #0]
 8000f58:	68a2      	ldr	r2, [r4, #8]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	3a01      	subs	r2, #1
 8000f5e:	606b      	str	r3, [r5, #4]
 8000f60:	60a2      	str	r2, [r4, #8]
 8000f62:	b142      	cbz	r2, 8000f76 <_scanf_chars+0x8e>
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	dcd7      	bgt.n	8000f18 <_scanf_chars+0x30>
 8000f68:	4629      	mov	r1, r5
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8000f70:	4798      	blx	r3
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d0d0      	beq.n	8000f18 <_scanf_chars+0x30>
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	f013 0310 	ands.w	r3, r3, #16
 8000f7c:	d105      	bne.n	8000f8a <_scanf_chars+0xa2>
 8000f7e:	68e2      	ldr	r2, [r4, #12]
 8000f80:	3201      	adds	r2, #1
 8000f82:	60e2      	str	r2, [r4, #12]
 8000f84:	69a2      	ldr	r2, [r4, #24]
 8000f86:	b102      	cbz	r2, 8000f8a <_scanf_chars+0xa2>
 8000f88:	7033      	strb	r3, [r6, #0]
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	6923      	ldr	r3, [r4, #16]
 8000f8e:	443b      	add	r3, r7
 8000f90:	6123      	str	r3, [r4, #16]
 8000f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f96:	bf00      	nop
 8000f98:	08001564 	.word	0x08001564

08000f9c <_scanf_i>:
 8000f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fa0:	460c      	mov	r4, r1
 8000fa2:	4698      	mov	r8, r3
 8000fa4:	4b75      	ldr	r3, [pc, #468]	; (800117c <_scanf_i+0x1e0>)
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	4682      	mov	sl, r0
 8000faa:	4616      	mov	r6, r2
 8000fac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fb0:	ab03      	add	r3, sp, #12
 8000fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000fb6:	4b72      	ldr	r3, [pc, #456]	; (8001180 <_scanf_i+0x1e4>)
 8000fb8:	69a1      	ldr	r1, [r4, #24]
 8000fba:	4a72      	ldr	r2, [pc, #456]	; (8001184 <_scanf_i+0x1e8>)
 8000fbc:	4627      	mov	r7, r4
 8000fbe:	2903      	cmp	r1, #3
 8000fc0:	bf18      	it	ne
 8000fc2:	461a      	movne	r2, r3
 8000fc4:	68a3      	ldr	r3, [r4, #8]
 8000fc6:	9201      	str	r2, [sp, #4]
 8000fc8:	1e5a      	subs	r2, r3, #1
 8000fca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8000fce:	bf81      	itttt	hi
 8000fd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8000fd4:	eb03 0905 	addhi.w	r9, r3, r5
 8000fd8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8000fdc:	60a3      	strhi	r3, [r4, #8]
 8000fde:	f857 3b1c 	ldr.w	r3, [r7], #28
 8000fe2:	bf98      	it	ls
 8000fe4:	f04f 0900 	movls.w	r9, #0
 8000fe8:	463d      	mov	r5, r7
 8000fea:	f04f 0b00 	mov.w	fp, #0
 8000fee:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8000ff2:	6023      	str	r3, [r4, #0]
 8000ff4:	6831      	ldr	r1, [r6, #0]
 8000ff6:	ab03      	add	r3, sp, #12
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	7809      	ldrb	r1, [r1, #0]
 8000ffc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8001000:	f000 fa2e 	bl	8001460 <memchr>
 8001004:	b328      	cbz	r0, 8001052 <_scanf_i+0xb6>
 8001006:	f1bb 0f01 	cmp.w	fp, #1
 800100a:	d159      	bne.n	80010c0 <_scanf_i+0x124>
 800100c:	6862      	ldr	r2, [r4, #4]
 800100e:	b92a      	cbnz	r2, 800101c <_scanf_i+0x80>
 8001010:	2308      	movs	r3, #8
 8001012:	6822      	ldr	r2, [r4, #0]
 8001014:	6063      	str	r3, [r4, #4]
 8001016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800101a:	6022      	str	r2, [r4, #0]
 800101c:	6822      	ldr	r2, [r4, #0]
 800101e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8001022:	6022      	str	r2, [r4, #0]
 8001024:	68a2      	ldr	r2, [r4, #8]
 8001026:	1e51      	subs	r1, r2, #1
 8001028:	60a1      	str	r1, [r4, #8]
 800102a:	b192      	cbz	r2, 8001052 <_scanf_i+0xb6>
 800102c:	6832      	ldr	r2, [r6, #0]
 800102e:	1c51      	adds	r1, r2, #1
 8001030:	6031      	str	r1, [r6, #0]
 8001032:	7812      	ldrb	r2, [r2, #0]
 8001034:	f805 2b01 	strb.w	r2, [r5], #1
 8001038:	6872      	ldr	r2, [r6, #4]
 800103a:	3a01      	subs	r2, #1
 800103c:	2a00      	cmp	r2, #0
 800103e:	6072      	str	r2, [r6, #4]
 8001040:	dc07      	bgt.n	8001052 <_scanf_i+0xb6>
 8001042:	4631      	mov	r1, r6
 8001044:	4650      	mov	r0, sl
 8001046:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800104a:	4790      	blx	r2
 800104c:	2800      	cmp	r0, #0
 800104e:	f040 8085 	bne.w	800115c <_scanf_i+0x1c0>
 8001052:	f10b 0b01 	add.w	fp, fp, #1
 8001056:	f1bb 0f03 	cmp.w	fp, #3
 800105a:	d1cb      	bne.n	8000ff4 <_scanf_i+0x58>
 800105c:	6863      	ldr	r3, [r4, #4]
 800105e:	b90b      	cbnz	r3, 8001064 <_scanf_i+0xc8>
 8001060:	230a      	movs	r3, #10
 8001062:	6063      	str	r3, [r4, #4]
 8001064:	6863      	ldr	r3, [r4, #4]
 8001066:	4948      	ldr	r1, [pc, #288]	; (8001188 <_scanf_i+0x1ec>)
 8001068:	6960      	ldr	r0, [r4, #20]
 800106a:	1ac9      	subs	r1, r1, r3
 800106c:	f000 f88e 	bl	800118c <__sccl>
 8001070:	f04f 0b00 	mov.w	fp, #0
 8001074:	68a3      	ldr	r3, [r4, #8]
 8001076:	6822      	ldr	r2, [r4, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d03d      	beq.n	80010f8 <_scanf_i+0x15c>
 800107c:	6831      	ldr	r1, [r6, #0]
 800107e:	6960      	ldr	r0, [r4, #20]
 8001080:	f891 c000 	ldrb.w	ip, [r1]
 8001084:	f810 000c 	ldrb.w	r0, [r0, ip]
 8001088:	2800      	cmp	r0, #0
 800108a:	d035      	beq.n	80010f8 <_scanf_i+0x15c>
 800108c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8001090:	d124      	bne.n	80010dc <_scanf_i+0x140>
 8001092:	0510      	lsls	r0, r2, #20
 8001094:	d522      	bpl.n	80010dc <_scanf_i+0x140>
 8001096:	f10b 0b01 	add.w	fp, fp, #1
 800109a:	f1b9 0f00 	cmp.w	r9, #0
 800109e:	d003      	beq.n	80010a8 <_scanf_i+0x10c>
 80010a0:	3301      	adds	r3, #1
 80010a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80010a6:	60a3      	str	r3, [r4, #8]
 80010a8:	6873      	ldr	r3, [r6, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	6073      	str	r3, [r6, #4]
 80010b0:	dd1b      	ble.n	80010ea <_scanf_i+0x14e>
 80010b2:	6833      	ldr	r3, [r6, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	6033      	str	r3, [r6, #0]
 80010b8:	68a3      	ldr	r3, [r4, #8]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	60a3      	str	r3, [r4, #8]
 80010be:	e7d9      	b.n	8001074 <_scanf_i+0xd8>
 80010c0:	f1bb 0f02 	cmp.w	fp, #2
 80010c4:	d1ae      	bne.n	8001024 <_scanf_i+0x88>
 80010c6:	6822      	ldr	r2, [r4, #0]
 80010c8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80010cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80010d0:	d1bf      	bne.n	8001052 <_scanf_i+0xb6>
 80010d2:	2310      	movs	r3, #16
 80010d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010d8:	6063      	str	r3, [r4, #4]
 80010da:	e7a2      	b.n	8001022 <_scanf_i+0x86>
 80010dc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80010e0:	6022      	str	r2, [r4, #0]
 80010e2:	780b      	ldrb	r3, [r1, #0]
 80010e4:	f805 3b01 	strb.w	r3, [r5], #1
 80010e8:	e7de      	b.n	80010a8 <_scanf_i+0x10c>
 80010ea:	4631      	mov	r1, r6
 80010ec:	4650      	mov	r0, sl
 80010ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80010f2:	4798      	blx	r3
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d0df      	beq.n	80010b8 <_scanf_i+0x11c>
 80010f8:	6823      	ldr	r3, [r4, #0]
 80010fa:	05db      	lsls	r3, r3, #23
 80010fc:	d50d      	bpl.n	800111a <_scanf_i+0x17e>
 80010fe:	42bd      	cmp	r5, r7
 8001100:	d909      	bls.n	8001116 <_scanf_i+0x17a>
 8001102:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001106:	4632      	mov	r2, r6
 8001108:	4650      	mov	r0, sl
 800110a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800110e:	f105 39ff 	add.w	r9, r5, #4294967295
 8001112:	4798      	blx	r3
 8001114:	464d      	mov	r5, r9
 8001116:	42bd      	cmp	r5, r7
 8001118:	d02d      	beq.n	8001176 <_scanf_i+0x1da>
 800111a:	6822      	ldr	r2, [r4, #0]
 800111c:	f012 0210 	ands.w	r2, r2, #16
 8001120:	d113      	bne.n	800114a <_scanf_i+0x1ae>
 8001122:	702a      	strb	r2, [r5, #0]
 8001124:	4639      	mov	r1, r7
 8001126:	6863      	ldr	r3, [r4, #4]
 8001128:	4650      	mov	r0, sl
 800112a:	9e01      	ldr	r6, [sp, #4]
 800112c:	47b0      	blx	r6
 800112e:	6821      	ldr	r1, [r4, #0]
 8001130:	f8d8 3000 	ldr.w	r3, [r8]
 8001134:	f011 0f20 	tst.w	r1, #32
 8001138:	d013      	beq.n	8001162 <_scanf_i+0x1c6>
 800113a:	1d1a      	adds	r2, r3, #4
 800113c:	f8c8 2000 	str.w	r2, [r8]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6018      	str	r0, [r3, #0]
 8001144:	68e3      	ldr	r3, [r4, #12]
 8001146:	3301      	adds	r3, #1
 8001148:	60e3      	str	r3, [r4, #12]
 800114a:	2000      	movs	r0, #0
 800114c:	1bed      	subs	r5, r5, r7
 800114e:	44ab      	add	fp, r5
 8001150:	6925      	ldr	r5, [r4, #16]
 8001152:	445d      	add	r5, fp
 8001154:	6125      	str	r5, [r4, #16]
 8001156:	b007      	add	sp, #28
 8001158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800115c:	f04f 0b00 	mov.w	fp, #0
 8001160:	e7ca      	b.n	80010f8 <_scanf_i+0x15c>
 8001162:	1d1a      	adds	r2, r3, #4
 8001164:	f8c8 2000 	str.w	r2, [r8]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f011 0f01 	tst.w	r1, #1
 800116e:	bf14      	ite	ne
 8001170:	8018      	strhne	r0, [r3, #0]
 8001172:	6018      	streq	r0, [r3, #0]
 8001174:	e7e6      	b.n	8001144 <_scanf_i+0x1a8>
 8001176:	2001      	movs	r0, #1
 8001178:	e7ed      	b.n	8001156 <_scanf_i+0x1ba>
 800117a:	bf00      	nop
 800117c:	08001538 	.word	0x08001538
 8001180:	080013dd 	.word	0x080013dd
 8001184:	080012f5 	.word	0x080012f5
 8001188:	08001561 	.word	0x08001561

0800118c <__sccl>:
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	780b      	ldrb	r3, [r1, #0]
 8001190:	4604      	mov	r4, r0
 8001192:	2b5e      	cmp	r3, #94	; 0x5e
 8001194:	bf13      	iteet	ne
 8001196:	2200      	movne	r2, #0
 8001198:	2201      	moveq	r2, #1
 800119a:	784b      	ldrbeq	r3, [r1, #1]
 800119c:	1c48      	addne	r0, r1, #1
 800119e:	bf08      	it	eq
 80011a0:	1c88      	addeq	r0, r1, #2
 80011a2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80011a6:	1e61      	subs	r1, r4, #1
 80011a8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80011ac:	42a9      	cmp	r1, r5
 80011ae:	d1fb      	bne.n	80011a8 <__sccl+0x1c>
 80011b0:	b90b      	cbnz	r3, 80011b6 <__sccl+0x2a>
 80011b2:	3801      	subs	r0, #1
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
 80011b6:	f082 0201 	eor.w	r2, r2, #1
 80011ba:	4605      	mov	r5, r0
 80011bc:	54e2      	strb	r2, [r4, r3]
 80011be:	4628      	mov	r0, r5
 80011c0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80011c4:	292d      	cmp	r1, #45	; 0x2d
 80011c6:	d006      	beq.n	80011d6 <__sccl+0x4a>
 80011c8:	295d      	cmp	r1, #93	; 0x5d
 80011ca:	d0f3      	beq.n	80011b4 <__sccl+0x28>
 80011cc:	b909      	cbnz	r1, 80011d2 <__sccl+0x46>
 80011ce:	4628      	mov	r0, r5
 80011d0:	e7f0      	b.n	80011b4 <__sccl+0x28>
 80011d2:	460b      	mov	r3, r1
 80011d4:	e7f1      	b.n	80011ba <__sccl+0x2e>
 80011d6:	786e      	ldrb	r6, [r5, #1]
 80011d8:	2e5d      	cmp	r6, #93	; 0x5d
 80011da:	d0fa      	beq.n	80011d2 <__sccl+0x46>
 80011dc:	42b3      	cmp	r3, r6
 80011de:	dcf8      	bgt.n	80011d2 <__sccl+0x46>
 80011e0:	4619      	mov	r1, r3
 80011e2:	3502      	adds	r5, #2
 80011e4:	3101      	adds	r1, #1
 80011e6:	428e      	cmp	r6, r1
 80011e8:	5462      	strb	r2, [r4, r1]
 80011ea:	dcfb      	bgt.n	80011e4 <__sccl+0x58>
 80011ec:	1af1      	subs	r1, r6, r3
 80011ee:	3901      	subs	r1, #1
 80011f0:	42b3      	cmp	r3, r6
 80011f2:	bfa8      	it	ge
 80011f4:	2100      	movge	r1, #0
 80011f6:	1c58      	adds	r0, r3, #1
 80011f8:	1843      	adds	r3, r0, r1
 80011fa:	e7e0      	b.n	80011be <__sccl+0x32>

080011fc <_strtol_l.constprop.0>:
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001202:	4680      	mov	r8, r0
 8001204:	d001      	beq.n	800120a <_strtol_l.constprop.0+0xe>
 8001206:	2b24      	cmp	r3, #36	; 0x24
 8001208:	d906      	bls.n	8001218 <_strtol_l.constprop.0+0x1c>
 800120a:	f000 f921 	bl	8001450 <__errno>
 800120e:	2316      	movs	r3, #22
 8001210:	6003      	str	r3, [r0, #0]
 8001212:	2000      	movs	r0, #0
 8001214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001218:	460d      	mov	r5, r1
 800121a:	4f35      	ldr	r7, [pc, #212]	; (80012f0 <_strtol_l.constprop.0+0xf4>)
 800121c:	4628      	mov	r0, r5
 800121e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001222:	5de6      	ldrb	r6, [r4, r7]
 8001224:	f016 0608 	ands.w	r6, r6, #8
 8001228:	d1f8      	bne.n	800121c <_strtol_l.constprop.0+0x20>
 800122a:	2c2d      	cmp	r4, #45	; 0x2d
 800122c:	d12f      	bne.n	800128e <_strtol_l.constprop.0+0x92>
 800122e:	2601      	movs	r6, #1
 8001230:	782c      	ldrb	r4, [r5, #0]
 8001232:	1c85      	adds	r5, r0, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d057      	beq.n	80012e8 <_strtol_l.constprop.0+0xec>
 8001238:	2b10      	cmp	r3, #16
 800123a:	d109      	bne.n	8001250 <_strtol_l.constprop.0+0x54>
 800123c:	2c30      	cmp	r4, #48	; 0x30
 800123e:	d107      	bne.n	8001250 <_strtol_l.constprop.0+0x54>
 8001240:	7828      	ldrb	r0, [r5, #0]
 8001242:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8001246:	2858      	cmp	r0, #88	; 0x58
 8001248:	d149      	bne.n	80012de <_strtol_l.constprop.0+0xe2>
 800124a:	2310      	movs	r3, #16
 800124c:	786c      	ldrb	r4, [r5, #1]
 800124e:	3502      	adds	r5, #2
 8001250:	2700      	movs	r7, #0
 8001252:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8001256:	f10e 3eff 	add.w	lr, lr, #4294967295
 800125a:	fbbe f9f3 	udiv	r9, lr, r3
 800125e:	4638      	mov	r0, r7
 8001260:	fb03 ea19 	mls	sl, r3, r9, lr
 8001264:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8001268:	f1bc 0f09 	cmp.w	ip, #9
 800126c:	d814      	bhi.n	8001298 <_strtol_l.constprop.0+0x9c>
 800126e:	4664      	mov	r4, ip
 8001270:	42a3      	cmp	r3, r4
 8001272:	dd22      	ble.n	80012ba <_strtol_l.constprop.0+0xbe>
 8001274:	2f00      	cmp	r7, #0
 8001276:	db1d      	blt.n	80012b4 <_strtol_l.constprop.0+0xb8>
 8001278:	4581      	cmp	r9, r0
 800127a:	d31b      	bcc.n	80012b4 <_strtol_l.constprop.0+0xb8>
 800127c:	d101      	bne.n	8001282 <_strtol_l.constprop.0+0x86>
 800127e:	45a2      	cmp	sl, r4
 8001280:	db18      	blt.n	80012b4 <_strtol_l.constprop.0+0xb8>
 8001282:	2701      	movs	r7, #1
 8001284:	fb00 4003 	mla	r0, r0, r3, r4
 8001288:	f815 4b01 	ldrb.w	r4, [r5], #1
 800128c:	e7ea      	b.n	8001264 <_strtol_l.constprop.0+0x68>
 800128e:	2c2b      	cmp	r4, #43	; 0x2b
 8001290:	bf04      	itt	eq
 8001292:	782c      	ldrbeq	r4, [r5, #0]
 8001294:	1c85      	addeq	r5, r0, #2
 8001296:	e7cd      	b.n	8001234 <_strtol_l.constprop.0+0x38>
 8001298:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800129c:	f1bc 0f19 	cmp.w	ip, #25
 80012a0:	d801      	bhi.n	80012a6 <_strtol_l.constprop.0+0xaa>
 80012a2:	3c37      	subs	r4, #55	; 0x37
 80012a4:	e7e4      	b.n	8001270 <_strtol_l.constprop.0+0x74>
 80012a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80012aa:	f1bc 0f19 	cmp.w	ip, #25
 80012ae:	d804      	bhi.n	80012ba <_strtol_l.constprop.0+0xbe>
 80012b0:	3c57      	subs	r4, #87	; 0x57
 80012b2:	e7dd      	b.n	8001270 <_strtol_l.constprop.0+0x74>
 80012b4:	f04f 37ff 	mov.w	r7, #4294967295
 80012b8:	e7e6      	b.n	8001288 <_strtol_l.constprop.0+0x8c>
 80012ba:	2f00      	cmp	r7, #0
 80012bc:	da07      	bge.n	80012ce <_strtol_l.constprop.0+0xd2>
 80012be:	2322      	movs	r3, #34	; 0x22
 80012c0:	4670      	mov	r0, lr
 80012c2:	f8c8 3000 	str.w	r3, [r8]
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d0a4      	beq.n	8001214 <_strtol_l.constprop.0+0x18>
 80012ca:	1e69      	subs	r1, r5, #1
 80012cc:	e005      	b.n	80012da <_strtol_l.constprop.0+0xde>
 80012ce:	b106      	cbz	r6, 80012d2 <_strtol_l.constprop.0+0xd6>
 80012d0:	4240      	negs	r0, r0
 80012d2:	2a00      	cmp	r2, #0
 80012d4:	d09e      	beq.n	8001214 <_strtol_l.constprop.0+0x18>
 80012d6:	2f00      	cmp	r7, #0
 80012d8:	d1f7      	bne.n	80012ca <_strtol_l.constprop.0+0xce>
 80012da:	6011      	str	r1, [r2, #0]
 80012dc:	e79a      	b.n	8001214 <_strtol_l.constprop.0+0x18>
 80012de:	2430      	movs	r4, #48	; 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1b5      	bne.n	8001250 <_strtol_l.constprop.0+0x54>
 80012e4:	2308      	movs	r3, #8
 80012e6:	e7b3      	b.n	8001250 <_strtol_l.constprop.0+0x54>
 80012e8:	2c30      	cmp	r4, #48	; 0x30
 80012ea:	d0a9      	beq.n	8001240 <_strtol_l.constprop.0+0x44>
 80012ec:	230a      	movs	r3, #10
 80012ee:	e7af      	b.n	8001250 <_strtol_l.constprop.0+0x54>
 80012f0:	08001564 	.word	0x08001564

080012f4 <_strtol_r>:
 80012f4:	f7ff bf82 	b.w	80011fc <_strtol_l.constprop.0>

080012f8 <_strtoul_l.constprop.0>:
 80012f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012fc:	4686      	mov	lr, r0
 80012fe:	460d      	mov	r5, r1
 8001300:	4f35      	ldr	r7, [pc, #212]	; (80013d8 <_strtoul_l.constprop.0+0xe0>)
 8001302:	4628      	mov	r0, r5
 8001304:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001308:	5de6      	ldrb	r6, [r4, r7]
 800130a:	f016 0608 	ands.w	r6, r6, #8
 800130e:	d1f8      	bne.n	8001302 <_strtoul_l.constprop.0+0xa>
 8001310:	2c2d      	cmp	r4, #45	; 0x2d
 8001312:	d12f      	bne.n	8001374 <_strtoul_l.constprop.0+0x7c>
 8001314:	2601      	movs	r6, #1
 8001316:	782c      	ldrb	r4, [r5, #0]
 8001318:	1c85      	adds	r5, r0, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d057      	beq.n	80013ce <_strtoul_l.constprop.0+0xd6>
 800131e:	2b10      	cmp	r3, #16
 8001320:	d109      	bne.n	8001336 <_strtoul_l.constprop.0+0x3e>
 8001322:	2c30      	cmp	r4, #48	; 0x30
 8001324:	d107      	bne.n	8001336 <_strtoul_l.constprop.0+0x3e>
 8001326:	7828      	ldrb	r0, [r5, #0]
 8001328:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800132c:	2858      	cmp	r0, #88	; 0x58
 800132e:	d149      	bne.n	80013c4 <_strtoul_l.constprop.0+0xcc>
 8001330:	2310      	movs	r3, #16
 8001332:	786c      	ldrb	r4, [r5, #1]
 8001334:	3502      	adds	r5, #2
 8001336:	f04f 38ff 	mov.w	r8, #4294967295
 800133a:	fbb8 f8f3 	udiv	r8, r8, r3
 800133e:	2700      	movs	r7, #0
 8001340:	fb03 f908 	mul.w	r9, r3, r8
 8001344:	4638      	mov	r0, r7
 8001346:	ea6f 0909 	mvn.w	r9, r9
 800134a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800134e:	f1bc 0f09 	cmp.w	ip, #9
 8001352:	d814      	bhi.n	800137e <_strtoul_l.constprop.0+0x86>
 8001354:	4664      	mov	r4, ip
 8001356:	42a3      	cmp	r3, r4
 8001358:	dd22      	ble.n	80013a0 <_strtoul_l.constprop.0+0xa8>
 800135a:	2f00      	cmp	r7, #0
 800135c:	db1d      	blt.n	800139a <_strtoul_l.constprop.0+0xa2>
 800135e:	4580      	cmp	r8, r0
 8001360:	d31b      	bcc.n	800139a <_strtoul_l.constprop.0+0xa2>
 8001362:	d101      	bne.n	8001368 <_strtoul_l.constprop.0+0x70>
 8001364:	45a1      	cmp	r9, r4
 8001366:	db18      	blt.n	800139a <_strtoul_l.constprop.0+0xa2>
 8001368:	2701      	movs	r7, #1
 800136a:	fb00 4003 	mla	r0, r0, r3, r4
 800136e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001372:	e7ea      	b.n	800134a <_strtoul_l.constprop.0+0x52>
 8001374:	2c2b      	cmp	r4, #43	; 0x2b
 8001376:	bf04      	itt	eq
 8001378:	782c      	ldrbeq	r4, [r5, #0]
 800137a:	1c85      	addeq	r5, r0, #2
 800137c:	e7cd      	b.n	800131a <_strtoul_l.constprop.0+0x22>
 800137e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001382:	f1bc 0f19 	cmp.w	ip, #25
 8001386:	d801      	bhi.n	800138c <_strtoul_l.constprop.0+0x94>
 8001388:	3c37      	subs	r4, #55	; 0x37
 800138a:	e7e4      	b.n	8001356 <_strtoul_l.constprop.0+0x5e>
 800138c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8001390:	f1bc 0f19 	cmp.w	ip, #25
 8001394:	d804      	bhi.n	80013a0 <_strtoul_l.constprop.0+0xa8>
 8001396:	3c57      	subs	r4, #87	; 0x57
 8001398:	e7dd      	b.n	8001356 <_strtoul_l.constprop.0+0x5e>
 800139a:	f04f 37ff 	mov.w	r7, #4294967295
 800139e:	e7e6      	b.n	800136e <_strtoul_l.constprop.0+0x76>
 80013a0:	2f00      	cmp	r7, #0
 80013a2:	da07      	bge.n	80013b4 <_strtoul_l.constprop.0+0xbc>
 80013a4:	2322      	movs	r3, #34	; 0x22
 80013a6:	f04f 30ff 	mov.w	r0, #4294967295
 80013aa:	f8ce 3000 	str.w	r3, [lr]
 80013ae:	b932      	cbnz	r2, 80013be <_strtoul_l.constprop.0+0xc6>
 80013b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013b4:	b106      	cbz	r6, 80013b8 <_strtoul_l.constprop.0+0xc0>
 80013b6:	4240      	negs	r0, r0
 80013b8:	2a00      	cmp	r2, #0
 80013ba:	d0f9      	beq.n	80013b0 <_strtoul_l.constprop.0+0xb8>
 80013bc:	b107      	cbz	r7, 80013c0 <_strtoul_l.constprop.0+0xc8>
 80013be:	1e69      	subs	r1, r5, #1
 80013c0:	6011      	str	r1, [r2, #0]
 80013c2:	e7f5      	b.n	80013b0 <_strtoul_l.constprop.0+0xb8>
 80013c4:	2430      	movs	r4, #48	; 0x30
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1b5      	bne.n	8001336 <_strtoul_l.constprop.0+0x3e>
 80013ca:	2308      	movs	r3, #8
 80013cc:	e7b3      	b.n	8001336 <_strtoul_l.constprop.0+0x3e>
 80013ce:	2c30      	cmp	r4, #48	; 0x30
 80013d0:	d0a9      	beq.n	8001326 <_strtoul_l.constprop.0+0x2e>
 80013d2:	230a      	movs	r3, #10
 80013d4:	e7af      	b.n	8001336 <_strtoul_l.constprop.0+0x3e>
 80013d6:	bf00      	nop
 80013d8:	08001564 	.word	0x08001564

080013dc <_strtoul_r>:
 80013dc:	f7ff bf8c 	b.w	80012f8 <_strtoul_l.constprop.0>

080013e0 <__submore>:
 80013e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013e4:	460c      	mov	r4, r1
 80013e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80013e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013ec:	4299      	cmp	r1, r3
 80013ee:	d11b      	bne.n	8001428 <__submore+0x48>
 80013f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013f4:	f7ff fada 	bl	80009ac <_malloc_r>
 80013f8:	b918      	cbnz	r0, 8001402 <__submore+0x22>
 80013fa:	f04f 30ff 	mov.w	r0, #4294967295
 80013fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001406:	63a3      	str	r3, [r4, #56]	; 0x38
 8001408:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800140c:	6360      	str	r0, [r4, #52]	; 0x34
 800140e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8001412:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001416:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800141a:	7043      	strb	r3, [r0, #1]
 800141c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001420:	7003      	strb	r3, [r0, #0]
 8001422:	6020      	str	r0, [r4, #0]
 8001424:	2000      	movs	r0, #0
 8001426:	e7ea      	b.n	80013fe <__submore+0x1e>
 8001428:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800142a:	0077      	lsls	r7, r6, #1
 800142c:	463a      	mov	r2, r7
 800142e:	f000 f825 	bl	800147c <_realloc_r>
 8001432:	4605      	mov	r5, r0
 8001434:	2800      	cmp	r0, #0
 8001436:	d0e0      	beq.n	80013fa <__submore+0x1a>
 8001438:	eb00 0806 	add.w	r8, r0, r6
 800143c:	4601      	mov	r1, r0
 800143e:	4632      	mov	r2, r6
 8001440:	4640      	mov	r0, r8
 8001442:	f7ff fb63 	bl	8000b0c <memcpy>
 8001446:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800144a:	f8c4 8000 	str.w	r8, [r4]
 800144e:	e7e9      	b.n	8001424 <__submore+0x44>

08001450 <__errno>:
 8001450:	4b01      	ldr	r3, [pc, #4]	; (8001458 <__errno+0x8>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000040 	.word	0x20000040

0800145c <__retarget_lock_acquire_recursive>:
 800145c:	4770      	bx	lr

0800145e <__retarget_lock_release_recursive>:
 800145e:	4770      	bx	lr

08001460 <memchr>:
 8001460:	4603      	mov	r3, r0
 8001462:	b510      	push	{r4, lr}
 8001464:	b2c9      	uxtb	r1, r1
 8001466:	4402      	add	r2, r0
 8001468:	4293      	cmp	r3, r2
 800146a:	4618      	mov	r0, r3
 800146c:	d101      	bne.n	8001472 <memchr+0x12>
 800146e:	2000      	movs	r0, #0
 8001470:	e003      	b.n	800147a <memchr+0x1a>
 8001472:	7804      	ldrb	r4, [r0, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	428c      	cmp	r4, r1
 8001478:	d1f6      	bne.n	8001468 <memchr+0x8>
 800147a:	bd10      	pop	{r4, pc}

0800147c <_realloc_r>:
 800147c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001480:	4680      	mov	r8, r0
 8001482:	4614      	mov	r4, r2
 8001484:	460e      	mov	r6, r1
 8001486:	b921      	cbnz	r1, 8001492 <_realloc_r+0x16>
 8001488:	4611      	mov	r1, r2
 800148a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800148e:	f7ff ba8d 	b.w	80009ac <_malloc_r>
 8001492:	b92a      	cbnz	r2, 80014a0 <_realloc_r+0x24>
 8001494:	f7ff fa22 	bl	80008dc <_free_r>
 8001498:	4625      	mov	r5, r4
 800149a:	4628      	mov	r0, r5
 800149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014a0:	f000 f81b 	bl	80014da <_malloc_usable_size_r>
 80014a4:	4284      	cmp	r4, r0
 80014a6:	4607      	mov	r7, r0
 80014a8:	d802      	bhi.n	80014b0 <_realloc_r+0x34>
 80014aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80014ae:	d812      	bhi.n	80014d6 <_realloc_r+0x5a>
 80014b0:	4621      	mov	r1, r4
 80014b2:	4640      	mov	r0, r8
 80014b4:	f7ff fa7a 	bl	80009ac <_malloc_r>
 80014b8:	4605      	mov	r5, r0
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d0ed      	beq.n	800149a <_realloc_r+0x1e>
 80014be:	42bc      	cmp	r4, r7
 80014c0:	4622      	mov	r2, r4
 80014c2:	4631      	mov	r1, r6
 80014c4:	bf28      	it	cs
 80014c6:	463a      	movcs	r2, r7
 80014c8:	f7ff fb20 	bl	8000b0c <memcpy>
 80014cc:	4631      	mov	r1, r6
 80014ce:	4640      	mov	r0, r8
 80014d0:	f7ff fa04 	bl	80008dc <_free_r>
 80014d4:	e7e1      	b.n	800149a <_realloc_r+0x1e>
 80014d6:	4635      	mov	r5, r6
 80014d8:	e7df      	b.n	800149a <_realloc_r+0x1e>

080014da <_malloc_usable_size_r>:
 80014da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014de:	1f18      	subs	r0, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bfbc      	itt	lt
 80014e4:	580b      	ldrlt	r3, [r1, r0]
 80014e6:	18c0      	addlt	r0, r0, r3
 80014e8:	4770      	bx	lr
	...

080014ec <_sbrk>:
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <_sbrk+0x14>)
 80014ee:	4603      	mov	r3, r0
 80014f0:	6811      	ldr	r1, [r2, #0]
 80014f2:	b909      	cbnz	r1, 80014f8 <_sbrk+0xc>
 80014f4:	4903      	ldr	r1, [pc, #12]	; (8001504 <_sbrk+0x18>)
 80014f6:	6011      	str	r1, [r2, #0]
 80014f8:	6810      	ldr	r0, [r2, #0]
 80014fa:	4403      	add	r3, r0
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4770      	bx	lr
 8001500:	200000f0 	.word	0x200000f0
 8001504:	200000f8 	.word	0x200000f8

08001508 <_init>:
 8001508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150a:	bf00      	nop
 800150c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800150e:	bc08      	pop	{r3}
 8001510:	469e      	mov	lr, r3
 8001512:	4770      	bx	lr

08001514 <_fini>:
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	bf00      	nop
 8001518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151a:	bc08      	pop	{r3}
 800151c:	469e      	mov	lr, r3
 800151e:	4770      	bx	lr
